# coding: utf-8

"""
    CMS-Backend API

    This is API documentation of CMS-Backend  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: htdevteam@hindustantimes.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class LockControllerApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def acquire_card_lock_using_get(self, article_id, domain, **kwargs):  # noqa: E501
        """acquireCardLock  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.acquire_card_lock_using_get(article_id, domain, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int article_id: articleId (required)
        :param str domain: Domain (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.acquire_card_lock_using_get_with_http_info(article_id, domain, **kwargs)  # noqa: E501
        else:
            (data) = self.acquire_card_lock_using_get_with_http_info(article_id, domain, **kwargs)  # noqa: E501
            return data

    def acquire_card_lock_using_get_with_http_info(self, article_id, domain, **kwargs):  # noqa: E501
        """acquireCardLock  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.acquire_card_lock_using_get_with_http_info(article_id, domain, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int article_id: articleId (required)
        :param str domain: Domain (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article_id', 'domain']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method acquire_card_lock_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article_id' is set
        if ('article_id' not in params or
                params['article_id'] is None):
            raise ValueError("Missing the required parameter `article_id` when calling `acquire_card_lock_using_get`")  # noqa: E501
        # verify the required parameter 'domain' is set
        if ('domain' not in params or
                params['domain'] is None):
            raise ValueError("Missing the required parameter `domain` when calling `acquire_card_lock_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'article_id' in params:
            query_params.append(('articleId', params['article_id']))  # noqa: E501

        header_params = {}
        if 'domain' in params:
            header_params['Domain'] = params['domain']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/cms/lock/acquire/article', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def acquire_footer_lock_using_get(self, domain, **kwargs):  # noqa: E501
        """acquireFooterLock  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.acquire_footer_lock_using_get(domain, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain: Domain (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.acquire_footer_lock_using_get_with_http_info(domain, **kwargs)  # noqa: E501
        else:
            (data) = self.acquire_footer_lock_using_get_with_http_info(domain, **kwargs)  # noqa: E501
            return data

    def acquire_footer_lock_using_get_with_http_info(self, domain, **kwargs):  # noqa: E501
        """acquireFooterLock  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.acquire_footer_lock_using_get_with_http_info(domain, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain: Domain (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method acquire_footer_lock_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain' is set
        if ('domain' not in params or
                params['domain'] is None):
            raise ValueError("Missing the required parameter `domain` when calling `acquire_footer_lock_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'domain' in params:
            header_params['Domain'] = params['domain']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/cms/lock/acquire/footer/navigation', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def acquire_level_lock_using_get(self, domain, nav_type, **kwargs):  # noqa: E501
        """acquireLevelLock  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.acquire_level_lock_using_get(domain, nav_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain: Domain (required)
        :param str nav_type: navType (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.acquire_level_lock_using_get_with_http_info(domain, nav_type, **kwargs)  # noqa: E501
        else:
            (data) = self.acquire_level_lock_using_get_with_http_info(domain, nav_type, **kwargs)  # noqa: E501
            return data

    def acquire_level_lock_using_get_with_http_info(self, domain, nav_type, **kwargs):  # noqa: E501
        """acquireLevelLock  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.acquire_level_lock_using_get_with_http_info(domain, nav_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain: Domain (required)
        :param str nav_type: navType (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain', 'nav_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method acquire_level_lock_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain' is set
        if ('domain' not in params or
                params['domain'] is None):
            raise ValueError("Missing the required parameter `domain` when calling `acquire_level_lock_using_get`")  # noqa: E501
        # verify the required parameter 'nav_type' is set
        if ('nav_type' not in params or
                params['nav_type'] is None):
            raise ValueError("Missing the required parameter `nav_type` when calling `acquire_level_lock_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'nav_type' in params:
            query_params.append(('navType', params['nav_type']))  # noqa: E501

        header_params = {}
        if 'domain' in params:
            header_params['Domain'] = params['domain']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/cms/lock/acquire/level/navigation', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def acquire_page_lock_using_get(self, page_id, domain, **kwargs):  # noqa: E501
        """acquirePageLock  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.acquire_page_lock_using_get(page_id, domain, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page_id: pageId (required)
        :param str domain: Domain (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.acquire_page_lock_using_get_with_http_info(page_id, domain, **kwargs)  # noqa: E501
        else:
            (data) = self.acquire_page_lock_using_get_with_http_info(page_id, domain, **kwargs)  # noqa: E501
            return data

    def acquire_page_lock_using_get_with_http_info(self, page_id, domain, **kwargs):  # noqa: E501
        """acquirePageLock  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.acquire_page_lock_using_get_with_http_info(page_id, domain, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page_id: pageId (required)
        :param str domain: Domain (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page_id', 'domain']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method acquire_page_lock_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'page_id' is set
        if ('page_id' not in params or
                params['page_id'] is None):
            raise ValueError("Missing the required parameter `page_id` when calling `acquire_page_lock_using_get`")  # noqa: E501
        # verify the required parameter 'domain' is set
        if ('domain' not in params or
                params['domain'] is None):
            raise ValueError("Missing the required parameter `domain` when calling `acquire_page_lock_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page_id' in params:
            query_params.append(('pageId', params['page_id']))  # noqa: E501

        header_params = {}
        if 'domain' in params:
            header_params['Domain'] = params['domain']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/cms/lock/acquire/page', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def acquire_section_lock_using_get(self, domain, **kwargs):  # noqa: E501
        """acquireSectionLock  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.acquire_section_lock_using_get(domain, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain: Domain (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.acquire_section_lock_using_get_with_http_info(domain, **kwargs)  # noqa: E501
        else:
            (data) = self.acquire_section_lock_using_get_with_http_info(domain, **kwargs)  # noqa: E501
            return data

    def acquire_section_lock_using_get_with_http_info(self, domain, **kwargs):  # noqa: E501
        """acquireSectionLock  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.acquire_section_lock_using_get_with_http_info(domain, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain: Domain (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method acquire_section_lock_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain' is set
        if ('domain' not in params or
                params['domain'] is None):
            raise ValueError("Missing the required parameter `domain` when calling `acquire_section_lock_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'domain' in params:
            header_params['Domain'] = params['domain']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/cms/lock/acquire/section/navigation', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def acquire_topic_lock_using_get(self, domain, **kwargs):  # noqa: E501
        """acquireTopicLock  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.acquire_topic_lock_using_get(domain, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain: Domain (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.acquire_topic_lock_using_get_with_http_info(domain, **kwargs)  # noqa: E501
        else:
            (data) = self.acquire_topic_lock_using_get_with_http_info(domain, **kwargs)  # noqa: E501
            return data

    def acquire_topic_lock_using_get_with_http_info(self, domain, **kwargs):  # noqa: E501
        """acquireTopicLock  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.acquire_topic_lock_using_get_with_http_info(domain, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain: Domain (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method acquire_topic_lock_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain' is set
        if ('domain' not in params or
                params['domain'] is None):
            raise ValueError("Missing the required parameter `domain` when calling `acquire_topic_lock_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'domain' in params:
            header_params['Domain'] = params['domain']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/cms/lock/acquire/topic/navigation', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def release_and_acquire_card_lock_using_get(self, article_id, domain, **kwargs):  # noqa: E501
        """releaseAndAcquireCardLock  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.release_and_acquire_card_lock_using_get(article_id, domain, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int article_id: articleId (required)
        :param str domain: Domain (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.release_and_acquire_card_lock_using_get_with_http_info(article_id, domain, **kwargs)  # noqa: E501
        else:
            (data) = self.release_and_acquire_card_lock_using_get_with_http_info(article_id, domain, **kwargs)  # noqa: E501
            return data

    def release_and_acquire_card_lock_using_get_with_http_info(self, article_id, domain, **kwargs):  # noqa: E501
        """releaseAndAcquireCardLock  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.release_and_acquire_card_lock_using_get_with_http_info(article_id, domain, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int article_id: articleId (required)
        :param str domain: Domain (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article_id', 'domain']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method release_and_acquire_card_lock_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article_id' is set
        if ('article_id' not in params or
                params['article_id'] is None):
            raise ValueError("Missing the required parameter `article_id` when calling `release_and_acquire_card_lock_using_get`")  # noqa: E501
        # verify the required parameter 'domain' is set
        if ('domain' not in params or
                params['domain'] is None):
            raise ValueError("Missing the required parameter `domain` when calling `release_and_acquire_card_lock_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'article_id' in params:
            query_params.append(('articleId', params['article_id']))  # noqa: E501

        header_params = {}
        if 'domain' in params:
            header_params['Domain'] = params['domain']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/cms/unlock/article', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def release_and_acquire_footer_lock_using_get(self, domain, **kwargs):  # noqa: E501
        """releaseAndAcquireFooterLock  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.release_and_acquire_footer_lock_using_get(domain, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain: Domain (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.release_and_acquire_footer_lock_using_get_with_http_info(domain, **kwargs)  # noqa: E501
        else:
            (data) = self.release_and_acquire_footer_lock_using_get_with_http_info(domain, **kwargs)  # noqa: E501
            return data

    def release_and_acquire_footer_lock_using_get_with_http_info(self, domain, **kwargs):  # noqa: E501
        """releaseAndAcquireFooterLock  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.release_and_acquire_footer_lock_using_get_with_http_info(domain, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain: Domain (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method release_and_acquire_footer_lock_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain' is set
        if ('domain' not in params or
                params['domain'] is None):
            raise ValueError("Missing the required parameter `domain` when calling `release_and_acquire_footer_lock_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'domain' in params:
            header_params['Domain'] = params['domain']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/cms/unlock/footer/navigation', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def release_and_acquire_level_lock_using_get(self, domain, nav_type, **kwargs):  # noqa: E501
        """releaseAndAcquireLevelLock  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.release_and_acquire_level_lock_using_get(domain, nav_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain: Domain (required)
        :param str nav_type: navType (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.release_and_acquire_level_lock_using_get_with_http_info(domain, nav_type, **kwargs)  # noqa: E501
        else:
            (data) = self.release_and_acquire_level_lock_using_get_with_http_info(domain, nav_type, **kwargs)  # noqa: E501
            return data

    def release_and_acquire_level_lock_using_get_with_http_info(self, domain, nav_type, **kwargs):  # noqa: E501
        """releaseAndAcquireLevelLock  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.release_and_acquire_level_lock_using_get_with_http_info(domain, nav_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain: Domain (required)
        :param str nav_type: navType (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain', 'nav_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method release_and_acquire_level_lock_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain' is set
        if ('domain' not in params or
                params['domain'] is None):
            raise ValueError("Missing the required parameter `domain` when calling `release_and_acquire_level_lock_using_get`")  # noqa: E501
        # verify the required parameter 'nav_type' is set
        if ('nav_type' not in params or
                params['nav_type'] is None):
            raise ValueError("Missing the required parameter `nav_type` when calling `release_and_acquire_level_lock_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'nav_type' in params:
            query_params.append(('navType', params['nav_type']))  # noqa: E501

        header_params = {}
        if 'domain' in params:
            header_params['Domain'] = params['domain']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/cms/unlock/level/navigation', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def release_and_acquire_page_lock_using_get(self, page_id, domain, **kwargs):  # noqa: E501
        """releaseAndAcquirePageLock  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.release_and_acquire_page_lock_using_get(page_id, domain, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page_id: pageId (required)
        :param str domain: Domain (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.release_and_acquire_page_lock_using_get_with_http_info(page_id, domain, **kwargs)  # noqa: E501
        else:
            (data) = self.release_and_acquire_page_lock_using_get_with_http_info(page_id, domain, **kwargs)  # noqa: E501
            return data

    def release_and_acquire_page_lock_using_get_with_http_info(self, page_id, domain, **kwargs):  # noqa: E501
        """releaseAndAcquirePageLock  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.release_and_acquire_page_lock_using_get_with_http_info(page_id, domain, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page_id: pageId (required)
        :param str domain: Domain (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page_id', 'domain']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method release_and_acquire_page_lock_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'page_id' is set
        if ('page_id' not in params or
                params['page_id'] is None):
            raise ValueError("Missing the required parameter `page_id` when calling `release_and_acquire_page_lock_using_get`")  # noqa: E501
        # verify the required parameter 'domain' is set
        if ('domain' not in params or
                params['domain'] is None):
            raise ValueError("Missing the required parameter `domain` when calling `release_and_acquire_page_lock_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page_id' in params:
            query_params.append(('pageId', params['page_id']))  # noqa: E501

        header_params = {}
        if 'domain' in params:
            header_params['Domain'] = params['domain']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/cms/unlock/page', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def release_and_acquire_section_lock_using_get(self, domain, **kwargs):  # noqa: E501
        """releaseAndAcquireSectionLock  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.release_and_acquire_section_lock_using_get(domain, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain: Domain (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.release_and_acquire_section_lock_using_get_with_http_info(domain, **kwargs)  # noqa: E501
        else:
            (data) = self.release_and_acquire_section_lock_using_get_with_http_info(domain, **kwargs)  # noqa: E501
            return data

    def release_and_acquire_section_lock_using_get_with_http_info(self, domain, **kwargs):  # noqa: E501
        """releaseAndAcquireSectionLock  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.release_and_acquire_section_lock_using_get_with_http_info(domain, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain: Domain (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method release_and_acquire_section_lock_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain' is set
        if ('domain' not in params or
                params['domain'] is None):
            raise ValueError("Missing the required parameter `domain` when calling `release_and_acquire_section_lock_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'domain' in params:
            header_params['Domain'] = params['domain']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/cms/unlock/section/navigation', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def release_and_acquire_topic_lock_using_get(self, domain, **kwargs):  # noqa: E501
        """releaseAndAcquireTopicLock  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.release_and_acquire_topic_lock_using_get(domain, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain: Domain (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.release_and_acquire_topic_lock_using_get_with_http_info(domain, **kwargs)  # noqa: E501
        else:
            (data) = self.release_and_acquire_topic_lock_using_get_with_http_info(domain, **kwargs)  # noqa: E501
            return data

    def release_and_acquire_topic_lock_using_get_with_http_info(self, domain, **kwargs):  # noqa: E501
        """releaseAndAcquireTopicLock  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.release_and_acquire_topic_lock_using_get_with_http_info(domain, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain: Domain (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method release_and_acquire_topic_lock_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain' is set
        if ('domain' not in params or
                params['domain'] is None):
            raise ValueError("Missing the required parameter `domain` when calling `release_and_acquire_topic_lock_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'domain' in params:
            header_params['Domain'] = params['domain']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/cms/unlock/topic/navigation', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def release_card_lock_using_get(self, article_id, domain, **kwargs):  # noqa: E501
        """releaseCardLock  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.release_card_lock_using_get(article_id, domain, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int article_id: articleId (required)
        :param str domain: Domain (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.release_card_lock_using_get_with_http_info(article_id, domain, **kwargs)  # noqa: E501
        else:
            (data) = self.release_card_lock_using_get_with_http_info(article_id, domain, **kwargs)  # noqa: E501
            return data

    def release_card_lock_using_get_with_http_info(self, article_id, domain, **kwargs):  # noqa: E501
        """releaseCardLock  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.release_card_lock_using_get_with_http_info(article_id, domain, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int article_id: articleId (required)
        :param str domain: Domain (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article_id', 'domain']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method release_card_lock_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article_id' is set
        if ('article_id' not in params or
                params['article_id'] is None):
            raise ValueError("Missing the required parameter `article_id` when calling `release_card_lock_using_get`")  # noqa: E501
        # verify the required parameter 'domain' is set
        if ('domain' not in params or
                params['domain'] is None):
            raise ValueError("Missing the required parameter `domain` when calling `release_card_lock_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'article_id' in params:
            query_params.append(('articleId', params['article_id']))  # noqa: E501

        header_params = {}
        if 'domain' in params:
            header_params['Domain'] = params['domain']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/cms/lock/release/article', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def release_footer_lock_using_get(self, domain, **kwargs):  # noqa: E501
        """releaseFooterLock  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.release_footer_lock_using_get(domain, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain: Domain (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.release_footer_lock_using_get_with_http_info(domain, **kwargs)  # noqa: E501
        else:
            (data) = self.release_footer_lock_using_get_with_http_info(domain, **kwargs)  # noqa: E501
            return data

    def release_footer_lock_using_get_with_http_info(self, domain, **kwargs):  # noqa: E501
        """releaseFooterLock  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.release_footer_lock_using_get_with_http_info(domain, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain: Domain (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method release_footer_lock_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain' is set
        if ('domain' not in params or
                params['domain'] is None):
            raise ValueError("Missing the required parameter `domain` when calling `release_footer_lock_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'domain' in params:
            header_params['Domain'] = params['domain']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/cms/lock/release/footer/navigation', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def release_level_lock_using_get(self, domain, nav_type, **kwargs):  # noqa: E501
        """releaseLevelLock  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.release_level_lock_using_get(domain, nav_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain: Domain (required)
        :param str nav_type: navType (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.release_level_lock_using_get_with_http_info(domain, nav_type, **kwargs)  # noqa: E501
        else:
            (data) = self.release_level_lock_using_get_with_http_info(domain, nav_type, **kwargs)  # noqa: E501
            return data

    def release_level_lock_using_get_with_http_info(self, domain, nav_type, **kwargs):  # noqa: E501
        """releaseLevelLock  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.release_level_lock_using_get_with_http_info(domain, nav_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain: Domain (required)
        :param str nav_type: navType (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain', 'nav_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method release_level_lock_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain' is set
        if ('domain' not in params or
                params['domain'] is None):
            raise ValueError("Missing the required parameter `domain` when calling `release_level_lock_using_get`")  # noqa: E501
        # verify the required parameter 'nav_type' is set
        if ('nav_type' not in params or
                params['nav_type'] is None):
            raise ValueError("Missing the required parameter `nav_type` when calling `release_level_lock_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'nav_type' in params:
            query_params.append(('navType', params['nav_type']))  # noqa: E501

        header_params = {}
        if 'domain' in params:
            header_params['Domain'] = params['domain']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/cms/lock/release/level/navigation', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def release_page_lock_using_get(self, page_id, domain, **kwargs):  # noqa: E501
        """releasePageLock  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.release_page_lock_using_get(page_id, domain, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page_id: pageId (required)
        :param str domain: Domain (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.release_page_lock_using_get_with_http_info(page_id, domain, **kwargs)  # noqa: E501
        else:
            (data) = self.release_page_lock_using_get_with_http_info(page_id, domain, **kwargs)  # noqa: E501
            return data

    def release_page_lock_using_get_with_http_info(self, page_id, domain, **kwargs):  # noqa: E501
        """releasePageLock  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.release_page_lock_using_get_with_http_info(page_id, domain, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page_id: pageId (required)
        :param str domain: Domain (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page_id', 'domain']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method release_page_lock_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'page_id' is set
        if ('page_id' not in params or
                params['page_id'] is None):
            raise ValueError("Missing the required parameter `page_id` when calling `release_page_lock_using_get`")  # noqa: E501
        # verify the required parameter 'domain' is set
        if ('domain' not in params or
                params['domain'] is None):
            raise ValueError("Missing the required parameter `domain` when calling `release_page_lock_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page_id' in params:
            query_params.append(('pageId', params['page_id']))  # noqa: E501

        header_params = {}
        if 'domain' in params:
            header_params['Domain'] = params['domain']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/cms/lock/release/page', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def release_section_lock_using_get(self, domain, **kwargs):  # noqa: E501
        """releaseSectionLock  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.release_section_lock_using_get(domain, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain: Domain (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.release_section_lock_using_get_with_http_info(domain, **kwargs)  # noqa: E501
        else:
            (data) = self.release_section_lock_using_get_with_http_info(domain, **kwargs)  # noqa: E501
            return data

    def release_section_lock_using_get_with_http_info(self, domain, **kwargs):  # noqa: E501
        """releaseSectionLock  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.release_section_lock_using_get_with_http_info(domain, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain: Domain (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method release_section_lock_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain' is set
        if ('domain' not in params or
                params['domain'] is None):
            raise ValueError("Missing the required parameter `domain` when calling `release_section_lock_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'domain' in params:
            header_params['Domain'] = params['domain']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/cms/lock/release/section/navigation', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def release_topic_lock_using_get(self, domain, **kwargs):  # noqa: E501
        """releaseTopicLock  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.release_topic_lock_using_get(domain, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain: Domain (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.release_topic_lock_using_get_with_http_info(domain, **kwargs)  # noqa: E501
        else:
            (data) = self.release_topic_lock_using_get_with_http_info(domain, **kwargs)  # noqa: E501
            return data

    def release_topic_lock_using_get_with_http_info(self, domain, **kwargs):  # noqa: E501
        """releaseTopicLock  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.release_topic_lock_using_get_with_http_info(domain, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain: Domain (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method release_topic_lock_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain' is set
        if ('domain' not in params or
                params['domain'] is None):
            raise ValueError("Missing the required parameter `domain` when calling `release_topic_lock_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'domain' in params:
            header_params['Domain'] = params['domain']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/cms/lock/release/topic/navigation', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

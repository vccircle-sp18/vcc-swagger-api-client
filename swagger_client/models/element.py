# coding: utf-8

"""
    CMS-Backend API

    This is API documentation of CMS-Backend  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: htdevteam@hindustantimes.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Element(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'alt_text': 'str',
        'amazon_ads': 'list[DynamicConfiguration]',
        'amazon_meta': 'bool',
        'article_type': 'str',
        'auto_published': 'bool',
        'banner': 'list[DynamicConfigurationBanner]',
        'changes_published': 'bool',
        'chart': 'Chart',
        'collection_pages': 'list[int]',
        'collection_stories': 'list[int]',
        'collection_stories_version': 'int',
        'company_chart_added': 'bool',
        'created_by': 'str',
        'created_date': 'str',
        'credit_info': 'str',
        'crosstenant_photo_gallery': 'bool',
        'domain_id': 'str',
        'embargo_at': 'int',
        'embargo_by': 'str',
        'embargo_date': 'str',
        'embed': 'Embed',
        'expire_at': 'int',
        'expiry_date': 'str',
        'faq_section_heading': 'str',
        'faqs': 'list[DynamicConfiguration]',
        'first_published_date': 'str',
        'has_logo_image': 'bool',
        'has_slide_image': 'bool',
        'has_slide_video': 'bool',
        'heading': 'str',
        'id': 'int',
        'image': 'Image',
        'image_amp_validated': 'bool',
        'indice': 'Market',
        'indices_new': 'Market',
        'is_deleted': 'int',
        'isrelated_video_added': 'bool',
        'json_source_url': 'str',
        'keywords': 'list[str]',
        'last_modified_by': 'str',
        'last_modified_by_user_name': 'str',
        'last_modified_date': 'str',
        'last_published_by': 'str',
        'last_published_by_user_name': 'str',
        'last_published_date': 'str',
        'last_request_id': 'str',
        'listicle': 'Listicle',
        'live_blog': 'LiveBlog',
        'locked_by_user_id': 'str',
        'locked_by_user_name': 'str',
        'locked_date': 'str',
        'logo_position': 'str',
        'logo_url': 'str',
        'lshape_band': 'bool',
        'match': 'Cricket',
        'meta_description': 'str',
        'meta_title': 'str',
        'metadata': 'Metadata',
        'migration_info_web_url': 'str',
        'migration_info_web_url_migrated': 'bool',
        'migration_info_web_url_published': 'bool',
        'name': 'str',
        'old_uuid': 'str',
        'paragraph': 'Paragraph',
        'parent_element_id': 'int',
        'pinned_articles_list': 'list[PinnedArticle]',
        'podcast': 'PodcastElement',
        'product': 'Product',
        'read_by_users': 'list[str]',
        'recipe': 'Recipe',
        'related_stories': 'list[int]',
        'related_stories_how_to': 'list[int]',
        'related_video_element_ids': 'list[int]',
        'reusable': 'bool',
        'review': 'Review',
        'scheduled_at': 'int',
        'scheduled_by': 'str',
        'scheduled_date': 'str',
        'social': 'dict(str, bool)',
        'social_counter': 'dict(str, int)',
        'social_list': 'dict(str, list[str])',
        'soft_published': 'bool',
        'steps': 'list[HowToStep]',
        'sub_type': 'str',
        'suggest': 'Completion',
        'supplies': 'list[str]',
        'tag_type_app': 'str',
        'time_to_complete': 'int',
        'time_to_completein_hrs': 'int',
        'timestamp': 'str',
        'title': 'str',
        'title_wo_sp_char': 'str',
        'tools': 'list[str]',
        'topic_migrated': 'bool',
        'topic_published': 'bool',
        'trending': 'list[DynamicConfiguration]',
        'type': 'str',
        'updating_homepage_flag': 'bool',
        'video': 'Video',
        'web_engage_scheduled_at': 'int',
        'web_engage_scheduled_date': 'str',
        'web_id': 'str',
        'web_story_slide': 'list[WebStoriesTextboxOrButton]',
        'webengage_notification_title': 'str',
        'wire_feed_id': 'str'
    }

    attribute_map = {
        'alt_text': 'altText',
        'amazon_ads': 'amazonAds',
        'amazon_meta': 'amazonMeta',
        'article_type': 'articleType',
        'auto_published': 'autoPublished',
        'banner': 'banner',
        'changes_published': 'changesPublished',
        'chart': 'chart',
        'collection_pages': 'collectionPages',
        'collection_stories': 'collectionStories',
        'collection_stories_version': 'collectionStoriesVersion',
        'company_chart_added': 'companyChartAdded',
        'created_by': 'createdBy',
        'created_date': 'createdDate',
        'credit_info': 'creditInfo',
        'crosstenant_photo_gallery': 'crosstenantPhotoGallery',
        'domain_id': 'domainId',
        'embargo_at': 'embargoAt',
        'embargo_by': 'embargoBy',
        'embargo_date': 'embargoDate',
        'embed': 'embed',
        'expire_at': 'expireAt',
        'expiry_date': 'expiryDate',
        'faq_section_heading': 'faqSectionHeading',
        'faqs': 'faqs',
        'first_published_date': 'firstPublishedDate',
        'has_logo_image': 'hasLogoImage',
        'has_slide_image': 'hasSlideImage',
        'has_slide_video': 'hasSlideVideo',
        'heading': 'heading',
        'id': 'id',
        'image': 'image',
        'image_amp_validated': 'imageAmpValidated',
        'indice': 'indice',
        'indices_new': 'indicesNew',
        'is_deleted': 'isDeleted',
        'isrelated_video_added': 'isrelatedVideoAdded',
        'json_source_url': 'jsonSourceUrl',
        'keywords': 'keywords',
        'last_modified_by': 'lastModifiedBy',
        'last_modified_by_user_name': 'lastModifiedByUserName',
        'last_modified_date': 'lastModifiedDate',
        'last_published_by': 'lastPublishedBy',
        'last_published_by_user_name': 'lastPublishedByUserName',
        'last_published_date': 'lastPublishedDate',
        'last_request_id': 'lastRequestId',
        'listicle': 'listicle',
        'live_blog': 'liveBlog',
        'locked_by_user_id': 'lockedByUserId',
        'locked_by_user_name': 'lockedByUserName',
        'locked_date': 'lockedDate',
        'logo_position': 'logoPosition',
        'logo_url': 'logoUrl',
        'lshape_band': 'lshapeBand',
        'match': 'match',
        'meta_description': 'metaDescription',
        'meta_title': 'metaTitle',
        'metadata': 'metadata',
        'migration_info_web_url': 'migrationInfoWebUrl',
        'migration_info_web_url_migrated': 'migrationInfoWebUrlMigrated',
        'migration_info_web_url_published': 'migrationInfoWebUrlPublished',
        'name': 'name',
        'old_uuid': 'oldUuid',
        'paragraph': 'paragraph',
        'parent_element_id': 'parentElementId',
        'pinned_articles_list': 'pinnedArticlesList',
        'podcast': 'podcast',
        'product': 'product',
        'read_by_users': 'readByUsers',
        'recipe': 'recipe',
        'related_stories': 'relatedStories',
        'related_stories_how_to': 'relatedStoriesHowTo',
        'related_video_element_ids': 'relatedVideoElementIds',
        'reusable': 'reusable',
        'review': 'review',
        'scheduled_at': 'scheduledAt',
        'scheduled_by': 'scheduledBy',
        'scheduled_date': 'scheduledDate',
        'social': 'social',
        'social_counter': 'socialCounter',
        'social_list': 'socialList',
        'soft_published': 'softPublished',
        'steps': 'steps',
        'sub_type': 'subType',
        'suggest': 'suggest',
        'supplies': 'supplies',
        'tag_type_app': 'tagTypeApp',
        'time_to_complete': 'timeToComplete',
        'time_to_completein_hrs': 'timeToCompleteinHrs',
        'timestamp': 'timestamp',
        'title': 'title',
        'title_wo_sp_char': 'titleWoSpChar',
        'tools': 'tools',
        'topic_migrated': 'topicMigrated',
        'topic_published': 'topicPublished',
        'trending': 'trending',
        'type': 'type',
        'updating_homepage_flag': 'updatingHomepageFlag',
        'video': 'video',
        'web_engage_scheduled_at': 'webEngageScheduledAt',
        'web_engage_scheduled_date': 'webEngageScheduledDate',
        'web_id': 'webId',
        'web_story_slide': 'webStorySlide',
        'webengage_notification_title': 'webengageNotificationTitle',
        'wire_feed_id': 'wireFeedId'
    }

    def __init__(self, alt_text=None, amazon_ads=None, amazon_meta=None, article_type=None, auto_published=None, banner=None, changes_published=None, chart=None, collection_pages=None, collection_stories=None, collection_stories_version=None, company_chart_added=None, created_by=None, created_date=None, credit_info=None, crosstenant_photo_gallery=None, domain_id=None, embargo_at=None, embargo_by=None, embargo_date=None, embed=None, expire_at=None, expiry_date=None, faq_section_heading=None, faqs=None, first_published_date=None, has_logo_image=None, has_slide_image=None, has_slide_video=None, heading=None, id=None, image=None, image_amp_validated=None, indice=None, indices_new=None, is_deleted=None, isrelated_video_added=None, json_source_url=None, keywords=None, last_modified_by=None, last_modified_by_user_name=None, last_modified_date=None, last_published_by=None, last_published_by_user_name=None, last_published_date=None, last_request_id=None, listicle=None, live_blog=None, locked_by_user_id=None, locked_by_user_name=None, locked_date=None, logo_position=None, logo_url=None, lshape_band=None, match=None, meta_description=None, meta_title=None, metadata=None, migration_info_web_url=None, migration_info_web_url_migrated=None, migration_info_web_url_published=None, name=None, old_uuid=None, paragraph=None, parent_element_id=None, pinned_articles_list=None, podcast=None, product=None, read_by_users=None, recipe=None, related_stories=None, related_stories_how_to=None, related_video_element_ids=None, reusable=None, review=None, scheduled_at=None, scheduled_by=None, scheduled_date=None, social=None, social_counter=None, social_list=None, soft_published=None, steps=None, sub_type=None, suggest=None, supplies=None, tag_type_app=None, time_to_complete=None, time_to_completein_hrs=None, timestamp=None, title=None, title_wo_sp_char=None, tools=None, topic_migrated=None, topic_published=None, trending=None, type=None, updating_homepage_flag=None, video=None, web_engage_scheduled_at=None, web_engage_scheduled_date=None, web_id=None, web_story_slide=None, webengage_notification_title=None, wire_feed_id=None):  # noqa: E501
        """Element - a model defined in Swagger"""  # noqa: E501
        self._alt_text = None
        self._amazon_ads = None
        self._amazon_meta = None
        self._article_type = None
        self._auto_published = None
        self._banner = None
        self._changes_published = None
        self._chart = None
        self._collection_pages = None
        self._collection_stories = None
        self._collection_stories_version = None
        self._company_chart_added = None
        self._created_by = None
        self._created_date = None
        self._credit_info = None
        self._crosstenant_photo_gallery = None
        self._domain_id = None
        self._embargo_at = None
        self._embargo_by = None
        self._embargo_date = None
        self._embed = None
        self._expire_at = None
        self._expiry_date = None
        self._faq_section_heading = None
        self._faqs = None
        self._first_published_date = None
        self._has_logo_image = None
        self._has_slide_image = None
        self._has_slide_video = None
        self._heading = None
        self._id = None
        self._image = None
        self._image_amp_validated = None
        self._indice = None
        self._indices_new = None
        self._is_deleted = None
        self._isrelated_video_added = None
        self._json_source_url = None
        self._keywords = None
        self._last_modified_by = None
        self._last_modified_by_user_name = None
        self._last_modified_date = None
        self._last_published_by = None
        self._last_published_by_user_name = None
        self._last_published_date = None
        self._last_request_id = None
        self._listicle = None
        self._live_blog = None
        self._locked_by_user_id = None
        self._locked_by_user_name = None
        self._locked_date = None
        self._logo_position = None
        self._logo_url = None
        self._lshape_band = None
        self._match = None
        self._meta_description = None
        self._meta_title = None
        self._metadata = None
        self._migration_info_web_url = None
        self._migration_info_web_url_migrated = None
        self._migration_info_web_url_published = None
        self._name = None
        self._old_uuid = None
        self._paragraph = None
        self._parent_element_id = None
        self._pinned_articles_list = None
        self._podcast = None
        self._product = None
        self._read_by_users = None
        self._recipe = None
        self._related_stories = None
        self._related_stories_how_to = None
        self._related_video_element_ids = None
        self._reusable = None
        self._review = None
        self._scheduled_at = None
        self._scheduled_by = None
        self._scheduled_date = None
        self._social = None
        self._social_counter = None
        self._social_list = None
        self._soft_published = None
        self._steps = None
        self._sub_type = None
        self._suggest = None
        self._supplies = None
        self._tag_type_app = None
        self._time_to_complete = None
        self._time_to_completein_hrs = None
        self._timestamp = None
        self._title = None
        self._title_wo_sp_char = None
        self._tools = None
        self._topic_migrated = None
        self._topic_published = None
        self._trending = None
        self._type = None
        self._updating_homepage_flag = None
        self._video = None
        self._web_engage_scheduled_at = None
        self._web_engage_scheduled_date = None
        self._web_id = None
        self._web_story_slide = None
        self._webengage_notification_title = None
        self._wire_feed_id = None
        self.discriminator = None
        if alt_text is not None:
            self.alt_text = alt_text
        if amazon_ads is not None:
            self.amazon_ads = amazon_ads
        if amazon_meta is not None:
            self.amazon_meta = amazon_meta
        if article_type is not None:
            self.article_type = article_type
        if auto_published is not None:
            self.auto_published = auto_published
        if banner is not None:
            self.banner = banner
        if changes_published is not None:
            self.changes_published = changes_published
        if chart is not None:
            self.chart = chart
        if collection_pages is not None:
            self.collection_pages = collection_pages
        if collection_stories is not None:
            self.collection_stories = collection_stories
        if collection_stories_version is not None:
            self.collection_stories_version = collection_stories_version
        if company_chart_added is not None:
            self.company_chart_added = company_chart_added
        if created_by is not None:
            self.created_by = created_by
        if created_date is not None:
            self.created_date = created_date
        if credit_info is not None:
            self.credit_info = credit_info
        if crosstenant_photo_gallery is not None:
            self.crosstenant_photo_gallery = crosstenant_photo_gallery
        if domain_id is not None:
            self.domain_id = domain_id
        if embargo_at is not None:
            self.embargo_at = embargo_at
        if embargo_by is not None:
            self.embargo_by = embargo_by
        if embargo_date is not None:
            self.embargo_date = embargo_date
        if embed is not None:
            self.embed = embed
        if expire_at is not None:
            self.expire_at = expire_at
        if expiry_date is not None:
            self.expiry_date = expiry_date
        if faq_section_heading is not None:
            self.faq_section_heading = faq_section_heading
        if faqs is not None:
            self.faqs = faqs
        if first_published_date is not None:
            self.first_published_date = first_published_date
        if has_logo_image is not None:
            self.has_logo_image = has_logo_image
        if has_slide_image is not None:
            self.has_slide_image = has_slide_image
        if has_slide_video is not None:
            self.has_slide_video = has_slide_video
        if heading is not None:
            self.heading = heading
        if id is not None:
            self.id = id
        if image is not None:
            self.image = image
        if image_amp_validated is not None:
            self.image_amp_validated = image_amp_validated
        if indice is not None:
            self.indice = indice
        if indices_new is not None:
            self.indices_new = indices_new
        if is_deleted is not None:
            self.is_deleted = is_deleted
        if isrelated_video_added is not None:
            self.isrelated_video_added = isrelated_video_added
        if json_source_url is not None:
            self.json_source_url = json_source_url
        if keywords is not None:
            self.keywords = keywords
        if last_modified_by is not None:
            self.last_modified_by = last_modified_by
        if last_modified_by_user_name is not None:
            self.last_modified_by_user_name = last_modified_by_user_name
        if last_modified_date is not None:
            self.last_modified_date = last_modified_date
        if last_published_by is not None:
            self.last_published_by = last_published_by
        if last_published_by_user_name is not None:
            self.last_published_by_user_name = last_published_by_user_name
        if last_published_date is not None:
            self.last_published_date = last_published_date
        if last_request_id is not None:
            self.last_request_id = last_request_id
        if listicle is not None:
            self.listicle = listicle
        if live_blog is not None:
            self.live_blog = live_blog
        if locked_by_user_id is not None:
            self.locked_by_user_id = locked_by_user_id
        if locked_by_user_name is not None:
            self.locked_by_user_name = locked_by_user_name
        if locked_date is not None:
            self.locked_date = locked_date
        if logo_position is not None:
            self.logo_position = logo_position
        if logo_url is not None:
            self.logo_url = logo_url
        if lshape_band is not None:
            self.lshape_band = lshape_band
        if match is not None:
            self.match = match
        if meta_description is not None:
            self.meta_description = meta_description
        if meta_title is not None:
            self.meta_title = meta_title
        if metadata is not None:
            self.metadata = metadata
        if migration_info_web_url is not None:
            self.migration_info_web_url = migration_info_web_url
        if migration_info_web_url_migrated is not None:
            self.migration_info_web_url_migrated = migration_info_web_url_migrated
        if migration_info_web_url_published is not None:
            self.migration_info_web_url_published = migration_info_web_url_published
        if name is not None:
            self.name = name
        if old_uuid is not None:
            self.old_uuid = old_uuid
        if paragraph is not None:
            self.paragraph = paragraph
        if parent_element_id is not None:
            self.parent_element_id = parent_element_id
        if pinned_articles_list is not None:
            self.pinned_articles_list = pinned_articles_list
        if podcast is not None:
            self.podcast = podcast
        if product is not None:
            self.product = product
        if read_by_users is not None:
            self.read_by_users = read_by_users
        if recipe is not None:
            self.recipe = recipe
        if related_stories is not None:
            self.related_stories = related_stories
        if related_stories_how_to is not None:
            self.related_stories_how_to = related_stories_how_to
        if related_video_element_ids is not None:
            self.related_video_element_ids = related_video_element_ids
        if reusable is not None:
            self.reusable = reusable
        if review is not None:
            self.review = review
        if scheduled_at is not None:
            self.scheduled_at = scheduled_at
        if scheduled_by is not None:
            self.scheduled_by = scheduled_by
        if scheduled_date is not None:
            self.scheduled_date = scheduled_date
        if social is not None:
            self.social = social
        if social_counter is not None:
            self.social_counter = social_counter
        if social_list is not None:
            self.social_list = social_list
        if soft_published is not None:
            self.soft_published = soft_published
        if steps is not None:
            self.steps = steps
        if sub_type is not None:
            self.sub_type = sub_type
        if suggest is not None:
            self.suggest = suggest
        if supplies is not None:
            self.supplies = supplies
        if tag_type_app is not None:
            self.tag_type_app = tag_type_app
        if time_to_complete is not None:
            self.time_to_complete = time_to_complete
        if time_to_completein_hrs is not None:
            self.time_to_completein_hrs = time_to_completein_hrs
        if timestamp is not None:
            self.timestamp = timestamp
        if title is not None:
            self.title = title
        if title_wo_sp_char is not None:
            self.title_wo_sp_char = title_wo_sp_char
        if tools is not None:
            self.tools = tools
        if topic_migrated is not None:
            self.topic_migrated = topic_migrated
        if topic_published is not None:
            self.topic_published = topic_published
        if trending is not None:
            self.trending = trending
        if type is not None:
            self.type = type
        if updating_homepage_flag is not None:
            self.updating_homepage_flag = updating_homepage_flag
        if video is not None:
            self.video = video
        if web_engage_scheduled_at is not None:
            self.web_engage_scheduled_at = web_engage_scheduled_at
        if web_engage_scheduled_date is not None:
            self.web_engage_scheduled_date = web_engage_scheduled_date
        if web_id is not None:
            self.web_id = web_id
        if web_story_slide is not None:
            self.web_story_slide = web_story_slide
        if webengage_notification_title is not None:
            self.webengage_notification_title = webengage_notification_title
        if wire_feed_id is not None:
            self.wire_feed_id = wire_feed_id

    @property
    def alt_text(self):
        """Gets the alt_text of this Element.  # noqa: E501


        :return: The alt_text of this Element.  # noqa: E501
        :rtype: str
        """
        return self._alt_text

    @alt_text.setter
    def alt_text(self, alt_text):
        """Sets the alt_text of this Element.


        :param alt_text: The alt_text of this Element.  # noqa: E501
        :type: str
        """

        self._alt_text = alt_text

    @property
    def amazon_ads(self):
        """Gets the amazon_ads of this Element.  # noqa: E501


        :return: The amazon_ads of this Element.  # noqa: E501
        :rtype: list[DynamicConfiguration]
        """
        return self._amazon_ads

    @amazon_ads.setter
    def amazon_ads(self, amazon_ads):
        """Sets the amazon_ads of this Element.


        :param amazon_ads: The amazon_ads of this Element.  # noqa: E501
        :type: list[DynamicConfiguration]
        """

        self._amazon_ads = amazon_ads

    @property
    def amazon_meta(self):
        """Gets the amazon_meta of this Element.  # noqa: E501


        :return: The amazon_meta of this Element.  # noqa: E501
        :rtype: bool
        """
        return self._amazon_meta

    @amazon_meta.setter
    def amazon_meta(self, amazon_meta):
        """Sets the amazon_meta of this Element.


        :param amazon_meta: The amazon_meta of this Element.  # noqa: E501
        :type: bool
        """

        self._amazon_meta = amazon_meta

    @property
    def article_type(self):
        """Gets the article_type of this Element.  # noqa: E501


        :return: The article_type of this Element.  # noqa: E501
        :rtype: str
        """
        return self._article_type

    @article_type.setter
    def article_type(self, article_type):
        """Sets the article_type of this Element.


        :param article_type: The article_type of this Element.  # noqa: E501
        :type: str
        """

        self._article_type = article_type

    @property
    def auto_published(self):
        """Gets the auto_published of this Element.  # noqa: E501


        :return: The auto_published of this Element.  # noqa: E501
        :rtype: bool
        """
        return self._auto_published

    @auto_published.setter
    def auto_published(self, auto_published):
        """Sets the auto_published of this Element.


        :param auto_published: The auto_published of this Element.  # noqa: E501
        :type: bool
        """

        self._auto_published = auto_published

    @property
    def banner(self):
        """Gets the banner of this Element.  # noqa: E501


        :return: The banner of this Element.  # noqa: E501
        :rtype: list[DynamicConfigurationBanner]
        """
        return self._banner

    @banner.setter
    def banner(self, banner):
        """Sets the banner of this Element.


        :param banner: The banner of this Element.  # noqa: E501
        :type: list[DynamicConfigurationBanner]
        """

        self._banner = banner

    @property
    def changes_published(self):
        """Gets the changes_published of this Element.  # noqa: E501


        :return: The changes_published of this Element.  # noqa: E501
        :rtype: bool
        """
        return self._changes_published

    @changes_published.setter
    def changes_published(self, changes_published):
        """Sets the changes_published of this Element.


        :param changes_published: The changes_published of this Element.  # noqa: E501
        :type: bool
        """

        self._changes_published = changes_published

    @property
    def chart(self):
        """Gets the chart of this Element.  # noqa: E501


        :return: The chart of this Element.  # noqa: E501
        :rtype: Chart
        """
        return self._chart

    @chart.setter
    def chart(self, chart):
        """Sets the chart of this Element.


        :param chart: The chart of this Element.  # noqa: E501
        :type: Chart
        """

        self._chart = chart

    @property
    def collection_pages(self):
        """Gets the collection_pages of this Element.  # noqa: E501


        :return: The collection_pages of this Element.  # noqa: E501
        :rtype: list[int]
        """
        return self._collection_pages

    @collection_pages.setter
    def collection_pages(self, collection_pages):
        """Sets the collection_pages of this Element.


        :param collection_pages: The collection_pages of this Element.  # noqa: E501
        :type: list[int]
        """

        self._collection_pages = collection_pages

    @property
    def collection_stories(self):
        """Gets the collection_stories of this Element.  # noqa: E501


        :return: The collection_stories of this Element.  # noqa: E501
        :rtype: list[int]
        """
        return self._collection_stories

    @collection_stories.setter
    def collection_stories(self, collection_stories):
        """Sets the collection_stories of this Element.


        :param collection_stories: The collection_stories of this Element.  # noqa: E501
        :type: list[int]
        """

        self._collection_stories = collection_stories

    @property
    def collection_stories_version(self):
        """Gets the collection_stories_version of this Element.  # noqa: E501


        :return: The collection_stories_version of this Element.  # noqa: E501
        :rtype: int
        """
        return self._collection_stories_version

    @collection_stories_version.setter
    def collection_stories_version(self, collection_stories_version):
        """Sets the collection_stories_version of this Element.


        :param collection_stories_version: The collection_stories_version of this Element.  # noqa: E501
        :type: int
        """

        self._collection_stories_version = collection_stories_version

    @property
    def company_chart_added(self):
        """Gets the company_chart_added of this Element.  # noqa: E501


        :return: The company_chart_added of this Element.  # noqa: E501
        :rtype: bool
        """
        return self._company_chart_added

    @company_chart_added.setter
    def company_chart_added(self, company_chart_added):
        """Sets the company_chart_added of this Element.


        :param company_chart_added: The company_chart_added of this Element.  # noqa: E501
        :type: bool
        """

        self._company_chart_added = company_chart_added

    @property
    def created_by(self):
        """Gets the created_by of this Element.  # noqa: E501


        :return: The created_by of this Element.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Element.


        :param created_by: The created_by of this Element.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def created_date(self):
        """Gets the created_date of this Element.  # noqa: E501


        :return: The created_date of this Element.  # noqa: E501
        :rtype: str
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this Element.


        :param created_date: The created_date of this Element.  # noqa: E501
        :type: str
        """

        self._created_date = created_date

    @property
    def credit_info(self):
        """Gets the credit_info of this Element.  # noqa: E501


        :return: The credit_info of this Element.  # noqa: E501
        :rtype: str
        """
        return self._credit_info

    @credit_info.setter
    def credit_info(self, credit_info):
        """Sets the credit_info of this Element.


        :param credit_info: The credit_info of this Element.  # noqa: E501
        :type: str
        """

        self._credit_info = credit_info

    @property
    def crosstenant_photo_gallery(self):
        """Gets the crosstenant_photo_gallery of this Element.  # noqa: E501


        :return: The crosstenant_photo_gallery of this Element.  # noqa: E501
        :rtype: bool
        """
        return self._crosstenant_photo_gallery

    @crosstenant_photo_gallery.setter
    def crosstenant_photo_gallery(self, crosstenant_photo_gallery):
        """Sets the crosstenant_photo_gallery of this Element.


        :param crosstenant_photo_gallery: The crosstenant_photo_gallery of this Element.  # noqa: E501
        :type: bool
        """

        self._crosstenant_photo_gallery = crosstenant_photo_gallery

    @property
    def domain_id(self):
        """Gets the domain_id of this Element.  # noqa: E501


        :return: The domain_id of this Element.  # noqa: E501
        :rtype: str
        """
        return self._domain_id

    @domain_id.setter
    def domain_id(self, domain_id):
        """Sets the domain_id of this Element.


        :param domain_id: The domain_id of this Element.  # noqa: E501
        :type: str
        """

        self._domain_id = domain_id

    @property
    def embargo_at(self):
        """Gets the embargo_at of this Element.  # noqa: E501


        :return: The embargo_at of this Element.  # noqa: E501
        :rtype: int
        """
        return self._embargo_at

    @embargo_at.setter
    def embargo_at(self, embargo_at):
        """Sets the embargo_at of this Element.


        :param embargo_at: The embargo_at of this Element.  # noqa: E501
        :type: int
        """

        self._embargo_at = embargo_at

    @property
    def embargo_by(self):
        """Gets the embargo_by of this Element.  # noqa: E501


        :return: The embargo_by of this Element.  # noqa: E501
        :rtype: str
        """
        return self._embargo_by

    @embargo_by.setter
    def embargo_by(self, embargo_by):
        """Sets the embargo_by of this Element.


        :param embargo_by: The embargo_by of this Element.  # noqa: E501
        :type: str
        """

        self._embargo_by = embargo_by

    @property
    def embargo_date(self):
        """Gets the embargo_date of this Element.  # noqa: E501


        :return: The embargo_date of this Element.  # noqa: E501
        :rtype: str
        """
        return self._embargo_date

    @embargo_date.setter
    def embargo_date(self, embargo_date):
        """Sets the embargo_date of this Element.


        :param embargo_date: The embargo_date of this Element.  # noqa: E501
        :type: str
        """

        self._embargo_date = embargo_date

    @property
    def embed(self):
        """Gets the embed of this Element.  # noqa: E501


        :return: The embed of this Element.  # noqa: E501
        :rtype: Embed
        """
        return self._embed

    @embed.setter
    def embed(self, embed):
        """Sets the embed of this Element.


        :param embed: The embed of this Element.  # noqa: E501
        :type: Embed
        """

        self._embed = embed

    @property
    def expire_at(self):
        """Gets the expire_at of this Element.  # noqa: E501


        :return: The expire_at of this Element.  # noqa: E501
        :rtype: int
        """
        return self._expire_at

    @expire_at.setter
    def expire_at(self, expire_at):
        """Sets the expire_at of this Element.


        :param expire_at: The expire_at of this Element.  # noqa: E501
        :type: int
        """

        self._expire_at = expire_at

    @property
    def expiry_date(self):
        """Gets the expiry_date of this Element.  # noqa: E501


        :return: The expiry_date of this Element.  # noqa: E501
        :rtype: str
        """
        return self._expiry_date

    @expiry_date.setter
    def expiry_date(self, expiry_date):
        """Sets the expiry_date of this Element.


        :param expiry_date: The expiry_date of this Element.  # noqa: E501
        :type: str
        """

        self._expiry_date = expiry_date

    @property
    def faq_section_heading(self):
        """Gets the faq_section_heading of this Element.  # noqa: E501


        :return: The faq_section_heading of this Element.  # noqa: E501
        :rtype: str
        """
        return self._faq_section_heading

    @faq_section_heading.setter
    def faq_section_heading(self, faq_section_heading):
        """Sets the faq_section_heading of this Element.


        :param faq_section_heading: The faq_section_heading of this Element.  # noqa: E501
        :type: str
        """

        self._faq_section_heading = faq_section_heading

    @property
    def faqs(self):
        """Gets the faqs of this Element.  # noqa: E501


        :return: The faqs of this Element.  # noqa: E501
        :rtype: list[DynamicConfiguration]
        """
        return self._faqs

    @faqs.setter
    def faqs(self, faqs):
        """Sets the faqs of this Element.


        :param faqs: The faqs of this Element.  # noqa: E501
        :type: list[DynamicConfiguration]
        """

        self._faqs = faqs

    @property
    def first_published_date(self):
        """Gets the first_published_date of this Element.  # noqa: E501


        :return: The first_published_date of this Element.  # noqa: E501
        :rtype: str
        """
        return self._first_published_date

    @first_published_date.setter
    def first_published_date(self, first_published_date):
        """Sets the first_published_date of this Element.


        :param first_published_date: The first_published_date of this Element.  # noqa: E501
        :type: str
        """

        self._first_published_date = first_published_date

    @property
    def has_logo_image(self):
        """Gets the has_logo_image of this Element.  # noqa: E501


        :return: The has_logo_image of this Element.  # noqa: E501
        :rtype: bool
        """
        return self._has_logo_image

    @has_logo_image.setter
    def has_logo_image(self, has_logo_image):
        """Sets the has_logo_image of this Element.


        :param has_logo_image: The has_logo_image of this Element.  # noqa: E501
        :type: bool
        """

        self._has_logo_image = has_logo_image

    @property
    def has_slide_image(self):
        """Gets the has_slide_image of this Element.  # noqa: E501


        :return: The has_slide_image of this Element.  # noqa: E501
        :rtype: bool
        """
        return self._has_slide_image

    @has_slide_image.setter
    def has_slide_image(self, has_slide_image):
        """Sets the has_slide_image of this Element.


        :param has_slide_image: The has_slide_image of this Element.  # noqa: E501
        :type: bool
        """

        self._has_slide_image = has_slide_image

    @property
    def has_slide_video(self):
        """Gets the has_slide_video of this Element.  # noqa: E501


        :return: The has_slide_video of this Element.  # noqa: E501
        :rtype: bool
        """
        return self._has_slide_video

    @has_slide_video.setter
    def has_slide_video(self, has_slide_video):
        """Sets the has_slide_video of this Element.


        :param has_slide_video: The has_slide_video of this Element.  # noqa: E501
        :type: bool
        """

        self._has_slide_video = has_slide_video

    @property
    def heading(self):
        """Gets the heading of this Element.  # noqa: E501


        :return: The heading of this Element.  # noqa: E501
        :rtype: str
        """
        return self._heading

    @heading.setter
    def heading(self, heading):
        """Sets the heading of this Element.


        :param heading: The heading of this Element.  # noqa: E501
        :type: str
        """

        self._heading = heading

    @property
    def id(self):
        """Gets the id of this Element.  # noqa: E501


        :return: The id of this Element.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Element.


        :param id: The id of this Element.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def image(self):
        """Gets the image of this Element.  # noqa: E501


        :return: The image of this Element.  # noqa: E501
        :rtype: Image
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this Element.


        :param image: The image of this Element.  # noqa: E501
        :type: Image
        """

        self._image = image

    @property
    def image_amp_validated(self):
        """Gets the image_amp_validated of this Element.  # noqa: E501


        :return: The image_amp_validated of this Element.  # noqa: E501
        :rtype: bool
        """
        return self._image_amp_validated

    @image_amp_validated.setter
    def image_amp_validated(self, image_amp_validated):
        """Sets the image_amp_validated of this Element.


        :param image_amp_validated: The image_amp_validated of this Element.  # noqa: E501
        :type: bool
        """

        self._image_amp_validated = image_amp_validated

    @property
    def indice(self):
        """Gets the indice of this Element.  # noqa: E501


        :return: The indice of this Element.  # noqa: E501
        :rtype: Market
        """
        return self._indice

    @indice.setter
    def indice(self, indice):
        """Sets the indice of this Element.


        :param indice: The indice of this Element.  # noqa: E501
        :type: Market
        """

        self._indice = indice

    @property
    def indices_new(self):
        """Gets the indices_new of this Element.  # noqa: E501


        :return: The indices_new of this Element.  # noqa: E501
        :rtype: Market
        """
        return self._indices_new

    @indices_new.setter
    def indices_new(self, indices_new):
        """Sets the indices_new of this Element.


        :param indices_new: The indices_new of this Element.  # noqa: E501
        :type: Market
        """

        self._indices_new = indices_new

    @property
    def is_deleted(self):
        """Gets the is_deleted of this Element.  # noqa: E501


        :return: The is_deleted of this Element.  # noqa: E501
        :rtype: int
        """
        return self._is_deleted

    @is_deleted.setter
    def is_deleted(self, is_deleted):
        """Sets the is_deleted of this Element.


        :param is_deleted: The is_deleted of this Element.  # noqa: E501
        :type: int
        """

        self._is_deleted = is_deleted

    @property
    def isrelated_video_added(self):
        """Gets the isrelated_video_added of this Element.  # noqa: E501


        :return: The isrelated_video_added of this Element.  # noqa: E501
        :rtype: bool
        """
        return self._isrelated_video_added

    @isrelated_video_added.setter
    def isrelated_video_added(self, isrelated_video_added):
        """Sets the isrelated_video_added of this Element.


        :param isrelated_video_added: The isrelated_video_added of this Element.  # noqa: E501
        :type: bool
        """

        self._isrelated_video_added = isrelated_video_added

    @property
    def json_source_url(self):
        """Gets the json_source_url of this Element.  # noqa: E501


        :return: The json_source_url of this Element.  # noqa: E501
        :rtype: str
        """
        return self._json_source_url

    @json_source_url.setter
    def json_source_url(self, json_source_url):
        """Sets the json_source_url of this Element.


        :param json_source_url: The json_source_url of this Element.  # noqa: E501
        :type: str
        """

        self._json_source_url = json_source_url

    @property
    def keywords(self):
        """Gets the keywords of this Element.  # noqa: E501


        :return: The keywords of this Element.  # noqa: E501
        :rtype: list[str]
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this Element.


        :param keywords: The keywords of this Element.  # noqa: E501
        :type: list[str]
        """

        self._keywords = keywords

    @property
    def last_modified_by(self):
        """Gets the last_modified_by of this Element.  # noqa: E501


        :return: The last_modified_by of this Element.  # noqa: E501
        :rtype: str
        """
        return self._last_modified_by

    @last_modified_by.setter
    def last_modified_by(self, last_modified_by):
        """Sets the last_modified_by of this Element.


        :param last_modified_by: The last_modified_by of this Element.  # noqa: E501
        :type: str
        """

        self._last_modified_by = last_modified_by

    @property
    def last_modified_by_user_name(self):
        """Gets the last_modified_by_user_name of this Element.  # noqa: E501


        :return: The last_modified_by_user_name of this Element.  # noqa: E501
        :rtype: str
        """
        return self._last_modified_by_user_name

    @last_modified_by_user_name.setter
    def last_modified_by_user_name(self, last_modified_by_user_name):
        """Sets the last_modified_by_user_name of this Element.


        :param last_modified_by_user_name: The last_modified_by_user_name of this Element.  # noqa: E501
        :type: str
        """

        self._last_modified_by_user_name = last_modified_by_user_name

    @property
    def last_modified_date(self):
        """Gets the last_modified_date of this Element.  # noqa: E501


        :return: The last_modified_date of this Element.  # noqa: E501
        :rtype: str
        """
        return self._last_modified_date

    @last_modified_date.setter
    def last_modified_date(self, last_modified_date):
        """Sets the last_modified_date of this Element.


        :param last_modified_date: The last_modified_date of this Element.  # noqa: E501
        :type: str
        """

        self._last_modified_date = last_modified_date

    @property
    def last_published_by(self):
        """Gets the last_published_by of this Element.  # noqa: E501


        :return: The last_published_by of this Element.  # noqa: E501
        :rtype: str
        """
        return self._last_published_by

    @last_published_by.setter
    def last_published_by(self, last_published_by):
        """Sets the last_published_by of this Element.


        :param last_published_by: The last_published_by of this Element.  # noqa: E501
        :type: str
        """

        self._last_published_by = last_published_by

    @property
    def last_published_by_user_name(self):
        """Gets the last_published_by_user_name of this Element.  # noqa: E501


        :return: The last_published_by_user_name of this Element.  # noqa: E501
        :rtype: str
        """
        return self._last_published_by_user_name

    @last_published_by_user_name.setter
    def last_published_by_user_name(self, last_published_by_user_name):
        """Sets the last_published_by_user_name of this Element.


        :param last_published_by_user_name: The last_published_by_user_name of this Element.  # noqa: E501
        :type: str
        """

        self._last_published_by_user_name = last_published_by_user_name

    @property
    def last_published_date(self):
        """Gets the last_published_date of this Element.  # noqa: E501


        :return: The last_published_date of this Element.  # noqa: E501
        :rtype: str
        """
        return self._last_published_date

    @last_published_date.setter
    def last_published_date(self, last_published_date):
        """Sets the last_published_date of this Element.


        :param last_published_date: The last_published_date of this Element.  # noqa: E501
        :type: str
        """

        self._last_published_date = last_published_date

    @property
    def last_request_id(self):
        """Gets the last_request_id of this Element.  # noqa: E501


        :return: The last_request_id of this Element.  # noqa: E501
        :rtype: str
        """
        return self._last_request_id

    @last_request_id.setter
    def last_request_id(self, last_request_id):
        """Sets the last_request_id of this Element.


        :param last_request_id: The last_request_id of this Element.  # noqa: E501
        :type: str
        """

        self._last_request_id = last_request_id

    @property
    def listicle(self):
        """Gets the listicle of this Element.  # noqa: E501


        :return: The listicle of this Element.  # noqa: E501
        :rtype: Listicle
        """
        return self._listicle

    @listicle.setter
    def listicle(self, listicle):
        """Sets the listicle of this Element.


        :param listicle: The listicle of this Element.  # noqa: E501
        :type: Listicle
        """

        self._listicle = listicle

    @property
    def live_blog(self):
        """Gets the live_blog of this Element.  # noqa: E501


        :return: The live_blog of this Element.  # noqa: E501
        :rtype: LiveBlog
        """
        return self._live_blog

    @live_blog.setter
    def live_blog(self, live_blog):
        """Sets the live_blog of this Element.


        :param live_blog: The live_blog of this Element.  # noqa: E501
        :type: LiveBlog
        """

        self._live_blog = live_blog

    @property
    def locked_by_user_id(self):
        """Gets the locked_by_user_id of this Element.  # noqa: E501


        :return: The locked_by_user_id of this Element.  # noqa: E501
        :rtype: str
        """
        return self._locked_by_user_id

    @locked_by_user_id.setter
    def locked_by_user_id(self, locked_by_user_id):
        """Sets the locked_by_user_id of this Element.


        :param locked_by_user_id: The locked_by_user_id of this Element.  # noqa: E501
        :type: str
        """

        self._locked_by_user_id = locked_by_user_id

    @property
    def locked_by_user_name(self):
        """Gets the locked_by_user_name of this Element.  # noqa: E501


        :return: The locked_by_user_name of this Element.  # noqa: E501
        :rtype: str
        """
        return self._locked_by_user_name

    @locked_by_user_name.setter
    def locked_by_user_name(self, locked_by_user_name):
        """Sets the locked_by_user_name of this Element.


        :param locked_by_user_name: The locked_by_user_name of this Element.  # noqa: E501
        :type: str
        """

        self._locked_by_user_name = locked_by_user_name

    @property
    def locked_date(self):
        """Gets the locked_date of this Element.  # noqa: E501


        :return: The locked_date of this Element.  # noqa: E501
        :rtype: str
        """
        return self._locked_date

    @locked_date.setter
    def locked_date(self, locked_date):
        """Sets the locked_date of this Element.


        :param locked_date: The locked_date of this Element.  # noqa: E501
        :type: str
        """

        self._locked_date = locked_date

    @property
    def logo_position(self):
        """Gets the logo_position of this Element.  # noqa: E501


        :return: The logo_position of this Element.  # noqa: E501
        :rtype: str
        """
        return self._logo_position

    @logo_position.setter
    def logo_position(self, logo_position):
        """Sets the logo_position of this Element.


        :param logo_position: The logo_position of this Element.  # noqa: E501
        :type: str
        """

        self._logo_position = logo_position

    @property
    def logo_url(self):
        """Gets the logo_url of this Element.  # noqa: E501


        :return: The logo_url of this Element.  # noqa: E501
        :rtype: str
        """
        return self._logo_url

    @logo_url.setter
    def logo_url(self, logo_url):
        """Sets the logo_url of this Element.


        :param logo_url: The logo_url of this Element.  # noqa: E501
        :type: str
        """

        self._logo_url = logo_url

    @property
    def lshape_band(self):
        """Gets the lshape_band of this Element.  # noqa: E501


        :return: The lshape_band of this Element.  # noqa: E501
        :rtype: bool
        """
        return self._lshape_band

    @lshape_band.setter
    def lshape_band(self, lshape_band):
        """Sets the lshape_band of this Element.


        :param lshape_band: The lshape_band of this Element.  # noqa: E501
        :type: bool
        """

        self._lshape_band = lshape_band

    @property
    def match(self):
        """Gets the match of this Element.  # noqa: E501


        :return: The match of this Element.  # noqa: E501
        :rtype: Cricket
        """
        return self._match

    @match.setter
    def match(self, match):
        """Sets the match of this Element.


        :param match: The match of this Element.  # noqa: E501
        :type: Cricket
        """

        self._match = match

    @property
    def meta_description(self):
        """Gets the meta_description of this Element.  # noqa: E501


        :return: The meta_description of this Element.  # noqa: E501
        :rtype: str
        """
        return self._meta_description

    @meta_description.setter
    def meta_description(self, meta_description):
        """Sets the meta_description of this Element.


        :param meta_description: The meta_description of this Element.  # noqa: E501
        :type: str
        """

        self._meta_description = meta_description

    @property
    def meta_title(self):
        """Gets the meta_title of this Element.  # noqa: E501


        :return: The meta_title of this Element.  # noqa: E501
        :rtype: str
        """
        return self._meta_title

    @meta_title.setter
    def meta_title(self, meta_title):
        """Sets the meta_title of this Element.


        :param meta_title: The meta_title of this Element.  # noqa: E501
        :type: str
        """

        self._meta_title = meta_title

    @property
    def metadata(self):
        """Gets the metadata of this Element.  # noqa: E501


        :return: The metadata of this Element.  # noqa: E501
        :rtype: Metadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Element.


        :param metadata: The metadata of this Element.  # noqa: E501
        :type: Metadata
        """

        self._metadata = metadata

    @property
    def migration_info_web_url(self):
        """Gets the migration_info_web_url of this Element.  # noqa: E501


        :return: The migration_info_web_url of this Element.  # noqa: E501
        :rtype: str
        """
        return self._migration_info_web_url

    @migration_info_web_url.setter
    def migration_info_web_url(self, migration_info_web_url):
        """Sets the migration_info_web_url of this Element.


        :param migration_info_web_url: The migration_info_web_url of this Element.  # noqa: E501
        :type: str
        """

        self._migration_info_web_url = migration_info_web_url

    @property
    def migration_info_web_url_migrated(self):
        """Gets the migration_info_web_url_migrated of this Element.  # noqa: E501


        :return: The migration_info_web_url_migrated of this Element.  # noqa: E501
        :rtype: bool
        """
        return self._migration_info_web_url_migrated

    @migration_info_web_url_migrated.setter
    def migration_info_web_url_migrated(self, migration_info_web_url_migrated):
        """Sets the migration_info_web_url_migrated of this Element.


        :param migration_info_web_url_migrated: The migration_info_web_url_migrated of this Element.  # noqa: E501
        :type: bool
        """

        self._migration_info_web_url_migrated = migration_info_web_url_migrated

    @property
    def migration_info_web_url_published(self):
        """Gets the migration_info_web_url_published of this Element.  # noqa: E501


        :return: The migration_info_web_url_published of this Element.  # noqa: E501
        :rtype: bool
        """
        return self._migration_info_web_url_published

    @migration_info_web_url_published.setter
    def migration_info_web_url_published(self, migration_info_web_url_published):
        """Sets the migration_info_web_url_published of this Element.


        :param migration_info_web_url_published: The migration_info_web_url_published of this Element.  # noqa: E501
        :type: bool
        """

        self._migration_info_web_url_published = migration_info_web_url_published

    @property
    def name(self):
        """Gets the name of this Element.  # noqa: E501


        :return: The name of this Element.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Element.


        :param name: The name of this Element.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def old_uuid(self):
        """Gets the old_uuid of this Element.  # noqa: E501


        :return: The old_uuid of this Element.  # noqa: E501
        :rtype: str
        """
        return self._old_uuid

    @old_uuid.setter
    def old_uuid(self, old_uuid):
        """Sets the old_uuid of this Element.


        :param old_uuid: The old_uuid of this Element.  # noqa: E501
        :type: str
        """

        self._old_uuid = old_uuid

    @property
    def paragraph(self):
        """Gets the paragraph of this Element.  # noqa: E501


        :return: The paragraph of this Element.  # noqa: E501
        :rtype: Paragraph
        """
        return self._paragraph

    @paragraph.setter
    def paragraph(self, paragraph):
        """Sets the paragraph of this Element.


        :param paragraph: The paragraph of this Element.  # noqa: E501
        :type: Paragraph
        """

        self._paragraph = paragraph

    @property
    def parent_element_id(self):
        """Gets the parent_element_id of this Element.  # noqa: E501


        :return: The parent_element_id of this Element.  # noqa: E501
        :rtype: int
        """
        return self._parent_element_id

    @parent_element_id.setter
    def parent_element_id(self, parent_element_id):
        """Sets the parent_element_id of this Element.


        :param parent_element_id: The parent_element_id of this Element.  # noqa: E501
        :type: int
        """

        self._parent_element_id = parent_element_id

    @property
    def pinned_articles_list(self):
        """Gets the pinned_articles_list of this Element.  # noqa: E501


        :return: The pinned_articles_list of this Element.  # noqa: E501
        :rtype: list[PinnedArticle]
        """
        return self._pinned_articles_list

    @pinned_articles_list.setter
    def pinned_articles_list(self, pinned_articles_list):
        """Sets the pinned_articles_list of this Element.


        :param pinned_articles_list: The pinned_articles_list of this Element.  # noqa: E501
        :type: list[PinnedArticle]
        """

        self._pinned_articles_list = pinned_articles_list

    @property
    def podcast(self):
        """Gets the podcast of this Element.  # noqa: E501


        :return: The podcast of this Element.  # noqa: E501
        :rtype: PodcastElement
        """
        return self._podcast

    @podcast.setter
    def podcast(self, podcast):
        """Sets the podcast of this Element.


        :param podcast: The podcast of this Element.  # noqa: E501
        :type: PodcastElement
        """

        self._podcast = podcast

    @property
    def product(self):
        """Gets the product of this Element.  # noqa: E501


        :return: The product of this Element.  # noqa: E501
        :rtype: Product
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this Element.


        :param product: The product of this Element.  # noqa: E501
        :type: Product
        """

        self._product = product

    @property
    def read_by_users(self):
        """Gets the read_by_users of this Element.  # noqa: E501


        :return: The read_by_users of this Element.  # noqa: E501
        :rtype: list[str]
        """
        return self._read_by_users

    @read_by_users.setter
    def read_by_users(self, read_by_users):
        """Sets the read_by_users of this Element.


        :param read_by_users: The read_by_users of this Element.  # noqa: E501
        :type: list[str]
        """

        self._read_by_users = read_by_users

    @property
    def recipe(self):
        """Gets the recipe of this Element.  # noqa: E501


        :return: The recipe of this Element.  # noqa: E501
        :rtype: Recipe
        """
        return self._recipe

    @recipe.setter
    def recipe(self, recipe):
        """Sets the recipe of this Element.


        :param recipe: The recipe of this Element.  # noqa: E501
        :type: Recipe
        """

        self._recipe = recipe

    @property
    def related_stories(self):
        """Gets the related_stories of this Element.  # noqa: E501


        :return: The related_stories of this Element.  # noqa: E501
        :rtype: list[int]
        """
        return self._related_stories

    @related_stories.setter
    def related_stories(self, related_stories):
        """Sets the related_stories of this Element.


        :param related_stories: The related_stories of this Element.  # noqa: E501
        :type: list[int]
        """

        self._related_stories = related_stories

    @property
    def related_stories_how_to(self):
        """Gets the related_stories_how_to of this Element.  # noqa: E501


        :return: The related_stories_how_to of this Element.  # noqa: E501
        :rtype: list[int]
        """
        return self._related_stories_how_to

    @related_stories_how_to.setter
    def related_stories_how_to(self, related_stories_how_to):
        """Sets the related_stories_how_to of this Element.


        :param related_stories_how_to: The related_stories_how_to of this Element.  # noqa: E501
        :type: list[int]
        """

        self._related_stories_how_to = related_stories_how_to

    @property
    def related_video_element_ids(self):
        """Gets the related_video_element_ids of this Element.  # noqa: E501


        :return: The related_video_element_ids of this Element.  # noqa: E501
        :rtype: list[int]
        """
        return self._related_video_element_ids

    @related_video_element_ids.setter
    def related_video_element_ids(self, related_video_element_ids):
        """Sets the related_video_element_ids of this Element.


        :param related_video_element_ids: The related_video_element_ids of this Element.  # noqa: E501
        :type: list[int]
        """

        self._related_video_element_ids = related_video_element_ids

    @property
    def reusable(self):
        """Gets the reusable of this Element.  # noqa: E501


        :return: The reusable of this Element.  # noqa: E501
        :rtype: bool
        """
        return self._reusable

    @reusable.setter
    def reusable(self, reusable):
        """Sets the reusable of this Element.


        :param reusable: The reusable of this Element.  # noqa: E501
        :type: bool
        """

        self._reusable = reusable

    @property
    def review(self):
        """Gets the review of this Element.  # noqa: E501


        :return: The review of this Element.  # noqa: E501
        :rtype: Review
        """
        return self._review

    @review.setter
    def review(self, review):
        """Sets the review of this Element.


        :param review: The review of this Element.  # noqa: E501
        :type: Review
        """

        self._review = review

    @property
    def scheduled_at(self):
        """Gets the scheduled_at of this Element.  # noqa: E501


        :return: The scheduled_at of this Element.  # noqa: E501
        :rtype: int
        """
        return self._scheduled_at

    @scheduled_at.setter
    def scheduled_at(self, scheduled_at):
        """Sets the scheduled_at of this Element.


        :param scheduled_at: The scheduled_at of this Element.  # noqa: E501
        :type: int
        """

        self._scheduled_at = scheduled_at

    @property
    def scheduled_by(self):
        """Gets the scheduled_by of this Element.  # noqa: E501


        :return: The scheduled_by of this Element.  # noqa: E501
        :rtype: str
        """
        return self._scheduled_by

    @scheduled_by.setter
    def scheduled_by(self, scheduled_by):
        """Sets the scheduled_by of this Element.


        :param scheduled_by: The scheduled_by of this Element.  # noqa: E501
        :type: str
        """

        self._scheduled_by = scheduled_by

    @property
    def scheduled_date(self):
        """Gets the scheduled_date of this Element.  # noqa: E501


        :return: The scheduled_date of this Element.  # noqa: E501
        :rtype: str
        """
        return self._scheduled_date

    @scheduled_date.setter
    def scheduled_date(self, scheduled_date):
        """Sets the scheduled_date of this Element.


        :param scheduled_date: The scheduled_date of this Element.  # noqa: E501
        :type: str
        """

        self._scheduled_date = scheduled_date

    @property
    def social(self):
        """Gets the social of this Element.  # noqa: E501


        :return: The social of this Element.  # noqa: E501
        :rtype: dict(str, bool)
        """
        return self._social

    @social.setter
    def social(self, social):
        """Sets the social of this Element.


        :param social: The social of this Element.  # noqa: E501
        :type: dict(str, bool)
        """

        self._social = social

    @property
    def social_counter(self):
        """Gets the social_counter of this Element.  # noqa: E501


        :return: The social_counter of this Element.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._social_counter

    @social_counter.setter
    def social_counter(self, social_counter):
        """Sets the social_counter of this Element.


        :param social_counter: The social_counter of this Element.  # noqa: E501
        :type: dict(str, int)
        """

        self._social_counter = social_counter

    @property
    def social_list(self):
        """Gets the social_list of this Element.  # noqa: E501


        :return: The social_list of this Element.  # noqa: E501
        :rtype: dict(str, list[str])
        """
        return self._social_list

    @social_list.setter
    def social_list(self, social_list):
        """Sets the social_list of this Element.


        :param social_list: The social_list of this Element.  # noqa: E501
        :type: dict(str, list[str])
        """

        self._social_list = social_list

    @property
    def soft_published(self):
        """Gets the soft_published of this Element.  # noqa: E501


        :return: The soft_published of this Element.  # noqa: E501
        :rtype: bool
        """
        return self._soft_published

    @soft_published.setter
    def soft_published(self, soft_published):
        """Sets the soft_published of this Element.


        :param soft_published: The soft_published of this Element.  # noqa: E501
        :type: bool
        """

        self._soft_published = soft_published

    @property
    def steps(self):
        """Gets the steps of this Element.  # noqa: E501


        :return: The steps of this Element.  # noqa: E501
        :rtype: list[HowToStep]
        """
        return self._steps

    @steps.setter
    def steps(self, steps):
        """Sets the steps of this Element.


        :param steps: The steps of this Element.  # noqa: E501
        :type: list[HowToStep]
        """

        self._steps = steps

    @property
    def sub_type(self):
        """Gets the sub_type of this Element.  # noqa: E501


        :return: The sub_type of this Element.  # noqa: E501
        :rtype: str
        """
        return self._sub_type

    @sub_type.setter
    def sub_type(self, sub_type):
        """Sets the sub_type of this Element.


        :param sub_type: The sub_type of this Element.  # noqa: E501
        :type: str
        """

        self._sub_type = sub_type

    @property
    def suggest(self):
        """Gets the suggest of this Element.  # noqa: E501


        :return: The suggest of this Element.  # noqa: E501
        :rtype: Completion
        """
        return self._suggest

    @suggest.setter
    def suggest(self, suggest):
        """Sets the suggest of this Element.


        :param suggest: The suggest of this Element.  # noqa: E501
        :type: Completion
        """

        self._suggest = suggest

    @property
    def supplies(self):
        """Gets the supplies of this Element.  # noqa: E501


        :return: The supplies of this Element.  # noqa: E501
        :rtype: list[str]
        """
        return self._supplies

    @supplies.setter
    def supplies(self, supplies):
        """Sets the supplies of this Element.


        :param supplies: The supplies of this Element.  # noqa: E501
        :type: list[str]
        """

        self._supplies = supplies

    @property
    def tag_type_app(self):
        """Gets the tag_type_app of this Element.  # noqa: E501


        :return: The tag_type_app of this Element.  # noqa: E501
        :rtype: str
        """
        return self._tag_type_app

    @tag_type_app.setter
    def tag_type_app(self, tag_type_app):
        """Sets the tag_type_app of this Element.


        :param tag_type_app: The tag_type_app of this Element.  # noqa: E501
        :type: str
        """

        self._tag_type_app = tag_type_app

    @property
    def time_to_complete(self):
        """Gets the time_to_complete of this Element.  # noqa: E501


        :return: The time_to_complete of this Element.  # noqa: E501
        :rtype: int
        """
        return self._time_to_complete

    @time_to_complete.setter
    def time_to_complete(self, time_to_complete):
        """Sets the time_to_complete of this Element.


        :param time_to_complete: The time_to_complete of this Element.  # noqa: E501
        :type: int
        """

        self._time_to_complete = time_to_complete

    @property
    def time_to_completein_hrs(self):
        """Gets the time_to_completein_hrs of this Element.  # noqa: E501


        :return: The time_to_completein_hrs of this Element.  # noqa: E501
        :rtype: int
        """
        return self._time_to_completein_hrs

    @time_to_completein_hrs.setter
    def time_to_completein_hrs(self, time_to_completein_hrs):
        """Sets the time_to_completein_hrs of this Element.


        :param time_to_completein_hrs: The time_to_completein_hrs of this Element.  # noqa: E501
        :type: int
        """

        self._time_to_completein_hrs = time_to_completein_hrs

    @property
    def timestamp(self):
        """Gets the timestamp of this Element.  # noqa: E501


        :return: The timestamp of this Element.  # noqa: E501
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this Element.


        :param timestamp: The timestamp of this Element.  # noqa: E501
        :type: str
        """

        self._timestamp = timestamp

    @property
    def title(self):
        """Gets the title of this Element.  # noqa: E501


        :return: The title of this Element.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Element.


        :param title: The title of this Element.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def title_wo_sp_char(self):
        """Gets the title_wo_sp_char of this Element.  # noqa: E501


        :return: The title_wo_sp_char of this Element.  # noqa: E501
        :rtype: str
        """
        return self._title_wo_sp_char

    @title_wo_sp_char.setter
    def title_wo_sp_char(self, title_wo_sp_char):
        """Sets the title_wo_sp_char of this Element.


        :param title_wo_sp_char: The title_wo_sp_char of this Element.  # noqa: E501
        :type: str
        """

        self._title_wo_sp_char = title_wo_sp_char

    @property
    def tools(self):
        """Gets the tools of this Element.  # noqa: E501


        :return: The tools of this Element.  # noqa: E501
        :rtype: list[str]
        """
        return self._tools

    @tools.setter
    def tools(self, tools):
        """Sets the tools of this Element.


        :param tools: The tools of this Element.  # noqa: E501
        :type: list[str]
        """

        self._tools = tools

    @property
    def topic_migrated(self):
        """Gets the topic_migrated of this Element.  # noqa: E501


        :return: The topic_migrated of this Element.  # noqa: E501
        :rtype: bool
        """
        return self._topic_migrated

    @topic_migrated.setter
    def topic_migrated(self, topic_migrated):
        """Sets the topic_migrated of this Element.


        :param topic_migrated: The topic_migrated of this Element.  # noqa: E501
        :type: bool
        """

        self._topic_migrated = topic_migrated

    @property
    def topic_published(self):
        """Gets the topic_published of this Element.  # noqa: E501


        :return: The topic_published of this Element.  # noqa: E501
        :rtype: bool
        """
        return self._topic_published

    @topic_published.setter
    def topic_published(self, topic_published):
        """Sets the topic_published of this Element.


        :param topic_published: The topic_published of this Element.  # noqa: E501
        :type: bool
        """

        self._topic_published = topic_published

    @property
    def trending(self):
        """Gets the trending of this Element.  # noqa: E501


        :return: The trending of this Element.  # noqa: E501
        :rtype: list[DynamicConfiguration]
        """
        return self._trending

    @trending.setter
    def trending(self, trending):
        """Sets the trending of this Element.


        :param trending: The trending of this Element.  # noqa: E501
        :type: list[DynamicConfiguration]
        """

        self._trending = trending

    @property
    def type(self):
        """Gets the type of this Element.  # noqa: E501


        :return: The type of this Element.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Element.


        :param type: The type of this Element.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def updating_homepage_flag(self):
        """Gets the updating_homepage_flag of this Element.  # noqa: E501


        :return: The updating_homepage_flag of this Element.  # noqa: E501
        :rtype: bool
        """
        return self._updating_homepage_flag

    @updating_homepage_flag.setter
    def updating_homepage_flag(self, updating_homepage_flag):
        """Sets the updating_homepage_flag of this Element.


        :param updating_homepage_flag: The updating_homepage_flag of this Element.  # noqa: E501
        :type: bool
        """

        self._updating_homepage_flag = updating_homepage_flag

    @property
    def video(self):
        """Gets the video of this Element.  # noqa: E501


        :return: The video of this Element.  # noqa: E501
        :rtype: Video
        """
        return self._video

    @video.setter
    def video(self, video):
        """Sets the video of this Element.


        :param video: The video of this Element.  # noqa: E501
        :type: Video
        """

        self._video = video

    @property
    def web_engage_scheduled_at(self):
        """Gets the web_engage_scheduled_at of this Element.  # noqa: E501


        :return: The web_engage_scheduled_at of this Element.  # noqa: E501
        :rtype: int
        """
        return self._web_engage_scheduled_at

    @web_engage_scheduled_at.setter
    def web_engage_scheduled_at(self, web_engage_scheduled_at):
        """Sets the web_engage_scheduled_at of this Element.


        :param web_engage_scheduled_at: The web_engage_scheduled_at of this Element.  # noqa: E501
        :type: int
        """

        self._web_engage_scheduled_at = web_engage_scheduled_at

    @property
    def web_engage_scheduled_date(self):
        """Gets the web_engage_scheduled_date of this Element.  # noqa: E501


        :return: The web_engage_scheduled_date of this Element.  # noqa: E501
        :rtype: str
        """
        return self._web_engage_scheduled_date

    @web_engage_scheduled_date.setter
    def web_engage_scheduled_date(self, web_engage_scheduled_date):
        """Sets the web_engage_scheduled_date of this Element.


        :param web_engage_scheduled_date: The web_engage_scheduled_date of this Element.  # noqa: E501
        :type: str
        """

        self._web_engage_scheduled_date = web_engage_scheduled_date

    @property
    def web_id(self):
        """Gets the web_id of this Element.  # noqa: E501


        :return: The web_id of this Element.  # noqa: E501
        :rtype: str
        """
        return self._web_id

    @web_id.setter
    def web_id(self, web_id):
        """Sets the web_id of this Element.


        :param web_id: The web_id of this Element.  # noqa: E501
        :type: str
        """

        self._web_id = web_id

    @property
    def web_story_slide(self):
        """Gets the web_story_slide of this Element.  # noqa: E501


        :return: The web_story_slide of this Element.  # noqa: E501
        :rtype: list[WebStoriesTextboxOrButton]
        """
        return self._web_story_slide

    @web_story_slide.setter
    def web_story_slide(self, web_story_slide):
        """Sets the web_story_slide of this Element.


        :param web_story_slide: The web_story_slide of this Element.  # noqa: E501
        :type: list[WebStoriesTextboxOrButton]
        """

        self._web_story_slide = web_story_slide

    @property
    def webengage_notification_title(self):
        """Gets the webengage_notification_title of this Element.  # noqa: E501


        :return: The webengage_notification_title of this Element.  # noqa: E501
        :rtype: str
        """
        return self._webengage_notification_title

    @webengage_notification_title.setter
    def webengage_notification_title(self, webengage_notification_title):
        """Sets the webengage_notification_title of this Element.


        :param webengage_notification_title: The webengage_notification_title of this Element.  # noqa: E501
        :type: str
        """

        self._webengage_notification_title = webengage_notification_title

    @property
    def wire_feed_id(self):
        """Gets the wire_feed_id of this Element.  # noqa: E501


        :return: The wire_feed_id of this Element.  # noqa: E501
        :rtype: str
        """
        return self._wire_feed_id

    @wire_feed_id.setter
    def wire_feed_id(self, wire_feed_id):
        """Sets the wire_feed_id of this Element.


        :param wire_feed_id: The wire_feed_id of this Element.  # noqa: E501
        :type: str
        """

        self._wire_feed_id = wire_feed_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Element, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Element):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

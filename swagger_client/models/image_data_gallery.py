# coding: utf-8

"""
    CMS-Backend API

    This is API documentation of CMS-Backend  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: htdevteam@hindustantimes.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ImageDataGallery(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'audio_url': 'str',
        'domain_name': 'str',
        'img_alternate_text': 'str',
        'img_description': 'str',
        'img_keywords': 'str',
        'img_title': 'str',
        'imr_url': 'str',
        'keywords': 'str',
        'player_type': 'str',
        'video_url': 'str'
    }

    attribute_map = {
        'audio_url': 'audio_url',
        'domain_name': 'domainName',
        'img_alternate_text': 'img_alternate_text',
        'img_description': 'img_description',
        'img_keywords': 'img_keywords',
        'img_title': 'img_title',
        'imr_url': 'imr_url',
        'keywords': 'keywords',
        'player_type': 'player_type',
        'video_url': 'video_url'
    }

    def __init__(self, audio_url=None, domain_name=None, img_alternate_text=None, img_description=None, img_keywords=None, img_title=None, imr_url=None, keywords=None, player_type=None, video_url=None):  # noqa: E501
        """ImageDataGallery - a model defined in Swagger"""  # noqa: E501
        self._audio_url = None
        self._domain_name = None
        self._img_alternate_text = None
        self._img_description = None
        self._img_keywords = None
        self._img_title = None
        self._imr_url = None
        self._keywords = None
        self._player_type = None
        self._video_url = None
        self.discriminator = None
        if audio_url is not None:
            self.audio_url = audio_url
        if domain_name is not None:
            self.domain_name = domain_name
        if img_alternate_text is not None:
            self.img_alternate_text = img_alternate_text
        if img_description is not None:
            self.img_description = img_description
        if img_keywords is not None:
            self.img_keywords = img_keywords
        if img_title is not None:
            self.img_title = img_title
        if imr_url is not None:
            self.imr_url = imr_url
        if keywords is not None:
            self.keywords = keywords
        if player_type is not None:
            self.player_type = player_type
        if video_url is not None:
            self.video_url = video_url

    @property
    def audio_url(self):
        """Gets the audio_url of this ImageDataGallery.  # noqa: E501


        :return: The audio_url of this ImageDataGallery.  # noqa: E501
        :rtype: str
        """
        return self._audio_url

    @audio_url.setter
    def audio_url(self, audio_url):
        """Sets the audio_url of this ImageDataGallery.


        :param audio_url: The audio_url of this ImageDataGallery.  # noqa: E501
        :type: str
        """

        self._audio_url = audio_url

    @property
    def domain_name(self):
        """Gets the domain_name of this ImageDataGallery.  # noqa: E501


        :return: The domain_name of this ImageDataGallery.  # noqa: E501
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this ImageDataGallery.


        :param domain_name: The domain_name of this ImageDataGallery.  # noqa: E501
        :type: str
        """

        self._domain_name = domain_name

    @property
    def img_alternate_text(self):
        """Gets the img_alternate_text of this ImageDataGallery.  # noqa: E501


        :return: The img_alternate_text of this ImageDataGallery.  # noqa: E501
        :rtype: str
        """
        return self._img_alternate_text

    @img_alternate_text.setter
    def img_alternate_text(self, img_alternate_text):
        """Sets the img_alternate_text of this ImageDataGallery.


        :param img_alternate_text: The img_alternate_text of this ImageDataGallery.  # noqa: E501
        :type: str
        """

        self._img_alternate_text = img_alternate_text

    @property
    def img_description(self):
        """Gets the img_description of this ImageDataGallery.  # noqa: E501


        :return: The img_description of this ImageDataGallery.  # noqa: E501
        :rtype: str
        """
        return self._img_description

    @img_description.setter
    def img_description(self, img_description):
        """Sets the img_description of this ImageDataGallery.


        :param img_description: The img_description of this ImageDataGallery.  # noqa: E501
        :type: str
        """

        self._img_description = img_description

    @property
    def img_keywords(self):
        """Gets the img_keywords of this ImageDataGallery.  # noqa: E501


        :return: The img_keywords of this ImageDataGallery.  # noqa: E501
        :rtype: str
        """
        return self._img_keywords

    @img_keywords.setter
    def img_keywords(self, img_keywords):
        """Sets the img_keywords of this ImageDataGallery.


        :param img_keywords: The img_keywords of this ImageDataGallery.  # noqa: E501
        :type: str
        """

        self._img_keywords = img_keywords

    @property
    def img_title(self):
        """Gets the img_title of this ImageDataGallery.  # noqa: E501


        :return: The img_title of this ImageDataGallery.  # noqa: E501
        :rtype: str
        """
        return self._img_title

    @img_title.setter
    def img_title(self, img_title):
        """Sets the img_title of this ImageDataGallery.


        :param img_title: The img_title of this ImageDataGallery.  # noqa: E501
        :type: str
        """

        self._img_title = img_title

    @property
    def imr_url(self):
        """Gets the imr_url of this ImageDataGallery.  # noqa: E501


        :return: The imr_url of this ImageDataGallery.  # noqa: E501
        :rtype: str
        """
        return self._imr_url

    @imr_url.setter
    def imr_url(self, imr_url):
        """Sets the imr_url of this ImageDataGallery.


        :param imr_url: The imr_url of this ImageDataGallery.  # noqa: E501
        :type: str
        """

        self._imr_url = imr_url

    @property
    def keywords(self):
        """Gets the keywords of this ImageDataGallery.  # noqa: E501


        :return: The keywords of this ImageDataGallery.  # noqa: E501
        :rtype: str
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this ImageDataGallery.


        :param keywords: The keywords of this ImageDataGallery.  # noqa: E501
        :type: str
        """

        self._keywords = keywords

    @property
    def player_type(self):
        """Gets the player_type of this ImageDataGallery.  # noqa: E501


        :return: The player_type of this ImageDataGallery.  # noqa: E501
        :rtype: str
        """
        return self._player_type

    @player_type.setter
    def player_type(self, player_type):
        """Sets the player_type of this ImageDataGallery.


        :param player_type: The player_type of this ImageDataGallery.  # noqa: E501
        :type: str
        """

        self._player_type = player_type

    @property
    def video_url(self):
        """Gets the video_url of this ImageDataGallery.  # noqa: E501


        :return: The video_url of this ImageDataGallery.  # noqa: E501
        :rtype: str
        """
        return self._video_url

    @video_url.setter
    def video_url(self, video_url):
        """Sets the video_url of this ImageDataGallery.


        :param video_url: The video_url of this ImageDataGallery.  # noqa: E501
        :type: str
        """

        self._video_url = video_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ImageDataGallery, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImageDataGallery):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

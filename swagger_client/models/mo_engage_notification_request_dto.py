# coding: utf-8

"""
    CMS-Backend API

    This is API documentation of CMS-Backend  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: htdevteam@hindustantimes.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MoEngageNotificationRequestDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access_key': 'str',
        'activity_trace_id': 'str',
        'app_id': 'str',
        'app_secret': 'str',
        'app_types': 'list[str]',
        'campaign_id': 'str',
        'cross_domains': 'list[str]',
        'dashboard_url': 'str',
        'description': 'str',
        'device_types': 'list[str]',
        'devices': 'list[str]',
        'domain_id': 'str',
        'external': 'bool',
        'flash': 'bool',
        'image_layout': 'bool',
        'image_url': 'str',
        'license_code': 'str',
        'mo_segments': 'list[str]',
        'moengage_url': 'str',
        'notification_type_id': 'str',
        'recurring_schedule': 'bool',
        'section': 'str',
        'segments': 'list[str]',
        'sheduled_end_time': 'str',
        'sheduled_start_time': 'str',
        'story_id': 'str',
        'story_url': 'str',
        'tags': 'list[str]',
        'title': 'str'
    }

    attribute_map = {
        'access_key': 'accessKey',
        'activity_trace_id': 'activityTraceId',
        'app_id': 'appId',
        'app_secret': 'appSecret',
        'app_types': 'appTypes',
        'campaign_id': 'campaignId',
        'cross_domains': 'crossDomains',
        'dashboard_url': 'dashboardURL',
        'description': 'description',
        'device_types': 'deviceTypes',
        'devices': 'devices',
        'domain_id': 'domainId',
        'external': 'external',
        'flash': 'flash',
        'image_layout': 'imageLayout',
        'image_url': 'imageUrl',
        'license_code': 'licenseCode',
        'mo_segments': 'moSegments',
        'moengage_url': 'moengageURL',
        'notification_type_id': 'notificationTypeId',
        'recurring_schedule': 'recurringSchedule',
        'section': 'section',
        'segments': 'segments',
        'sheduled_end_time': 'sheduledEndTime',
        'sheduled_start_time': 'sheduledStartTime',
        'story_id': 'storyId',
        'story_url': 'storyUrl',
        'tags': 'tags',
        'title': 'title'
    }

    def __init__(self, access_key=None, activity_trace_id=None, app_id=None, app_secret=None, app_types=None, campaign_id=None, cross_domains=None, dashboard_url=None, description=None, device_types=None, devices=None, domain_id=None, external=None, flash=None, image_layout=None, image_url=None, license_code=None, mo_segments=None, moengage_url=None, notification_type_id=None, recurring_schedule=None, section=None, segments=None, sheduled_end_time=None, sheduled_start_time=None, story_id=None, story_url=None, tags=None, title=None):  # noqa: E501
        """MoEngageNotificationRequestDto - a model defined in Swagger"""  # noqa: E501
        self._access_key = None
        self._activity_trace_id = None
        self._app_id = None
        self._app_secret = None
        self._app_types = None
        self._campaign_id = None
        self._cross_domains = None
        self._dashboard_url = None
        self._description = None
        self._device_types = None
        self._devices = None
        self._domain_id = None
        self._external = None
        self._flash = None
        self._image_layout = None
        self._image_url = None
        self._license_code = None
        self._mo_segments = None
        self._moengage_url = None
        self._notification_type_id = None
        self._recurring_schedule = None
        self._section = None
        self._segments = None
        self._sheduled_end_time = None
        self._sheduled_start_time = None
        self._story_id = None
        self._story_url = None
        self._tags = None
        self._title = None
        self.discriminator = None
        if access_key is not None:
            self.access_key = access_key
        if activity_trace_id is not None:
            self.activity_trace_id = activity_trace_id
        if app_id is not None:
            self.app_id = app_id
        if app_secret is not None:
            self.app_secret = app_secret
        if app_types is not None:
            self.app_types = app_types
        if campaign_id is not None:
            self.campaign_id = campaign_id
        if cross_domains is not None:
            self.cross_domains = cross_domains
        if dashboard_url is not None:
            self.dashboard_url = dashboard_url
        if description is not None:
            self.description = description
        if device_types is not None:
            self.device_types = device_types
        if devices is not None:
            self.devices = devices
        if domain_id is not None:
            self.domain_id = domain_id
        if external is not None:
            self.external = external
        if flash is not None:
            self.flash = flash
        if image_layout is not None:
            self.image_layout = image_layout
        if image_url is not None:
            self.image_url = image_url
        if license_code is not None:
            self.license_code = license_code
        if mo_segments is not None:
            self.mo_segments = mo_segments
        if moengage_url is not None:
            self.moengage_url = moengage_url
        if notification_type_id is not None:
            self.notification_type_id = notification_type_id
        if recurring_schedule is not None:
            self.recurring_schedule = recurring_schedule
        if section is not None:
            self.section = section
        if segments is not None:
            self.segments = segments
        if sheduled_end_time is not None:
            self.sheduled_end_time = sheduled_end_time
        if sheduled_start_time is not None:
            self.sheduled_start_time = sheduled_start_time
        if story_id is not None:
            self.story_id = story_id
        if story_url is not None:
            self.story_url = story_url
        if tags is not None:
            self.tags = tags
        if title is not None:
            self.title = title

    @property
    def access_key(self):
        """Gets the access_key of this MoEngageNotificationRequestDto.  # noqa: E501


        :return: The access_key of this MoEngageNotificationRequestDto.  # noqa: E501
        :rtype: str
        """
        return self._access_key

    @access_key.setter
    def access_key(self, access_key):
        """Sets the access_key of this MoEngageNotificationRequestDto.


        :param access_key: The access_key of this MoEngageNotificationRequestDto.  # noqa: E501
        :type: str
        """

        self._access_key = access_key

    @property
    def activity_trace_id(self):
        """Gets the activity_trace_id of this MoEngageNotificationRequestDto.  # noqa: E501


        :return: The activity_trace_id of this MoEngageNotificationRequestDto.  # noqa: E501
        :rtype: str
        """
        return self._activity_trace_id

    @activity_trace_id.setter
    def activity_trace_id(self, activity_trace_id):
        """Sets the activity_trace_id of this MoEngageNotificationRequestDto.


        :param activity_trace_id: The activity_trace_id of this MoEngageNotificationRequestDto.  # noqa: E501
        :type: str
        """

        self._activity_trace_id = activity_trace_id

    @property
    def app_id(self):
        """Gets the app_id of this MoEngageNotificationRequestDto.  # noqa: E501


        :return: The app_id of this MoEngageNotificationRequestDto.  # noqa: E501
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this MoEngageNotificationRequestDto.


        :param app_id: The app_id of this MoEngageNotificationRequestDto.  # noqa: E501
        :type: str
        """

        self._app_id = app_id

    @property
    def app_secret(self):
        """Gets the app_secret of this MoEngageNotificationRequestDto.  # noqa: E501


        :return: The app_secret of this MoEngageNotificationRequestDto.  # noqa: E501
        :rtype: str
        """
        return self._app_secret

    @app_secret.setter
    def app_secret(self, app_secret):
        """Sets the app_secret of this MoEngageNotificationRequestDto.


        :param app_secret: The app_secret of this MoEngageNotificationRequestDto.  # noqa: E501
        :type: str
        """

        self._app_secret = app_secret

    @property
    def app_types(self):
        """Gets the app_types of this MoEngageNotificationRequestDto.  # noqa: E501


        :return: The app_types of this MoEngageNotificationRequestDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._app_types

    @app_types.setter
    def app_types(self, app_types):
        """Sets the app_types of this MoEngageNotificationRequestDto.


        :param app_types: The app_types of this MoEngageNotificationRequestDto.  # noqa: E501
        :type: list[str]
        """

        self._app_types = app_types

    @property
    def campaign_id(self):
        """Gets the campaign_id of this MoEngageNotificationRequestDto.  # noqa: E501


        :return: The campaign_id of this MoEngageNotificationRequestDto.  # noqa: E501
        :rtype: str
        """
        return self._campaign_id

    @campaign_id.setter
    def campaign_id(self, campaign_id):
        """Sets the campaign_id of this MoEngageNotificationRequestDto.


        :param campaign_id: The campaign_id of this MoEngageNotificationRequestDto.  # noqa: E501
        :type: str
        """

        self._campaign_id = campaign_id

    @property
    def cross_domains(self):
        """Gets the cross_domains of this MoEngageNotificationRequestDto.  # noqa: E501


        :return: The cross_domains of this MoEngageNotificationRequestDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._cross_domains

    @cross_domains.setter
    def cross_domains(self, cross_domains):
        """Sets the cross_domains of this MoEngageNotificationRequestDto.


        :param cross_domains: The cross_domains of this MoEngageNotificationRequestDto.  # noqa: E501
        :type: list[str]
        """

        self._cross_domains = cross_domains

    @property
    def dashboard_url(self):
        """Gets the dashboard_url of this MoEngageNotificationRequestDto.  # noqa: E501


        :return: The dashboard_url of this MoEngageNotificationRequestDto.  # noqa: E501
        :rtype: str
        """
        return self._dashboard_url

    @dashboard_url.setter
    def dashboard_url(self, dashboard_url):
        """Sets the dashboard_url of this MoEngageNotificationRequestDto.


        :param dashboard_url: The dashboard_url of this MoEngageNotificationRequestDto.  # noqa: E501
        :type: str
        """

        self._dashboard_url = dashboard_url

    @property
    def description(self):
        """Gets the description of this MoEngageNotificationRequestDto.  # noqa: E501


        :return: The description of this MoEngageNotificationRequestDto.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MoEngageNotificationRequestDto.


        :param description: The description of this MoEngageNotificationRequestDto.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def device_types(self):
        """Gets the device_types of this MoEngageNotificationRequestDto.  # noqa: E501


        :return: The device_types of this MoEngageNotificationRequestDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._device_types

    @device_types.setter
    def device_types(self, device_types):
        """Sets the device_types of this MoEngageNotificationRequestDto.


        :param device_types: The device_types of this MoEngageNotificationRequestDto.  # noqa: E501
        :type: list[str]
        """

        self._device_types = device_types

    @property
    def devices(self):
        """Gets the devices of this MoEngageNotificationRequestDto.  # noqa: E501


        :return: The devices of this MoEngageNotificationRequestDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._devices

    @devices.setter
    def devices(self, devices):
        """Sets the devices of this MoEngageNotificationRequestDto.


        :param devices: The devices of this MoEngageNotificationRequestDto.  # noqa: E501
        :type: list[str]
        """

        self._devices = devices

    @property
    def domain_id(self):
        """Gets the domain_id of this MoEngageNotificationRequestDto.  # noqa: E501


        :return: The domain_id of this MoEngageNotificationRequestDto.  # noqa: E501
        :rtype: str
        """
        return self._domain_id

    @domain_id.setter
    def domain_id(self, domain_id):
        """Sets the domain_id of this MoEngageNotificationRequestDto.


        :param domain_id: The domain_id of this MoEngageNotificationRequestDto.  # noqa: E501
        :type: str
        """

        self._domain_id = domain_id

    @property
    def external(self):
        """Gets the external of this MoEngageNotificationRequestDto.  # noqa: E501


        :return: The external of this MoEngageNotificationRequestDto.  # noqa: E501
        :rtype: bool
        """
        return self._external

    @external.setter
    def external(self, external):
        """Sets the external of this MoEngageNotificationRequestDto.


        :param external: The external of this MoEngageNotificationRequestDto.  # noqa: E501
        :type: bool
        """

        self._external = external

    @property
    def flash(self):
        """Gets the flash of this MoEngageNotificationRequestDto.  # noqa: E501


        :return: The flash of this MoEngageNotificationRequestDto.  # noqa: E501
        :rtype: bool
        """
        return self._flash

    @flash.setter
    def flash(self, flash):
        """Sets the flash of this MoEngageNotificationRequestDto.


        :param flash: The flash of this MoEngageNotificationRequestDto.  # noqa: E501
        :type: bool
        """

        self._flash = flash

    @property
    def image_layout(self):
        """Gets the image_layout of this MoEngageNotificationRequestDto.  # noqa: E501


        :return: The image_layout of this MoEngageNotificationRequestDto.  # noqa: E501
        :rtype: bool
        """
        return self._image_layout

    @image_layout.setter
    def image_layout(self, image_layout):
        """Sets the image_layout of this MoEngageNotificationRequestDto.


        :param image_layout: The image_layout of this MoEngageNotificationRequestDto.  # noqa: E501
        :type: bool
        """

        self._image_layout = image_layout

    @property
    def image_url(self):
        """Gets the image_url of this MoEngageNotificationRequestDto.  # noqa: E501


        :return: The image_url of this MoEngageNotificationRequestDto.  # noqa: E501
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this MoEngageNotificationRequestDto.


        :param image_url: The image_url of this MoEngageNotificationRequestDto.  # noqa: E501
        :type: str
        """

        self._image_url = image_url

    @property
    def license_code(self):
        """Gets the license_code of this MoEngageNotificationRequestDto.  # noqa: E501


        :return: The license_code of this MoEngageNotificationRequestDto.  # noqa: E501
        :rtype: str
        """
        return self._license_code

    @license_code.setter
    def license_code(self, license_code):
        """Sets the license_code of this MoEngageNotificationRequestDto.


        :param license_code: The license_code of this MoEngageNotificationRequestDto.  # noqa: E501
        :type: str
        """

        self._license_code = license_code

    @property
    def mo_segments(self):
        """Gets the mo_segments of this MoEngageNotificationRequestDto.  # noqa: E501


        :return: The mo_segments of this MoEngageNotificationRequestDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._mo_segments

    @mo_segments.setter
    def mo_segments(self, mo_segments):
        """Sets the mo_segments of this MoEngageNotificationRequestDto.


        :param mo_segments: The mo_segments of this MoEngageNotificationRequestDto.  # noqa: E501
        :type: list[str]
        """

        self._mo_segments = mo_segments

    @property
    def moengage_url(self):
        """Gets the moengage_url of this MoEngageNotificationRequestDto.  # noqa: E501


        :return: The moengage_url of this MoEngageNotificationRequestDto.  # noqa: E501
        :rtype: str
        """
        return self._moengage_url

    @moengage_url.setter
    def moengage_url(self, moengage_url):
        """Sets the moengage_url of this MoEngageNotificationRequestDto.


        :param moengage_url: The moengage_url of this MoEngageNotificationRequestDto.  # noqa: E501
        :type: str
        """

        self._moengage_url = moengage_url

    @property
    def notification_type_id(self):
        """Gets the notification_type_id of this MoEngageNotificationRequestDto.  # noqa: E501


        :return: The notification_type_id of this MoEngageNotificationRequestDto.  # noqa: E501
        :rtype: str
        """
        return self._notification_type_id

    @notification_type_id.setter
    def notification_type_id(self, notification_type_id):
        """Sets the notification_type_id of this MoEngageNotificationRequestDto.


        :param notification_type_id: The notification_type_id of this MoEngageNotificationRequestDto.  # noqa: E501
        :type: str
        """

        self._notification_type_id = notification_type_id

    @property
    def recurring_schedule(self):
        """Gets the recurring_schedule of this MoEngageNotificationRequestDto.  # noqa: E501


        :return: The recurring_schedule of this MoEngageNotificationRequestDto.  # noqa: E501
        :rtype: bool
        """
        return self._recurring_schedule

    @recurring_schedule.setter
    def recurring_schedule(self, recurring_schedule):
        """Sets the recurring_schedule of this MoEngageNotificationRequestDto.


        :param recurring_schedule: The recurring_schedule of this MoEngageNotificationRequestDto.  # noqa: E501
        :type: bool
        """

        self._recurring_schedule = recurring_schedule

    @property
    def section(self):
        """Gets the section of this MoEngageNotificationRequestDto.  # noqa: E501


        :return: The section of this MoEngageNotificationRequestDto.  # noqa: E501
        :rtype: str
        """
        return self._section

    @section.setter
    def section(self, section):
        """Sets the section of this MoEngageNotificationRequestDto.


        :param section: The section of this MoEngageNotificationRequestDto.  # noqa: E501
        :type: str
        """

        self._section = section

    @property
    def segments(self):
        """Gets the segments of this MoEngageNotificationRequestDto.  # noqa: E501


        :return: The segments of this MoEngageNotificationRequestDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._segments

    @segments.setter
    def segments(self, segments):
        """Sets the segments of this MoEngageNotificationRequestDto.


        :param segments: The segments of this MoEngageNotificationRequestDto.  # noqa: E501
        :type: list[str]
        """

        self._segments = segments

    @property
    def sheduled_end_time(self):
        """Gets the sheduled_end_time of this MoEngageNotificationRequestDto.  # noqa: E501


        :return: The sheduled_end_time of this MoEngageNotificationRequestDto.  # noqa: E501
        :rtype: str
        """
        return self._sheduled_end_time

    @sheduled_end_time.setter
    def sheduled_end_time(self, sheduled_end_time):
        """Sets the sheduled_end_time of this MoEngageNotificationRequestDto.


        :param sheduled_end_time: The sheduled_end_time of this MoEngageNotificationRequestDto.  # noqa: E501
        :type: str
        """

        self._sheduled_end_time = sheduled_end_time

    @property
    def sheduled_start_time(self):
        """Gets the sheduled_start_time of this MoEngageNotificationRequestDto.  # noqa: E501


        :return: The sheduled_start_time of this MoEngageNotificationRequestDto.  # noqa: E501
        :rtype: str
        """
        return self._sheduled_start_time

    @sheduled_start_time.setter
    def sheduled_start_time(self, sheduled_start_time):
        """Sets the sheduled_start_time of this MoEngageNotificationRequestDto.


        :param sheduled_start_time: The sheduled_start_time of this MoEngageNotificationRequestDto.  # noqa: E501
        :type: str
        """

        self._sheduled_start_time = sheduled_start_time

    @property
    def story_id(self):
        """Gets the story_id of this MoEngageNotificationRequestDto.  # noqa: E501


        :return: The story_id of this MoEngageNotificationRequestDto.  # noqa: E501
        :rtype: str
        """
        return self._story_id

    @story_id.setter
    def story_id(self, story_id):
        """Sets the story_id of this MoEngageNotificationRequestDto.


        :param story_id: The story_id of this MoEngageNotificationRequestDto.  # noqa: E501
        :type: str
        """

        self._story_id = story_id

    @property
    def story_url(self):
        """Gets the story_url of this MoEngageNotificationRequestDto.  # noqa: E501


        :return: The story_url of this MoEngageNotificationRequestDto.  # noqa: E501
        :rtype: str
        """
        return self._story_url

    @story_url.setter
    def story_url(self, story_url):
        """Sets the story_url of this MoEngageNotificationRequestDto.


        :param story_url: The story_url of this MoEngageNotificationRequestDto.  # noqa: E501
        :type: str
        """

        self._story_url = story_url

    @property
    def tags(self):
        """Gets the tags of this MoEngageNotificationRequestDto.  # noqa: E501


        :return: The tags of this MoEngageNotificationRequestDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this MoEngageNotificationRequestDto.


        :param tags: The tags of this MoEngageNotificationRequestDto.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def title(self):
        """Gets the title of this MoEngageNotificationRequestDto.  # noqa: E501


        :return: The title of this MoEngageNotificationRequestDto.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this MoEngageNotificationRequestDto.


        :param title: The title of this MoEngageNotificationRequestDto.  # noqa: E501
        :type: str
        """

        self._title = title

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MoEngageNotificationRequestDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MoEngageNotificationRequestDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

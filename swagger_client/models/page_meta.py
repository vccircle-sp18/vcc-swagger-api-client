# coding: utf-8

"""
    CMS-Backend API

    This is API documentation of CMS-Backend  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: htdevteam@hindustantimes.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PageMeta(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'agency_by_line': 'list[str]',
        'authors': 'list[str]',
        'column': 'str',
        'dynamic_meta': 'list[DynamicConfiguration]',
        'edited_by': 'list[str]',
        'market_stock_id': 'str',
        'market_stock_name': 'str',
        'market_topic_page': 'bool',
        'preview_urls': 'dict(str, str)',
        'reported_by': 'list[str]',
        'revenue_special': 'bool',
        'section': 'str',
        'section_id': 'int',
        'section_url': 'str',
        'statuses': 'dict(str, int)',
        'sub_section': 'str',
        'sub_section_id': 'int',
        'sub_section_url': 'str',
        'templates': 'list[PageTemplate]',
        'types': 'dict(str, int)',
        'written_by': 'list[str]'
    }

    attribute_map = {
        'agency_by_line': 'agencyByLine',
        'authors': 'authors',
        'column': 'column',
        'dynamic_meta': 'dynamicMeta',
        'edited_by': 'editedBy',
        'market_stock_id': 'marketStockId',
        'market_stock_name': 'marketStockName',
        'market_topic_page': 'marketTopicPage',
        'preview_urls': 'previewUrls',
        'reported_by': 'reportedBy',
        'revenue_special': 'revenueSpecial',
        'section': 'section',
        'section_id': 'sectionId',
        'section_url': 'sectionUrl',
        'statuses': 'statuses',
        'sub_section': 'subSection',
        'sub_section_id': 'subSectionId',
        'sub_section_url': 'subSectionUrl',
        'templates': 'templates',
        'types': 'types',
        'written_by': 'writtenBy'
    }

    def __init__(self, agency_by_line=None, authors=None, column=None, dynamic_meta=None, edited_by=None, market_stock_id=None, market_stock_name=None, market_topic_page=None, preview_urls=None, reported_by=None, revenue_special=None, section=None, section_id=None, section_url=None, statuses=None, sub_section=None, sub_section_id=None, sub_section_url=None, templates=None, types=None, written_by=None):  # noqa: E501
        """PageMeta - a model defined in Swagger"""  # noqa: E501
        self._agency_by_line = None
        self._authors = None
        self._column = None
        self._dynamic_meta = None
        self._edited_by = None
        self._market_stock_id = None
        self._market_stock_name = None
        self._market_topic_page = None
        self._preview_urls = None
        self._reported_by = None
        self._revenue_special = None
        self._section = None
        self._section_id = None
        self._section_url = None
        self._statuses = None
        self._sub_section = None
        self._sub_section_id = None
        self._sub_section_url = None
        self._templates = None
        self._types = None
        self._written_by = None
        self.discriminator = None
        if agency_by_line is not None:
            self.agency_by_line = agency_by_line
        if authors is not None:
            self.authors = authors
        if column is not None:
            self.column = column
        if dynamic_meta is not None:
            self.dynamic_meta = dynamic_meta
        if edited_by is not None:
            self.edited_by = edited_by
        if market_stock_id is not None:
            self.market_stock_id = market_stock_id
        if market_stock_name is not None:
            self.market_stock_name = market_stock_name
        if market_topic_page is not None:
            self.market_topic_page = market_topic_page
        if preview_urls is not None:
            self.preview_urls = preview_urls
        if reported_by is not None:
            self.reported_by = reported_by
        if revenue_special is not None:
            self.revenue_special = revenue_special
        if section is not None:
            self.section = section
        if section_id is not None:
            self.section_id = section_id
        if section_url is not None:
            self.section_url = section_url
        if statuses is not None:
            self.statuses = statuses
        if sub_section is not None:
            self.sub_section = sub_section
        if sub_section_id is not None:
            self.sub_section_id = sub_section_id
        if sub_section_url is not None:
            self.sub_section_url = sub_section_url
        if templates is not None:
            self.templates = templates
        if types is not None:
            self.types = types
        if written_by is not None:
            self.written_by = written_by

    @property
    def agency_by_line(self):
        """Gets the agency_by_line of this PageMeta.  # noqa: E501


        :return: The agency_by_line of this PageMeta.  # noqa: E501
        :rtype: list[str]
        """
        return self._agency_by_line

    @agency_by_line.setter
    def agency_by_line(self, agency_by_line):
        """Sets the agency_by_line of this PageMeta.


        :param agency_by_line: The agency_by_line of this PageMeta.  # noqa: E501
        :type: list[str]
        """

        self._agency_by_line = agency_by_line

    @property
    def authors(self):
        """Gets the authors of this PageMeta.  # noqa: E501


        :return: The authors of this PageMeta.  # noqa: E501
        :rtype: list[str]
        """
        return self._authors

    @authors.setter
    def authors(self, authors):
        """Sets the authors of this PageMeta.


        :param authors: The authors of this PageMeta.  # noqa: E501
        :type: list[str]
        """

        self._authors = authors

    @property
    def column(self):
        """Gets the column of this PageMeta.  # noqa: E501


        :return: The column of this PageMeta.  # noqa: E501
        :rtype: str
        """
        return self._column

    @column.setter
    def column(self, column):
        """Sets the column of this PageMeta.


        :param column: The column of this PageMeta.  # noqa: E501
        :type: str
        """

        self._column = column

    @property
    def dynamic_meta(self):
        """Gets the dynamic_meta of this PageMeta.  # noqa: E501


        :return: The dynamic_meta of this PageMeta.  # noqa: E501
        :rtype: list[DynamicConfiguration]
        """
        return self._dynamic_meta

    @dynamic_meta.setter
    def dynamic_meta(self, dynamic_meta):
        """Sets the dynamic_meta of this PageMeta.


        :param dynamic_meta: The dynamic_meta of this PageMeta.  # noqa: E501
        :type: list[DynamicConfiguration]
        """

        self._dynamic_meta = dynamic_meta

    @property
    def edited_by(self):
        """Gets the edited_by of this PageMeta.  # noqa: E501


        :return: The edited_by of this PageMeta.  # noqa: E501
        :rtype: list[str]
        """
        return self._edited_by

    @edited_by.setter
    def edited_by(self, edited_by):
        """Sets the edited_by of this PageMeta.


        :param edited_by: The edited_by of this PageMeta.  # noqa: E501
        :type: list[str]
        """

        self._edited_by = edited_by

    @property
    def market_stock_id(self):
        """Gets the market_stock_id of this PageMeta.  # noqa: E501


        :return: The market_stock_id of this PageMeta.  # noqa: E501
        :rtype: str
        """
        return self._market_stock_id

    @market_stock_id.setter
    def market_stock_id(self, market_stock_id):
        """Sets the market_stock_id of this PageMeta.


        :param market_stock_id: The market_stock_id of this PageMeta.  # noqa: E501
        :type: str
        """

        self._market_stock_id = market_stock_id

    @property
    def market_stock_name(self):
        """Gets the market_stock_name of this PageMeta.  # noqa: E501


        :return: The market_stock_name of this PageMeta.  # noqa: E501
        :rtype: str
        """
        return self._market_stock_name

    @market_stock_name.setter
    def market_stock_name(self, market_stock_name):
        """Sets the market_stock_name of this PageMeta.


        :param market_stock_name: The market_stock_name of this PageMeta.  # noqa: E501
        :type: str
        """

        self._market_stock_name = market_stock_name

    @property
    def market_topic_page(self):
        """Gets the market_topic_page of this PageMeta.  # noqa: E501


        :return: The market_topic_page of this PageMeta.  # noqa: E501
        :rtype: bool
        """
        return self._market_topic_page

    @market_topic_page.setter
    def market_topic_page(self, market_topic_page):
        """Sets the market_topic_page of this PageMeta.


        :param market_topic_page: The market_topic_page of this PageMeta.  # noqa: E501
        :type: bool
        """

        self._market_topic_page = market_topic_page

    @property
    def preview_urls(self):
        """Gets the preview_urls of this PageMeta.  # noqa: E501


        :return: The preview_urls of this PageMeta.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._preview_urls

    @preview_urls.setter
    def preview_urls(self, preview_urls):
        """Sets the preview_urls of this PageMeta.


        :param preview_urls: The preview_urls of this PageMeta.  # noqa: E501
        :type: dict(str, str)
        """

        self._preview_urls = preview_urls

    @property
    def reported_by(self):
        """Gets the reported_by of this PageMeta.  # noqa: E501


        :return: The reported_by of this PageMeta.  # noqa: E501
        :rtype: list[str]
        """
        return self._reported_by

    @reported_by.setter
    def reported_by(self, reported_by):
        """Sets the reported_by of this PageMeta.


        :param reported_by: The reported_by of this PageMeta.  # noqa: E501
        :type: list[str]
        """

        self._reported_by = reported_by

    @property
    def revenue_special(self):
        """Gets the revenue_special of this PageMeta.  # noqa: E501


        :return: The revenue_special of this PageMeta.  # noqa: E501
        :rtype: bool
        """
        return self._revenue_special

    @revenue_special.setter
    def revenue_special(self, revenue_special):
        """Sets the revenue_special of this PageMeta.


        :param revenue_special: The revenue_special of this PageMeta.  # noqa: E501
        :type: bool
        """

        self._revenue_special = revenue_special

    @property
    def section(self):
        """Gets the section of this PageMeta.  # noqa: E501


        :return: The section of this PageMeta.  # noqa: E501
        :rtype: str
        """
        return self._section

    @section.setter
    def section(self, section):
        """Sets the section of this PageMeta.


        :param section: The section of this PageMeta.  # noqa: E501
        :type: str
        """

        self._section = section

    @property
    def section_id(self):
        """Gets the section_id of this PageMeta.  # noqa: E501


        :return: The section_id of this PageMeta.  # noqa: E501
        :rtype: int
        """
        return self._section_id

    @section_id.setter
    def section_id(self, section_id):
        """Sets the section_id of this PageMeta.


        :param section_id: The section_id of this PageMeta.  # noqa: E501
        :type: int
        """

        self._section_id = section_id

    @property
    def section_url(self):
        """Gets the section_url of this PageMeta.  # noqa: E501


        :return: The section_url of this PageMeta.  # noqa: E501
        :rtype: str
        """
        return self._section_url

    @section_url.setter
    def section_url(self, section_url):
        """Sets the section_url of this PageMeta.


        :param section_url: The section_url of this PageMeta.  # noqa: E501
        :type: str
        """

        self._section_url = section_url

    @property
    def statuses(self):
        """Gets the statuses of this PageMeta.  # noqa: E501


        :return: The statuses of this PageMeta.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._statuses

    @statuses.setter
    def statuses(self, statuses):
        """Sets the statuses of this PageMeta.


        :param statuses: The statuses of this PageMeta.  # noqa: E501
        :type: dict(str, int)
        """

        self._statuses = statuses

    @property
    def sub_section(self):
        """Gets the sub_section of this PageMeta.  # noqa: E501


        :return: The sub_section of this PageMeta.  # noqa: E501
        :rtype: str
        """
        return self._sub_section

    @sub_section.setter
    def sub_section(self, sub_section):
        """Sets the sub_section of this PageMeta.


        :param sub_section: The sub_section of this PageMeta.  # noqa: E501
        :type: str
        """

        self._sub_section = sub_section

    @property
    def sub_section_id(self):
        """Gets the sub_section_id of this PageMeta.  # noqa: E501


        :return: The sub_section_id of this PageMeta.  # noqa: E501
        :rtype: int
        """
        return self._sub_section_id

    @sub_section_id.setter
    def sub_section_id(self, sub_section_id):
        """Sets the sub_section_id of this PageMeta.


        :param sub_section_id: The sub_section_id of this PageMeta.  # noqa: E501
        :type: int
        """

        self._sub_section_id = sub_section_id

    @property
    def sub_section_url(self):
        """Gets the sub_section_url of this PageMeta.  # noqa: E501


        :return: The sub_section_url of this PageMeta.  # noqa: E501
        :rtype: str
        """
        return self._sub_section_url

    @sub_section_url.setter
    def sub_section_url(self, sub_section_url):
        """Sets the sub_section_url of this PageMeta.


        :param sub_section_url: The sub_section_url of this PageMeta.  # noqa: E501
        :type: str
        """

        self._sub_section_url = sub_section_url

    @property
    def templates(self):
        """Gets the templates of this PageMeta.  # noqa: E501


        :return: The templates of this PageMeta.  # noqa: E501
        :rtype: list[PageTemplate]
        """
        return self._templates

    @templates.setter
    def templates(self, templates):
        """Sets the templates of this PageMeta.


        :param templates: The templates of this PageMeta.  # noqa: E501
        :type: list[PageTemplate]
        """

        self._templates = templates

    @property
    def types(self):
        """Gets the types of this PageMeta.  # noqa: E501


        :return: The types of this PageMeta.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._types

    @types.setter
    def types(self, types):
        """Sets the types of this PageMeta.


        :param types: The types of this PageMeta.  # noqa: E501
        :type: dict(str, int)
        """

        self._types = types

    @property
    def written_by(self):
        """Gets the written_by of this PageMeta.  # noqa: E501


        :return: The written_by of this PageMeta.  # noqa: E501
        :rtype: list[str]
        """
        return self._written_by

    @written_by.setter
    def written_by(self, written_by):
        """Sets the written_by of this PageMeta.


        :param written_by: The written_by of this PageMeta.  # noqa: E501
        :type: list[str]
        """

        self._written_by = written_by

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PageMeta, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PageMeta):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    CMS-Backend API

    This is API documentation of CMS-Backend  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: htdevteam@hindustantimes.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PageCompact(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'alias': 'str',
        'css_html_class': 'str',
        'design': 'str',
        'domain_id': 'str',
        'dynamic_meta': 'list[DynamicConfiguration]',
        'external_url': 'str',
        'id': 'int',
        'name': 'str',
        'page_type': 'str',
        'title': 'str',
        'url': 'str'
    }

    attribute_map = {
        'alias': 'alias',
        'css_html_class': 'cssHTMLClass',
        'design': 'design',
        'domain_id': 'domainId',
        'dynamic_meta': 'dynamicMeta',
        'external_url': 'externalUrl',
        'id': 'id',
        'name': 'name',
        'page_type': 'pageType',
        'title': 'title',
        'url': 'url'
    }

    def __init__(self, alias=None, css_html_class=None, design=None, domain_id=None, dynamic_meta=None, external_url=None, id=None, name=None, page_type=None, title=None, url=None):  # noqa: E501
        """PageCompact - a model defined in Swagger"""  # noqa: E501
        self._alias = None
        self._css_html_class = None
        self._design = None
        self._domain_id = None
        self._dynamic_meta = None
        self._external_url = None
        self._id = None
        self._name = None
        self._page_type = None
        self._title = None
        self._url = None
        self.discriminator = None
        if alias is not None:
            self.alias = alias
        if css_html_class is not None:
            self.css_html_class = css_html_class
        if design is not None:
            self.design = design
        if domain_id is not None:
            self.domain_id = domain_id
        if dynamic_meta is not None:
            self.dynamic_meta = dynamic_meta
        if external_url is not None:
            self.external_url = external_url
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if page_type is not None:
            self.page_type = page_type
        if title is not None:
            self.title = title
        if url is not None:
            self.url = url

    @property
    def alias(self):
        """Gets the alias of this PageCompact.  # noqa: E501


        :return: The alias of this PageCompact.  # noqa: E501
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this PageCompact.


        :param alias: The alias of this PageCompact.  # noqa: E501
        :type: str
        """

        self._alias = alias

    @property
    def css_html_class(self):
        """Gets the css_html_class of this PageCompact.  # noqa: E501


        :return: The css_html_class of this PageCompact.  # noqa: E501
        :rtype: str
        """
        return self._css_html_class

    @css_html_class.setter
    def css_html_class(self, css_html_class):
        """Sets the css_html_class of this PageCompact.


        :param css_html_class: The css_html_class of this PageCompact.  # noqa: E501
        :type: str
        """

        self._css_html_class = css_html_class

    @property
    def design(self):
        """Gets the design of this PageCompact.  # noqa: E501


        :return: The design of this PageCompact.  # noqa: E501
        :rtype: str
        """
        return self._design

    @design.setter
    def design(self, design):
        """Sets the design of this PageCompact.


        :param design: The design of this PageCompact.  # noqa: E501
        :type: str
        """

        self._design = design

    @property
    def domain_id(self):
        """Gets the domain_id of this PageCompact.  # noqa: E501


        :return: The domain_id of this PageCompact.  # noqa: E501
        :rtype: str
        """
        return self._domain_id

    @domain_id.setter
    def domain_id(self, domain_id):
        """Sets the domain_id of this PageCompact.


        :param domain_id: The domain_id of this PageCompact.  # noqa: E501
        :type: str
        """

        self._domain_id = domain_id

    @property
    def dynamic_meta(self):
        """Gets the dynamic_meta of this PageCompact.  # noqa: E501


        :return: The dynamic_meta of this PageCompact.  # noqa: E501
        :rtype: list[DynamicConfiguration]
        """
        return self._dynamic_meta

    @dynamic_meta.setter
    def dynamic_meta(self, dynamic_meta):
        """Sets the dynamic_meta of this PageCompact.


        :param dynamic_meta: The dynamic_meta of this PageCompact.  # noqa: E501
        :type: list[DynamicConfiguration]
        """

        self._dynamic_meta = dynamic_meta

    @property
    def external_url(self):
        """Gets the external_url of this PageCompact.  # noqa: E501


        :return: The external_url of this PageCompact.  # noqa: E501
        :rtype: str
        """
        return self._external_url

    @external_url.setter
    def external_url(self, external_url):
        """Sets the external_url of this PageCompact.


        :param external_url: The external_url of this PageCompact.  # noqa: E501
        :type: str
        """

        self._external_url = external_url

    @property
    def id(self):
        """Gets the id of this PageCompact.  # noqa: E501


        :return: The id of this PageCompact.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PageCompact.


        :param id: The id of this PageCompact.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this PageCompact.  # noqa: E501


        :return: The name of this PageCompact.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PageCompact.


        :param name: The name of this PageCompact.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def page_type(self):
        """Gets the page_type of this PageCompact.  # noqa: E501


        :return: The page_type of this PageCompact.  # noqa: E501
        :rtype: str
        """
        return self._page_type

    @page_type.setter
    def page_type(self, page_type):
        """Sets the page_type of this PageCompact.


        :param page_type: The page_type of this PageCompact.  # noqa: E501
        :type: str
        """
        allowed_values = ["PRIMARY", "TOPIC", "SECTION", "SUBSECTION", "SUBSECTION_L2", "AGENCY", "EXTERNAL"]  # noqa: E501
        if page_type not in allowed_values:
            raise ValueError(
                "Invalid value for `page_type` ({0}), must be one of {1}"  # noqa: E501
                .format(page_type, allowed_values)
            )

        self._page_type = page_type

    @property
    def title(self):
        """Gets the title of this PageCompact.  # noqa: E501


        :return: The title of this PageCompact.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this PageCompact.


        :param title: The title of this PageCompact.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def url(self):
        """Gets the url of this PageCompact.  # noqa: E501


        :return: The url of this PageCompact.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this PageCompact.


        :param url: The url of this PageCompact.  # noqa: E501
        :type: str
        """

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PageCompact, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PageCompact):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    CMS-Backend API

    This is API documentation of CMS-Backend  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: htdevteam@hindustantimes.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Metadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'affiliate_disclaimer': 'str',
        'agency': 'str',
        'agency_by_line': 'list[str]',
        'agency_id': 'int',
        'alternate_section': 'list[AlternateSection]',
        'alternate_urls': 'list[str]',
        'amp': 'bool',
        'amp_status': 'str',
        'app': 'bool',
        'attribution': 'str',
        'audience_tags': 'str',
        'audio_source_url': 'str',
        'authors': 'list[str]',
        'authors_list': 'list[UserData]',
        'auto_back_link_count': 'int',
        'auto_back_linked': 'bool',
        'auto_keywords': 'list[str]',
        'autobacklink_list': 'list[AutoBacklinkResponse]',
        'big_story': 'bool',
        'blog_disclaimer': 'str',
        'blog_disclaimer_flag': 'bool',
        'brand': 'str',
        'breaking_news': 'bool',
        'breaking_news_id': 'str',
        'canonical_url': 'str',
        'category': 'str',
        'char_count': 'int',
        'collection_type': 'str',
        'column': 'str',
        'copy_from_headline': 'bool',
        'count': 'int',
        'css_html_class': 'str',
        'dead_link': 'str',
        'dead_link_url': 'str',
        'delete_mode': 'str',
        'design': 'str',
        'developing': 'bool',
        'disclaimer': 'str',
        'duplicate_story_publish_alert': 'str',
        'dynamic_meta': 'list[DynamicConfiguration]',
        'edited_by': 'list[str]',
        'edited_by_list': 'list[UserData]',
        'eidos_author': 'str',
        'eidos_org_author_id': 'str',
        'eidos_org_author_name': 'str',
        'exclusive': 'bool',
        'external_url': 'str',
        'fact_check': 'bool',
        'ftp_file_path': 'str',
        'geo_locations': 'dict(str, list[str])',
        'handpicked': 'bool',
        'home_page_article': 'bool',
        'home_page_end_time': 'str',
        'home_page_position': 'int',
        'ignore_auto_quick_reads': 'bool',
        'in_depth': 'bool',
        'interview': 'bool',
        'json_source_url': 'str',
        'keywords': 'list[str]',
        'keywords_map': 'dict(str, str)',
        'killed': 'bool',
        'killed_status_code': 'int',
        'latest': 'bool',
        'live': 'bool',
        'location': 'list[str]',
        'mark_unimportant': 'bool',
        'meta_description': 'str',
        'meta_title': 'str',
        'methode_file_name': 'str',
        'model': 'str',
        'name': 'str',
        'notification_sent': 'bool',
        'old_headline': 'str',
        'old_meta_description': 'str',
        'old_meta_title': 'str',
        'old_summary': 'str',
        'old_url': 'str',
        'old_author': 'str',
        'opinion': 'bool',
        'outdated_check': 'bool',
        'outdated_time': 'str',
        'para_content_changed': 'bool',
        'plagiarised_content': 'int',
        'plagiarism_checked': 'bool',
        'posted_by': 'list[str]',
        'posted_by_list': 'list[UserData]',
        'premium_from_date': 'str',
        'premium_notification': 'bool',
        'premium_story': 'bool',
        'premium_story_days': 'int',
        'premium_to_date': 'str',
        'primary_location': 'str',
        'recosense_keywords': 'list[str]',
        'redirect_url': 'str',
        'reported_by': 'list[str]',
        'reported_by_list': 'list[UserData]',
        'secondary_brands': 'list[SecondaryBrands]',
        'secondary_sections': 'list[SecondarySections]',
        'section': 'str',
        'section_display_name': 'str',
        'section_id': 'int',
        'section_specific_default_tags': 'list[str]',
        'section_url': 'str',
        'sentence_count': 'int',
        'seo_url': 'str',
        'sponsored': 'bool',
        'sponsored_title': 'str',
        'status': 'str',
        'story_type': 'str',
        'sub_section': 'str',
        'sub_section_id': 'int',
        'sub_section_l2': 'str',
        'sub_section_l2_id': 'int',
        'sub_section_url': 'str',
        'syllable_count': 'int',
        'syndication_feed': 'bool',
        'tags': 'list[str]',
        'time_taken_to_publish': 'str',
        'topic': 'list[str]',
        'topic_ids': 'list[int]',
        'topic_name': 'list[str]',
        'topic_urls': 'list[str]',
        'total_link_count': 'int',
        'url': 'str',
        'video_metadata': 'VideoMetadata',
        'web': 'bool',
        'word_count': 'int',
        'work_folder': 'str',
        'written_by': 'list[str]',
        'written_by_list': 'list[UserData]',
        'yt_migrated': 'bool'
    }

    attribute_map = {
        'affiliate_disclaimer': 'affiliateDisclaimer',
        'agency': 'agency',
        'agency_by_line': 'agencyByLine',
        'agency_id': 'agencyId',
        'alternate_section': 'alternateSection',
        'alternate_urls': 'alternateUrls',
        'amp': 'amp',
        'amp_status': 'ampStatus',
        'app': 'app',
        'attribution': 'attribution',
        'audience_tags': 'audienceTags',
        'audio_source_url': 'audioSourceUrl',
        'authors': 'authors',
        'authors_list': 'authorsList',
        'auto_back_link_count': 'autoBackLinkCount',
        'auto_back_linked': 'autoBackLinked',
        'auto_keywords': 'autoKeywords',
        'autobacklink_list': 'autobacklinkList',
        'big_story': 'bigStory',
        'blog_disclaimer': 'blogDisclaimer',
        'blog_disclaimer_flag': 'blogDisclaimerFlag',
        'brand': 'brand',
        'breaking_news': 'breakingNews',
        'breaking_news_id': 'breakingNewsId',
        'canonical_url': 'canonicalUrl',
        'category': 'category',
        'char_count': 'charCount',
        'collection_type': 'collectionType',
        'column': 'column',
        'copy_from_headline': 'copyFromHeadline',
        'count': 'count',
        'css_html_class': 'cssHTMLClass',
        'dead_link': 'deadLink',
        'dead_link_url': 'deadLinkUrl',
        'delete_mode': 'deleteMode',
        'design': 'design',
        'developing': 'developing',
        'disclaimer': 'disclaimer',
        'duplicate_story_publish_alert': 'duplicateStoryPublishAlert',
        'dynamic_meta': 'dynamicMeta',
        'edited_by': 'editedBy',
        'edited_by_list': 'editedByList',
        'eidos_author': 'eidosAuthor',
        'eidos_org_author_id': 'eidosOrgAuthorId',
        'eidos_org_author_name': 'eidosOrgAuthorName',
        'exclusive': 'exclusive',
        'external_url': 'externalUrl',
        'fact_check': 'factCheck',
        'ftp_file_path': 'ftpFilePath',
        'geo_locations': 'geoLocations',
        'handpicked': 'handpicked',
        'home_page_article': 'homePageArticle',
        'home_page_end_time': 'homePageEndTime',
        'home_page_position': 'homePagePosition',
        'ignore_auto_quick_reads': 'ignoreAutoQuickReads',
        'in_depth': 'inDepth',
        'interview': 'interview',
        'json_source_url': 'jsonSourceUrl',
        'keywords': 'keywords',
        'keywords_map': 'keywordsMap',
        'killed': 'killed',
        'killed_status_code': 'killedStatusCode',
        'latest': 'latest',
        'live': 'live',
        'location': 'location',
        'mark_unimportant': 'markUnimportant',
        'meta_description': 'metaDescription',
        'meta_title': 'metaTitle',
        'methode_file_name': 'methodeFileName',
        'model': 'model',
        'name': 'name',
        'notification_sent': 'notificationSent',
        'old_headline': 'oldHeadline',
        'old_meta_description': 'oldMetaDescription',
        'old_meta_title': 'oldMetaTitle',
        'old_summary': 'oldSummary',
        'old_url': 'oldUrl',
        'old_author': 'old_author',
        'opinion': 'opinion',
        'outdated_check': 'outdatedCheck',
        'outdated_time': 'outdatedTime',
        'para_content_changed': 'paraContentChanged',
        'plagiarised_content': 'plagiarisedContent',
        'plagiarism_checked': 'plagiarismChecked',
        'posted_by': 'postedBy',
        'posted_by_list': 'postedByList',
        'premium_from_date': 'premiumFromDate',
        'premium_notification': 'premiumNotification',
        'premium_story': 'premiumStory',
        'premium_story_days': 'premiumStoryDays',
        'premium_to_date': 'premiumToDate',
        'primary_location': 'primaryLocation',
        'recosense_keywords': 'recosenseKeywords',
        'redirect_url': 'redirectUrl',
        'reported_by': 'reportedBy',
        'reported_by_list': 'reportedByList',
        'secondary_brands': 'secondaryBrands',
        'secondary_sections': 'secondarySections',
        'section': 'section',
        'section_display_name': 'sectionDisplayName',
        'section_id': 'sectionId',
        'section_specific_default_tags': 'sectionSpecificDefaultTags',
        'section_url': 'sectionUrl',
        'sentence_count': 'sentenceCount',
        'seo_url': 'seoUrl',
        'sponsored': 'sponsored',
        'sponsored_title': 'sponsoredTitle',
        'status': 'status',
        'story_type': 'storyType',
        'sub_section': 'subSection',
        'sub_section_id': 'subSectionId',
        'sub_section_l2': 'subSectionL2',
        'sub_section_l2_id': 'subSectionL2Id',
        'sub_section_url': 'subSectionUrl',
        'syllable_count': 'syllableCount',
        'syndication_feed': 'syndicationFeed',
        'tags': 'tags',
        'time_taken_to_publish': 'timeTakenToPublish',
        'topic': 'topic',
        'topic_ids': 'topicIds',
        'topic_name': 'topicName',
        'topic_urls': 'topicUrls',
        'total_link_count': 'totalLinkCount',
        'url': 'url',
        'video_metadata': 'videoMetadata',
        'web': 'web',
        'word_count': 'wordCount',
        'work_folder': 'workFolder',
        'written_by': 'writtenBy',
        'written_by_list': 'writtenByList',
        'yt_migrated': 'ytMigrated'
    }

    def __init__(self, affiliate_disclaimer=None, agency=None, agency_by_line=None, agency_id=None, alternate_section=None, alternate_urls=None, amp=None, amp_status=None, app=None, attribution=None, audience_tags=None, audio_source_url=None, authors=None, authors_list=None, auto_back_link_count=None, auto_back_linked=None, auto_keywords=None, autobacklink_list=None, big_story=None, blog_disclaimer=None, blog_disclaimer_flag=None, brand=None, breaking_news=None, breaking_news_id=None, canonical_url=None, category=None, char_count=None, collection_type=None, column=None, copy_from_headline=None, count=None, css_html_class=None, dead_link=None, dead_link_url=None, delete_mode=None, design=None, developing=None, disclaimer=None, duplicate_story_publish_alert=None, dynamic_meta=None, edited_by=None, edited_by_list=None, eidos_author=None, eidos_org_author_id=None, eidos_org_author_name=None, exclusive=None, external_url=None, fact_check=None, ftp_file_path=None, geo_locations=None, handpicked=None, home_page_article=None, home_page_end_time=None, home_page_position=None, ignore_auto_quick_reads=None, in_depth=None, interview=None, json_source_url=None, keywords=None, keywords_map=None, killed=None, killed_status_code=None, latest=None, live=None, location=None, mark_unimportant=None, meta_description=None, meta_title=None, methode_file_name=None, model=None, name=None, notification_sent=None, old_headline=None, old_meta_description=None, old_meta_title=None, old_summary=None, old_url=None, old_author=None, opinion=None, outdated_check=None, outdated_time=None, para_content_changed=None, plagiarised_content=None, plagiarism_checked=None, posted_by=None, posted_by_list=None, premium_from_date=None, premium_notification=None, premium_story=None, premium_story_days=None, premium_to_date=None, primary_location=None, recosense_keywords=None, redirect_url=None, reported_by=None, reported_by_list=None, secondary_brands=None, secondary_sections=None, section=None, section_display_name=None, section_id=None, section_specific_default_tags=None, section_url=None, sentence_count=None, seo_url=None, sponsored=None, sponsored_title=None, status=None, story_type=None, sub_section=None, sub_section_id=None, sub_section_l2=None, sub_section_l2_id=None, sub_section_url=None, syllable_count=None, syndication_feed=None, tags=None, time_taken_to_publish=None, topic=None, topic_ids=None, topic_name=None, topic_urls=None, total_link_count=None, url=None, video_metadata=None, web=None, word_count=None, work_folder=None, written_by=None, written_by_list=None, yt_migrated=None):  # noqa: E501
        """Metadata - a model defined in Swagger"""  # noqa: E501
        self._affiliate_disclaimer = None
        self._agency = None
        self._agency_by_line = None
        self._agency_id = None
        self._alternate_section = None
        self._alternate_urls = None
        self._amp = None
        self._amp_status = None
        self._app = None
        self._attribution = None
        self._audience_tags = None
        self._audio_source_url = None
        self._authors = None
        self._authors_list = None
        self._auto_back_link_count = None
        self._auto_back_linked = None
        self._auto_keywords = None
        self._autobacklink_list = None
        self._big_story = None
        self._blog_disclaimer = None
        self._blog_disclaimer_flag = None
        self._brand = None
        self._breaking_news = None
        self._breaking_news_id = None
        self._canonical_url = None
        self._category = None
        self._char_count = None
        self._collection_type = None
        self._column = None
        self._copy_from_headline = None
        self._count = None
        self._css_html_class = None
        self._dead_link = None
        self._dead_link_url = None
        self._delete_mode = None
        self._design = None
        self._developing = None
        self._disclaimer = None
        self._duplicate_story_publish_alert = None
        self._dynamic_meta = None
        self._edited_by = None
        self._edited_by_list = None
        self._eidos_author = None
        self._eidos_org_author_id = None
        self._eidos_org_author_name = None
        self._exclusive = None
        self._external_url = None
        self._fact_check = None
        self._ftp_file_path = None
        self._geo_locations = None
        self._handpicked = None
        self._home_page_article = None
        self._home_page_end_time = None
        self._home_page_position = None
        self._ignore_auto_quick_reads = None
        self._in_depth = None
        self._interview = None
        self._json_source_url = None
        self._keywords = None
        self._keywords_map = None
        self._killed = None
        self._killed_status_code = None
        self._latest = None
        self._live = None
        self._location = None
        self._mark_unimportant = None
        self._meta_description = None
        self._meta_title = None
        self._methode_file_name = None
        self._model = None
        self._name = None
        self._notification_sent = None
        self._old_headline = None
        self._old_meta_description = None
        self._old_meta_title = None
        self._old_summary = None
        self._old_url = None
        self._old_author = None
        self._opinion = None
        self._outdated_check = None
        self._outdated_time = None
        self._para_content_changed = None
        self._plagiarised_content = None
        self._plagiarism_checked = None
        self._posted_by = None
        self._posted_by_list = None
        self._premium_from_date = None
        self._premium_notification = None
        self._premium_story = None
        self._premium_story_days = None
        self._premium_to_date = None
        self._primary_location = None
        self._recosense_keywords = None
        self._redirect_url = None
        self._reported_by = None
        self._reported_by_list = None
        self._secondary_brands = None
        self._secondary_sections = None
        self._section = None
        self._section_display_name = None
        self._section_id = None
        self._section_specific_default_tags = None
        self._section_url = None
        self._sentence_count = None
        self._seo_url = None
        self._sponsored = None
        self._sponsored_title = None
        self._status = None
        self._story_type = None
        self._sub_section = None
        self._sub_section_id = None
        self._sub_section_l2 = None
        self._sub_section_l2_id = None
        self._sub_section_url = None
        self._syllable_count = None
        self._syndication_feed = None
        self._tags = None
        self._time_taken_to_publish = None
        self._topic = None
        self._topic_ids = None
        self._topic_name = None
        self._topic_urls = None
        self._total_link_count = None
        self._url = None
        self._video_metadata = None
        self._web = None
        self._word_count = None
        self._work_folder = None
        self._written_by = None
        self._written_by_list = None
        self._yt_migrated = None
        self.discriminator = None
        if affiliate_disclaimer is not None:
            self.affiliate_disclaimer = affiliate_disclaimer
        if agency is not None:
            self.agency = agency
        if agency_by_line is not None:
            self.agency_by_line = agency_by_line
        if agency_id is not None:
            self.agency_id = agency_id
        if alternate_section is not None:
            self.alternate_section = alternate_section
        if alternate_urls is not None:
            self.alternate_urls = alternate_urls
        if amp is not None:
            self.amp = amp
        if amp_status is not None:
            self.amp_status = amp_status
        if app is not None:
            self.app = app
        if attribution is not None:
            self.attribution = attribution
        if audience_tags is not None:
            self.audience_tags = audience_tags
        if audio_source_url is not None:
            self.audio_source_url = audio_source_url
        if authors is not None:
            self.authors = authors
        if authors_list is not None:
            self.authors_list = authors_list
        if auto_back_link_count is not None:
            self.auto_back_link_count = auto_back_link_count
        if auto_back_linked is not None:
            self.auto_back_linked = auto_back_linked
        if auto_keywords is not None:
            self.auto_keywords = auto_keywords
        if autobacklink_list is not None:
            self.autobacklink_list = autobacklink_list
        if big_story is not None:
            self.big_story = big_story
        if blog_disclaimer is not None:
            self.blog_disclaimer = blog_disclaimer
        if blog_disclaimer_flag is not None:
            self.blog_disclaimer_flag = blog_disclaimer_flag
        if brand is not None:
            self.brand = brand
        if breaking_news is not None:
            self.breaking_news = breaking_news
        if breaking_news_id is not None:
            self.breaking_news_id = breaking_news_id
        if canonical_url is not None:
            self.canonical_url = canonical_url
        if category is not None:
            self.category = category
        if char_count is not None:
            self.char_count = char_count
        if collection_type is not None:
            self.collection_type = collection_type
        if column is not None:
            self.column = column
        if copy_from_headline is not None:
            self.copy_from_headline = copy_from_headline
        if count is not None:
            self.count = count
        if css_html_class is not None:
            self.css_html_class = css_html_class
        if dead_link is not None:
            self.dead_link = dead_link
        if dead_link_url is not None:
            self.dead_link_url = dead_link_url
        if delete_mode is not None:
            self.delete_mode = delete_mode
        if design is not None:
            self.design = design
        if developing is not None:
            self.developing = developing
        if disclaimer is not None:
            self.disclaimer = disclaimer
        if duplicate_story_publish_alert is not None:
            self.duplicate_story_publish_alert = duplicate_story_publish_alert
        if dynamic_meta is not None:
            self.dynamic_meta = dynamic_meta
        if edited_by is not None:
            self.edited_by = edited_by
        if edited_by_list is not None:
            self.edited_by_list = edited_by_list
        if eidos_author is not None:
            self.eidos_author = eidos_author
        if eidos_org_author_id is not None:
            self.eidos_org_author_id = eidos_org_author_id
        if eidos_org_author_name is not None:
            self.eidos_org_author_name = eidos_org_author_name
        if exclusive is not None:
            self.exclusive = exclusive
        if external_url is not None:
            self.external_url = external_url
        if fact_check is not None:
            self.fact_check = fact_check
        if ftp_file_path is not None:
            self.ftp_file_path = ftp_file_path
        if geo_locations is not None:
            self.geo_locations = geo_locations
        if handpicked is not None:
            self.handpicked = handpicked
        if home_page_article is not None:
            self.home_page_article = home_page_article
        if home_page_end_time is not None:
            self.home_page_end_time = home_page_end_time
        if home_page_position is not None:
            self.home_page_position = home_page_position
        if ignore_auto_quick_reads is not None:
            self.ignore_auto_quick_reads = ignore_auto_quick_reads
        if in_depth is not None:
            self.in_depth = in_depth
        if interview is not None:
            self.interview = interview
        if json_source_url is not None:
            self.json_source_url = json_source_url
        if keywords is not None:
            self.keywords = keywords
        if keywords_map is not None:
            self.keywords_map = keywords_map
        if killed is not None:
            self.killed = killed
        if killed_status_code is not None:
            self.killed_status_code = killed_status_code
        if latest is not None:
            self.latest = latest
        if live is not None:
            self.live = live
        if location is not None:
            self.location = location
        if mark_unimportant is not None:
            self.mark_unimportant = mark_unimportant
        if meta_description is not None:
            self.meta_description = meta_description
        if meta_title is not None:
            self.meta_title = meta_title
        if methode_file_name is not None:
            self.methode_file_name = methode_file_name
        if model is not None:
            self.model = model
        if name is not None:
            self.name = name
        if notification_sent is not None:
            self.notification_sent = notification_sent
        if old_headline is not None:
            self.old_headline = old_headline
        if old_meta_description is not None:
            self.old_meta_description = old_meta_description
        if old_meta_title is not None:
            self.old_meta_title = old_meta_title
        if old_summary is not None:
            self.old_summary = old_summary
        if old_url is not None:
            self.old_url = old_url
        if old_author is not None:
            self.old_author = old_author
        if opinion is not None:
            self.opinion = opinion
        if outdated_check is not None:
            self.outdated_check = outdated_check
        if outdated_time is not None:
            self.outdated_time = outdated_time
        if para_content_changed is not None:
            self.para_content_changed = para_content_changed
        if plagiarised_content is not None:
            self.plagiarised_content = plagiarised_content
        if plagiarism_checked is not None:
            self.plagiarism_checked = plagiarism_checked
        if posted_by is not None:
            self.posted_by = posted_by
        if posted_by_list is not None:
            self.posted_by_list = posted_by_list
        if premium_from_date is not None:
            self.premium_from_date = premium_from_date
        if premium_notification is not None:
            self.premium_notification = premium_notification
        if premium_story is not None:
            self.premium_story = premium_story
        if premium_story_days is not None:
            self.premium_story_days = premium_story_days
        if premium_to_date is not None:
            self.premium_to_date = premium_to_date
        if primary_location is not None:
            self.primary_location = primary_location
        if recosense_keywords is not None:
            self.recosense_keywords = recosense_keywords
        if redirect_url is not None:
            self.redirect_url = redirect_url
        if reported_by is not None:
            self.reported_by = reported_by
        if reported_by_list is not None:
            self.reported_by_list = reported_by_list
        if secondary_brands is not None:
            self.secondary_brands = secondary_brands
        if secondary_sections is not None:
            self.secondary_sections = secondary_sections
        if section is not None:
            self.section = section
        if section_display_name is not None:
            self.section_display_name = section_display_name
        if section_id is not None:
            self.section_id = section_id
        if section_specific_default_tags is not None:
            self.section_specific_default_tags = section_specific_default_tags
        if section_url is not None:
            self.section_url = section_url
        if sentence_count is not None:
            self.sentence_count = sentence_count
        if seo_url is not None:
            self.seo_url = seo_url
        if sponsored is not None:
            self.sponsored = sponsored
        if sponsored_title is not None:
            self.sponsored_title = sponsored_title
        if status is not None:
            self.status = status
        if story_type is not None:
            self.story_type = story_type
        if sub_section is not None:
            self.sub_section = sub_section
        if sub_section_id is not None:
            self.sub_section_id = sub_section_id
        if sub_section_l2 is not None:
            self.sub_section_l2 = sub_section_l2
        if sub_section_l2_id is not None:
            self.sub_section_l2_id = sub_section_l2_id
        if sub_section_url is not None:
            self.sub_section_url = sub_section_url
        if syllable_count is not None:
            self.syllable_count = syllable_count
        if syndication_feed is not None:
            self.syndication_feed = syndication_feed
        if tags is not None:
            self.tags = tags
        if time_taken_to_publish is not None:
            self.time_taken_to_publish = time_taken_to_publish
        if topic is not None:
            self.topic = topic
        if topic_ids is not None:
            self.topic_ids = topic_ids
        if topic_name is not None:
            self.topic_name = topic_name
        if topic_urls is not None:
            self.topic_urls = topic_urls
        if total_link_count is not None:
            self.total_link_count = total_link_count
        if url is not None:
            self.url = url
        if video_metadata is not None:
            self.video_metadata = video_metadata
        if web is not None:
            self.web = web
        if word_count is not None:
            self.word_count = word_count
        if work_folder is not None:
            self.work_folder = work_folder
        if written_by is not None:
            self.written_by = written_by
        if written_by_list is not None:
            self.written_by_list = written_by_list
        if yt_migrated is not None:
            self.yt_migrated = yt_migrated

    @property
    def affiliate_disclaimer(self):
        """Gets the affiliate_disclaimer of this Metadata.  # noqa: E501


        :return: The affiliate_disclaimer of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._affiliate_disclaimer

    @affiliate_disclaimer.setter
    def affiliate_disclaimer(self, affiliate_disclaimer):
        """Sets the affiliate_disclaimer of this Metadata.


        :param affiliate_disclaimer: The affiliate_disclaimer of this Metadata.  # noqa: E501
        :type: str
        """

        self._affiliate_disclaimer = affiliate_disclaimer

    @property
    def agency(self):
        """Gets the agency of this Metadata.  # noqa: E501


        :return: The agency of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._agency

    @agency.setter
    def agency(self, agency):
        """Sets the agency of this Metadata.


        :param agency: The agency of this Metadata.  # noqa: E501
        :type: str
        """

        self._agency = agency

    @property
    def agency_by_line(self):
        """Gets the agency_by_line of this Metadata.  # noqa: E501


        :return: The agency_by_line of this Metadata.  # noqa: E501
        :rtype: list[str]
        """
        return self._agency_by_line

    @agency_by_line.setter
    def agency_by_line(self, agency_by_line):
        """Sets the agency_by_line of this Metadata.


        :param agency_by_line: The agency_by_line of this Metadata.  # noqa: E501
        :type: list[str]
        """

        self._agency_by_line = agency_by_line

    @property
    def agency_id(self):
        """Gets the agency_id of this Metadata.  # noqa: E501


        :return: The agency_id of this Metadata.  # noqa: E501
        :rtype: int
        """
        return self._agency_id

    @agency_id.setter
    def agency_id(self, agency_id):
        """Sets the agency_id of this Metadata.


        :param agency_id: The agency_id of this Metadata.  # noqa: E501
        :type: int
        """

        self._agency_id = agency_id

    @property
    def alternate_section(self):
        """Gets the alternate_section of this Metadata.  # noqa: E501


        :return: The alternate_section of this Metadata.  # noqa: E501
        :rtype: list[AlternateSection]
        """
        return self._alternate_section

    @alternate_section.setter
    def alternate_section(self, alternate_section):
        """Sets the alternate_section of this Metadata.


        :param alternate_section: The alternate_section of this Metadata.  # noqa: E501
        :type: list[AlternateSection]
        """

        self._alternate_section = alternate_section

    @property
    def alternate_urls(self):
        """Gets the alternate_urls of this Metadata.  # noqa: E501


        :return: The alternate_urls of this Metadata.  # noqa: E501
        :rtype: list[str]
        """
        return self._alternate_urls

    @alternate_urls.setter
    def alternate_urls(self, alternate_urls):
        """Sets the alternate_urls of this Metadata.


        :param alternate_urls: The alternate_urls of this Metadata.  # noqa: E501
        :type: list[str]
        """

        self._alternate_urls = alternate_urls

    @property
    def amp(self):
        """Gets the amp of this Metadata.  # noqa: E501


        :return: The amp of this Metadata.  # noqa: E501
        :rtype: bool
        """
        return self._amp

    @amp.setter
    def amp(self, amp):
        """Sets the amp of this Metadata.


        :param amp: The amp of this Metadata.  # noqa: E501
        :type: bool
        """

        self._amp = amp

    @property
    def amp_status(self):
        """Gets the amp_status of this Metadata.  # noqa: E501


        :return: The amp_status of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._amp_status

    @amp_status.setter
    def amp_status(self, amp_status):
        """Sets the amp_status of this Metadata.


        :param amp_status: The amp_status of this Metadata.  # noqa: E501
        :type: str
        """

        self._amp_status = amp_status

    @property
    def app(self):
        """Gets the app of this Metadata.  # noqa: E501


        :return: The app of this Metadata.  # noqa: E501
        :rtype: bool
        """
        return self._app

    @app.setter
    def app(self, app):
        """Sets the app of this Metadata.


        :param app: The app of this Metadata.  # noqa: E501
        :type: bool
        """

        self._app = app

    @property
    def attribution(self):
        """Gets the attribution of this Metadata.  # noqa: E501


        :return: The attribution of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._attribution

    @attribution.setter
    def attribution(self, attribution):
        """Sets the attribution of this Metadata.


        :param attribution: The attribution of this Metadata.  # noqa: E501
        :type: str
        """

        self._attribution = attribution

    @property
    def audience_tags(self):
        """Gets the audience_tags of this Metadata.  # noqa: E501


        :return: The audience_tags of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._audience_tags

    @audience_tags.setter
    def audience_tags(self, audience_tags):
        """Sets the audience_tags of this Metadata.


        :param audience_tags: The audience_tags of this Metadata.  # noqa: E501
        :type: str
        """

        self._audience_tags = audience_tags

    @property
    def audio_source_url(self):
        """Gets the audio_source_url of this Metadata.  # noqa: E501


        :return: The audio_source_url of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._audio_source_url

    @audio_source_url.setter
    def audio_source_url(self, audio_source_url):
        """Sets the audio_source_url of this Metadata.


        :param audio_source_url: The audio_source_url of this Metadata.  # noqa: E501
        :type: str
        """

        self._audio_source_url = audio_source_url

    @property
    def authors(self):
        """Gets the authors of this Metadata.  # noqa: E501


        :return: The authors of this Metadata.  # noqa: E501
        :rtype: list[str]
        """
        return self._authors

    @authors.setter
    def authors(self, authors):
        """Sets the authors of this Metadata.


        :param authors: The authors of this Metadata.  # noqa: E501
        :type: list[str]
        """

        self._authors = authors

    @property
    def authors_list(self):
        """Gets the authors_list of this Metadata.  # noqa: E501


        :return: The authors_list of this Metadata.  # noqa: E501
        :rtype: list[UserData]
        """
        return self._authors_list

    @authors_list.setter
    def authors_list(self, authors_list):
        """Sets the authors_list of this Metadata.


        :param authors_list: The authors_list of this Metadata.  # noqa: E501
        :type: list[UserData]
        """

        self._authors_list = authors_list

    @property
    def auto_back_link_count(self):
        """Gets the auto_back_link_count of this Metadata.  # noqa: E501


        :return: The auto_back_link_count of this Metadata.  # noqa: E501
        :rtype: int
        """
        return self._auto_back_link_count

    @auto_back_link_count.setter
    def auto_back_link_count(self, auto_back_link_count):
        """Sets the auto_back_link_count of this Metadata.


        :param auto_back_link_count: The auto_back_link_count of this Metadata.  # noqa: E501
        :type: int
        """

        self._auto_back_link_count = auto_back_link_count

    @property
    def auto_back_linked(self):
        """Gets the auto_back_linked of this Metadata.  # noqa: E501


        :return: The auto_back_linked of this Metadata.  # noqa: E501
        :rtype: bool
        """
        return self._auto_back_linked

    @auto_back_linked.setter
    def auto_back_linked(self, auto_back_linked):
        """Sets the auto_back_linked of this Metadata.


        :param auto_back_linked: The auto_back_linked of this Metadata.  # noqa: E501
        :type: bool
        """

        self._auto_back_linked = auto_back_linked

    @property
    def auto_keywords(self):
        """Gets the auto_keywords of this Metadata.  # noqa: E501


        :return: The auto_keywords of this Metadata.  # noqa: E501
        :rtype: list[str]
        """
        return self._auto_keywords

    @auto_keywords.setter
    def auto_keywords(self, auto_keywords):
        """Sets the auto_keywords of this Metadata.


        :param auto_keywords: The auto_keywords of this Metadata.  # noqa: E501
        :type: list[str]
        """

        self._auto_keywords = auto_keywords

    @property
    def autobacklink_list(self):
        """Gets the autobacklink_list of this Metadata.  # noqa: E501


        :return: The autobacklink_list of this Metadata.  # noqa: E501
        :rtype: list[AutoBacklinkResponse]
        """
        return self._autobacklink_list

    @autobacklink_list.setter
    def autobacklink_list(self, autobacklink_list):
        """Sets the autobacklink_list of this Metadata.


        :param autobacklink_list: The autobacklink_list of this Metadata.  # noqa: E501
        :type: list[AutoBacklinkResponse]
        """

        self._autobacklink_list = autobacklink_list

    @property
    def big_story(self):
        """Gets the big_story of this Metadata.  # noqa: E501


        :return: The big_story of this Metadata.  # noqa: E501
        :rtype: bool
        """
        return self._big_story

    @big_story.setter
    def big_story(self, big_story):
        """Sets the big_story of this Metadata.


        :param big_story: The big_story of this Metadata.  # noqa: E501
        :type: bool
        """

        self._big_story = big_story

    @property
    def blog_disclaimer(self):
        """Gets the blog_disclaimer of this Metadata.  # noqa: E501


        :return: The blog_disclaimer of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._blog_disclaimer

    @blog_disclaimer.setter
    def blog_disclaimer(self, blog_disclaimer):
        """Sets the blog_disclaimer of this Metadata.


        :param blog_disclaimer: The blog_disclaimer of this Metadata.  # noqa: E501
        :type: str
        """

        self._blog_disclaimer = blog_disclaimer

    @property
    def blog_disclaimer_flag(self):
        """Gets the blog_disclaimer_flag of this Metadata.  # noqa: E501


        :return: The blog_disclaimer_flag of this Metadata.  # noqa: E501
        :rtype: bool
        """
        return self._blog_disclaimer_flag

    @blog_disclaimer_flag.setter
    def blog_disclaimer_flag(self, blog_disclaimer_flag):
        """Sets the blog_disclaimer_flag of this Metadata.


        :param blog_disclaimer_flag: The blog_disclaimer_flag of this Metadata.  # noqa: E501
        :type: bool
        """

        self._blog_disclaimer_flag = blog_disclaimer_flag

    @property
    def brand(self):
        """Gets the brand of this Metadata.  # noqa: E501


        :return: The brand of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this Metadata.


        :param brand: The brand of this Metadata.  # noqa: E501
        :type: str
        """

        self._brand = brand

    @property
    def breaking_news(self):
        """Gets the breaking_news of this Metadata.  # noqa: E501


        :return: The breaking_news of this Metadata.  # noqa: E501
        :rtype: bool
        """
        return self._breaking_news

    @breaking_news.setter
    def breaking_news(self, breaking_news):
        """Sets the breaking_news of this Metadata.


        :param breaking_news: The breaking_news of this Metadata.  # noqa: E501
        :type: bool
        """

        self._breaking_news = breaking_news

    @property
    def breaking_news_id(self):
        """Gets the breaking_news_id of this Metadata.  # noqa: E501


        :return: The breaking_news_id of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._breaking_news_id

    @breaking_news_id.setter
    def breaking_news_id(self, breaking_news_id):
        """Sets the breaking_news_id of this Metadata.


        :param breaking_news_id: The breaking_news_id of this Metadata.  # noqa: E501
        :type: str
        """

        self._breaking_news_id = breaking_news_id

    @property
    def canonical_url(self):
        """Gets the canonical_url of this Metadata.  # noqa: E501


        :return: The canonical_url of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._canonical_url

    @canonical_url.setter
    def canonical_url(self, canonical_url):
        """Sets the canonical_url of this Metadata.


        :param canonical_url: The canonical_url of this Metadata.  # noqa: E501
        :type: str
        """

        self._canonical_url = canonical_url

    @property
    def category(self):
        """Gets the category of this Metadata.  # noqa: E501


        :return: The category of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Metadata.


        :param category: The category of this Metadata.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def char_count(self):
        """Gets the char_count of this Metadata.  # noqa: E501


        :return: The char_count of this Metadata.  # noqa: E501
        :rtype: int
        """
        return self._char_count

    @char_count.setter
    def char_count(self, char_count):
        """Sets the char_count of this Metadata.


        :param char_count: The char_count of this Metadata.  # noqa: E501
        :type: int
        """

        self._char_count = char_count

    @property
    def collection_type(self):
        """Gets the collection_type of this Metadata.  # noqa: E501


        :return: The collection_type of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._collection_type

    @collection_type.setter
    def collection_type(self, collection_type):
        """Sets the collection_type of this Metadata.


        :param collection_type: The collection_type of this Metadata.  # noqa: E501
        :type: str
        """

        self._collection_type = collection_type

    @property
    def column(self):
        """Gets the column of this Metadata.  # noqa: E501


        :return: The column of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._column

    @column.setter
    def column(self, column):
        """Sets the column of this Metadata.


        :param column: The column of this Metadata.  # noqa: E501
        :type: str
        """

        self._column = column

    @property
    def copy_from_headline(self):
        """Gets the copy_from_headline of this Metadata.  # noqa: E501


        :return: The copy_from_headline of this Metadata.  # noqa: E501
        :rtype: bool
        """
        return self._copy_from_headline

    @copy_from_headline.setter
    def copy_from_headline(self, copy_from_headline):
        """Sets the copy_from_headline of this Metadata.


        :param copy_from_headline: The copy_from_headline of this Metadata.  # noqa: E501
        :type: bool
        """

        self._copy_from_headline = copy_from_headline

    @property
    def count(self):
        """Gets the count of this Metadata.  # noqa: E501


        :return: The count of this Metadata.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this Metadata.


        :param count: The count of this Metadata.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def css_html_class(self):
        """Gets the css_html_class of this Metadata.  # noqa: E501


        :return: The css_html_class of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._css_html_class

    @css_html_class.setter
    def css_html_class(self, css_html_class):
        """Sets the css_html_class of this Metadata.


        :param css_html_class: The css_html_class of this Metadata.  # noqa: E501
        :type: str
        """

        self._css_html_class = css_html_class

    @property
    def dead_link(self):
        """Gets the dead_link of this Metadata.  # noqa: E501


        :return: The dead_link of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._dead_link

    @dead_link.setter
    def dead_link(self, dead_link):
        """Sets the dead_link of this Metadata.


        :param dead_link: The dead_link of this Metadata.  # noqa: E501
        :type: str
        """

        self._dead_link = dead_link

    @property
    def dead_link_url(self):
        """Gets the dead_link_url of this Metadata.  # noqa: E501


        :return: The dead_link_url of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._dead_link_url

    @dead_link_url.setter
    def dead_link_url(self, dead_link_url):
        """Sets the dead_link_url of this Metadata.


        :param dead_link_url: The dead_link_url of this Metadata.  # noqa: E501
        :type: str
        """

        self._dead_link_url = dead_link_url

    @property
    def delete_mode(self):
        """Gets the delete_mode of this Metadata.  # noqa: E501


        :return: The delete_mode of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._delete_mode

    @delete_mode.setter
    def delete_mode(self, delete_mode):
        """Sets the delete_mode of this Metadata.


        :param delete_mode: The delete_mode of this Metadata.  # noqa: E501
        :type: str
        """
        allowed_values = ["TEMPORARY_REDIRECT", "PERMANENT_REDIRECT"]  # noqa: E501
        if delete_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `delete_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(delete_mode, allowed_values)
            )

        self._delete_mode = delete_mode

    @property
    def design(self):
        """Gets the design of this Metadata.  # noqa: E501


        :return: The design of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._design

    @design.setter
    def design(self, design):
        """Sets the design of this Metadata.


        :param design: The design of this Metadata.  # noqa: E501
        :type: str
        """

        self._design = design

    @property
    def developing(self):
        """Gets the developing of this Metadata.  # noqa: E501


        :return: The developing of this Metadata.  # noqa: E501
        :rtype: bool
        """
        return self._developing

    @developing.setter
    def developing(self, developing):
        """Sets the developing of this Metadata.


        :param developing: The developing of this Metadata.  # noqa: E501
        :type: bool
        """

        self._developing = developing

    @property
    def disclaimer(self):
        """Gets the disclaimer of this Metadata.  # noqa: E501


        :return: The disclaimer of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._disclaimer

    @disclaimer.setter
    def disclaimer(self, disclaimer):
        """Sets the disclaimer of this Metadata.


        :param disclaimer: The disclaimer of this Metadata.  # noqa: E501
        :type: str
        """

        self._disclaimer = disclaimer

    @property
    def duplicate_story_publish_alert(self):
        """Gets the duplicate_story_publish_alert of this Metadata.  # noqa: E501


        :return: The duplicate_story_publish_alert of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._duplicate_story_publish_alert

    @duplicate_story_publish_alert.setter
    def duplicate_story_publish_alert(self, duplicate_story_publish_alert):
        """Sets the duplicate_story_publish_alert of this Metadata.


        :param duplicate_story_publish_alert: The duplicate_story_publish_alert of this Metadata.  # noqa: E501
        :type: str
        """

        self._duplicate_story_publish_alert = duplicate_story_publish_alert

    @property
    def dynamic_meta(self):
        """Gets the dynamic_meta of this Metadata.  # noqa: E501


        :return: The dynamic_meta of this Metadata.  # noqa: E501
        :rtype: list[DynamicConfiguration]
        """
        return self._dynamic_meta

    @dynamic_meta.setter
    def dynamic_meta(self, dynamic_meta):
        """Sets the dynamic_meta of this Metadata.


        :param dynamic_meta: The dynamic_meta of this Metadata.  # noqa: E501
        :type: list[DynamicConfiguration]
        """

        self._dynamic_meta = dynamic_meta

    @property
    def edited_by(self):
        """Gets the edited_by of this Metadata.  # noqa: E501


        :return: The edited_by of this Metadata.  # noqa: E501
        :rtype: list[str]
        """
        return self._edited_by

    @edited_by.setter
    def edited_by(self, edited_by):
        """Sets the edited_by of this Metadata.


        :param edited_by: The edited_by of this Metadata.  # noqa: E501
        :type: list[str]
        """

        self._edited_by = edited_by

    @property
    def edited_by_list(self):
        """Gets the edited_by_list of this Metadata.  # noqa: E501


        :return: The edited_by_list of this Metadata.  # noqa: E501
        :rtype: list[UserData]
        """
        return self._edited_by_list

    @edited_by_list.setter
    def edited_by_list(self, edited_by_list):
        """Sets the edited_by_list of this Metadata.


        :param edited_by_list: The edited_by_list of this Metadata.  # noqa: E501
        :type: list[UserData]
        """

        self._edited_by_list = edited_by_list

    @property
    def eidos_author(self):
        """Gets the eidos_author of this Metadata.  # noqa: E501


        :return: The eidos_author of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._eidos_author

    @eidos_author.setter
    def eidos_author(self, eidos_author):
        """Sets the eidos_author of this Metadata.


        :param eidos_author: The eidos_author of this Metadata.  # noqa: E501
        :type: str
        """

        self._eidos_author = eidos_author

    @property
    def eidos_org_author_id(self):
        """Gets the eidos_org_author_id of this Metadata.  # noqa: E501


        :return: The eidos_org_author_id of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._eidos_org_author_id

    @eidos_org_author_id.setter
    def eidos_org_author_id(self, eidos_org_author_id):
        """Sets the eidos_org_author_id of this Metadata.


        :param eidos_org_author_id: The eidos_org_author_id of this Metadata.  # noqa: E501
        :type: str
        """

        self._eidos_org_author_id = eidos_org_author_id

    @property
    def eidos_org_author_name(self):
        """Gets the eidos_org_author_name of this Metadata.  # noqa: E501


        :return: The eidos_org_author_name of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._eidos_org_author_name

    @eidos_org_author_name.setter
    def eidos_org_author_name(self, eidos_org_author_name):
        """Sets the eidos_org_author_name of this Metadata.


        :param eidos_org_author_name: The eidos_org_author_name of this Metadata.  # noqa: E501
        :type: str
        """

        self._eidos_org_author_name = eidos_org_author_name

    @property
    def exclusive(self):
        """Gets the exclusive of this Metadata.  # noqa: E501


        :return: The exclusive of this Metadata.  # noqa: E501
        :rtype: bool
        """
        return self._exclusive

    @exclusive.setter
    def exclusive(self, exclusive):
        """Sets the exclusive of this Metadata.


        :param exclusive: The exclusive of this Metadata.  # noqa: E501
        :type: bool
        """

        self._exclusive = exclusive

    @property
    def external_url(self):
        """Gets the external_url of this Metadata.  # noqa: E501


        :return: The external_url of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._external_url

    @external_url.setter
    def external_url(self, external_url):
        """Sets the external_url of this Metadata.


        :param external_url: The external_url of this Metadata.  # noqa: E501
        :type: str
        """

        self._external_url = external_url

    @property
    def fact_check(self):
        """Gets the fact_check of this Metadata.  # noqa: E501


        :return: The fact_check of this Metadata.  # noqa: E501
        :rtype: bool
        """
        return self._fact_check

    @fact_check.setter
    def fact_check(self, fact_check):
        """Sets the fact_check of this Metadata.


        :param fact_check: The fact_check of this Metadata.  # noqa: E501
        :type: bool
        """

        self._fact_check = fact_check

    @property
    def ftp_file_path(self):
        """Gets the ftp_file_path of this Metadata.  # noqa: E501


        :return: The ftp_file_path of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._ftp_file_path

    @ftp_file_path.setter
    def ftp_file_path(self, ftp_file_path):
        """Sets the ftp_file_path of this Metadata.


        :param ftp_file_path: The ftp_file_path of this Metadata.  # noqa: E501
        :type: str
        """

        self._ftp_file_path = ftp_file_path

    @property
    def geo_locations(self):
        """Gets the geo_locations of this Metadata.  # noqa: E501


        :return: The geo_locations of this Metadata.  # noqa: E501
        :rtype: dict(str, list[str])
        """
        return self._geo_locations

    @geo_locations.setter
    def geo_locations(self, geo_locations):
        """Sets the geo_locations of this Metadata.


        :param geo_locations: The geo_locations of this Metadata.  # noqa: E501
        :type: dict(str, list[str])
        """

        self._geo_locations = geo_locations

    @property
    def handpicked(self):
        """Gets the handpicked of this Metadata.  # noqa: E501


        :return: The handpicked of this Metadata.  # noqa: E501
        :rtype: bool
        """
        return self._handpicked

    @handpicked.setter
    def handpicked(self, handpicked):
        """Sets the handpicked of this Metadata.


        :param handpicked: The handpicked of this Metadata.  # noqa: E501
        :type: bool
        """

        self._handpicked = handpicked

    @property
    def home_page_article(self):
        """Gets the home_page_article of this Metadata.  # noqa: E501


        :return: The home_page_article of this Metadata.  # noqa: E501
        :rtype: bool
        """
        return self._home_page_article

    @home_page_article.setter
    def home_page_article(self, home_page_article):
        """Sets the home_page_article of this Metadata.


        :param home_page_article: The home_page_article of this Metadata.  # noqa: E501
        :type: bool
        """

        self._home_page_article = home_page_article

    @property
    def home_page_end_time(self):
        """Gets the home_page_end_time of this Metadata.  # noqa: E501


        :return: The home_page_end_time of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._home_page_end_time

    @home_page_end_time.setter
    def home_page_end_time(self, home_page_end_time):
        """Sets the home_page_end_time of this Metadata.


        :param home_page_end_time: The home_page_end_time of this Metadata.  # noqa: E501
        :type: str
        """

        self._home_page_end_time = home_page_end_time

    @property
    def home_page_position(self):
        """Gets the home_page_position of this Metadata.  # noqa: E501


        :return: The home_page_position of this Metadata.  # noqa: E501
        :rtype: int
        """
        return self._home_page_position

    @home_page_position.setter
    def home_page_position(self, home_page_position):
        """Sets the home_page_position of this Metadata.


        :param home_page_position: The home_page_position of this Metadata.  # noqa: E501
        :type: int
        """

        self._home_page_position = home_page_position

    @property
    def ignore_auto_quick_reads(self):
        """Gets the ignore_auto_quick_reads of this Metadata.  # noqa: E501


        :return: The ignore_auto_quick_reads of this Metadata.  # noqa: E501
        :rtype: bool
        """
        return self._ignore_auto_quick_reads

    @ignore_auto_quick_reads.setter
    def ignore_auto_quick_reads(self, ignore_auto_quick_reads):
        """Sets the ignore_auto_quick_reads of this Metadata.


        :param ignore_auto_quick_reads: The ignore_auto_quick_reads of this Metadata.  # noqa: E501
        :type: bool
        """

        self._ignore_auto_quick_reads = ignore_auto_quick_reads

    @property
    def in_depth(self):
        """Gets the in_depth of this Metadata.  # noqa: E501


        :return: The in_depth of this Metadata.  # noqa: E501
        :rtype: bool
        """
        return self._in_depth

    @in_depth.setter
    def in_depth(self, in_depth):
        """Sets the in_depth of this Metadata.


        :param in_depth: The in_depth of this Metadata.  # noqa: E501
        :type: bool
        """

        self._in_depth = in_depth

    @property
    def interview(self):
        """Gets the interview of this Metadata.  # noqa: E501


        :return: The interview of this Metadata.  # noqa: E501
        :rtype: bool
        """
        return self._interview

    @interview.setter
    def interview(self, interview):
        """Sets the interview of this Metadata.


        :param interview: The interview of this Metadata.  # noqa: E501
        :type: bool
        """

        self._interview = interview

    @property
    def json_source_url(self):
        """Gets the json_source_url of this Metadata.  # noqa: E501


        :return: The json_source_url of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._json_source_url

    @json_source_url.setter
    def json_source_url(self, json_source_url):
        """Sets the json_source_url of this Metadata.


        :param json_source_url: The json_source_url of this Metadata.  # noqa: E501
        :type: str
        """

        self._json_source_url = json_source_url

    @property
    def keywords(self):
        """Gets the keywords of this Metadata.  # noqa: E501


        :return: The keywords of this Metadata.  # noqa: E501
        :rtype: list[str]
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this Metadata.


        :param keywords: The keywords of this Metadata.  # noqa: E501
        :type: list[str]
        """

        self._keywords = keywords

    @property
    def keywords_map(self):
        """Gets the keywords_map of this Metadata.  # noqa: E501


        :return: The keywords_map of this Metadata.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._keywords_map

    @keywords_map.setter
    def keywords_map(self, keywords_map):
        """Sets the keywords_map of this Metadata.


        :param keywords_map: The keywords_map of this Metadata.  # noqa: E501
        :type: dict(str, str)
        """

        self._keywords_map = keywords_map

    @property
    def killed(self):
        """Gets the killed of this Metadata.  # noqa: E501


        :return: The killed of this Metadata.  # noqa: E501
        :rtype: bool
        """
        return self._killed

    @killed.setter
    def killed(self, killed):
        """Sets the killed of this Metadata.


        :param killed: The killed of this Metadata.  # noqa: E501
        :type: bool
        """

        self._killed = killed

    @property
    def killed_status_code(self):
        """Gets the killed_status_code of this Metadata.  # noqa: E501


        :return: The killed_status_code of this Metadata.  # noqa: E501
        :rtype: int
        """
        return self._killed_status_code

    @killed_status_code.setter
    def killed_status_code(self, killed_status_code):
        """Sets the killed_status_code of this Metadata.


        :param killed_status_code: The killed_status_code of this Metadata.  # noqa: E501
        :type: int
        """

        self._killed_status_code = killed_status_code

    @property
    def latest(self):
        """Gets the latest of this Metadata.  # noqa: E501


        :return: The latest of this Metadata.  # noqa: E501
        :rtype: bool
        """
        return self._latest

    @latest.setter
    def latest(self, latest):
        """Sets the latest of this Metadata.


        :param latest: The latest of this Metadata.  # noqa: E501
        :type: bool
        """

        self._latest = latest

    @property
    def live(self):
        """Gets the live of this Metadata.  # noqa: E501


        :return: The live of this Metadata.  # noqa: E501
        :rtype: bool
        """
        return self._live

    @live.setter
    def live(self, live):
        """Sets the live of this Metadata.


        :param live: The live of this Metadata.  # noqa: E501
        :type: bool
        """

        self._live = live

    @property
    def location(self):
        """Gets the location of this Metadata.  # noqa: E501


        :return: The location of this Metadata.  # noqa: E501
        :rtype: list[str]
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Metadata.


        :param location: The location of this Metadata.  # noqa: E501
        :type: list[str]
        """

        self._location = location

    @property
    def mark_unimportant(self):
        """Gets the mark_unimportant of this Metadata.  # noqa: E501


        :return: The mark_unimportant of this Metadata.  # noqa: E501
        :rtype: bool
        """
        return self._mark_unimportant

    @mark_unimportant.setter
    def mark_unimportant(self, mark_unimportant):
        """Sets the mark_unimportant of this Metadata.


        :param mark_unimportant: The mark_unimportant of this Metadata.  # noqa: E501
        :type: bool
        """

        self._mark_unimportant = mark_unimportant

    @property
    def meta_description(self):
        """Gets the meta_description of this Metadata.  # noqa: E501


        :return: The meta_description of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._meta_description

    @meta_description.setter
    def meta_description(self, meta_description):
        """Sets the meta_description of this Metadata.


        :param meta_description: The meta_description of this Metadata.  # noqa: E501
        :type: str
        """

        self._meta_description = meta_description

    @property
    def meta_title(self):
        """Gets the meta_title of this Metadata.  # noqa: E501


        :return: The meta_title of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._meta_title

    @meta_title.setter
    def meta_title(self, meta_title):
        """Sets the meta_title of this Metadata.


        :param meta_title: The meta_title of this Metadata.  # noqa: E501
        :type: str
        """

        self._meta_title = meta_title

    @property
    def methode_file_name(self):
        """Gets the methode_file_name of this Metadata.  # noqa: E501


        :return: The methode_file_name of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._methode_file_name

    @methode_file_name.setter
    def methode_file_name(self, methode_file_name):
        """Sets the methode_file_name of this Metadata.


        :param methode_file_name: The methode_file_name of this Metadata.  # noqa: E501
        :type: str
        """

        self._methode_file_name = methode_file_name

    @property
    def model(self):
        """Gets the model of this Metadata.  # noqa: E501


        :return: The model of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this Metadata.


        :param model: The model of this Metadata.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def name(self):
        """Gets the name of this Metadata.  # noqa: E501


        :return: The name of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Metadata.


        :param name: The name of this Metadata.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def notification_sent(self):
        """Gets the notification_sent of this Metadata.  # noqa: E501


        :return: The notification_sent of this Metadata.  # noqa: E501
        :rtype: bool
        """
        return self._notification_sent

    @notification_sent.setter
    def notification_sent(self, notification_sent):
        """Sets the notification_sent of this Metadata.


        :param notification_sent: The notification_sent of this Metadata.  # noqa: E501
        :type: bool
        """

        self._notification_sent = notification_sent

    @property
    def old_headline(self):
        """Gets the old_headline of this Metadata.  # noqa: E501


        :return: The old_headline of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._old_headline

    @old_headline.setter
    def old_headline(self, old_headline):
        """Sets the old_headline of this Metadata.


        :param old_headline: The old_headline of this Metadata.  # noqa: E501
        :type: str
        """

        self._old_headline = old_headline

    @property
    def old_meta_description(self):
        """Gets the old_meta_description of this Metadata.  # noqa: E501


        :return: The old_meta_description of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._old_meta_description

    @old_meta_description.setter
    def old_meta_description(self, old_meta_description):
        """Sets the old_meta_description of this Metadata.


        :param old_meta_description: The old_meta_description of this Metadata.  # noqa: E501
        :type: str
        """

        self._old_meta_description = old_meta_description

    @property
    def old_meta_title(self):
        """Gets the old_meta_title of this Metadata.  # noqa: E501


        :return: The old_meta_title of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._old_meta_title

    @old_meta_title.setter
    def old_meta_title(self, old_meta_title):
        """Sets the old_meta_title of this Metadata.


        :param old_meta_title: The old_meta_title of this Metadata.  # noqa: E501
        :type: str
        """

        self._old_meta_title = old_meta_title

    @property
    def old_summary(self):
        """Gets the old_summary of this Metadata.  # noqa: E501


        :return: The old_summary of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._old_summary

    @old_summary.setter
    def old_summary(self, old_summary):
        """Sets the old_summary of this Metadata.


        :param old_summary: The old_summary of this Metadata.  # noqa: E501
        :type: str
        """

        self._old_summary = old_summary

    @property
    def old_url(self):
        """Gets the old_url of this Metadata.  # noqa: E501


        :return: The old_url of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._old_url

    @old_url.setter
    def old_url(self, old_url):
        """Sets the old_url of this Metadata.


        :param old_url: The old_url of this Metadata.  # noqa: E501
        :type: str
        """

        self._old_url = old_url

    @property
    def old_author(self):
        """Gets the old_author of this Metadata.  # noqa: E501


        :return: The old_author of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._old_author

    @old_author.setter
    def old_author(self, old_author):
        """Sets the old_author of this Metadata.


        :param old_author: The old_author of this Metadata.  # noqa: E501
        :type: str
        """

        self._old_author = old_author

    @property
    def opinion(self):
        """Gets the opinion of this Metadata.  # noqa: E501


        :return: The opinion of this Metadata.  # noqa: E501
        :rtype: bool
        """
        return self._opinion

    @opinion.setter
    def opinion(self, opinion):
        """Sets the opinion of this Metadata.


        :param opinion: The opinion of this Metadata.  # noqa: E501
        :type: bool
        """

        self._opinion = opinion

    @property
    def outdated_check(self):
        """Gets the outdated_check of this Metadata.  # noqa: E501


        :return: The outdated_check of this Metadata.  # noqa: E501
        :rtype: bool
        """
        return self._outdated_check

    @outdated_check.setter
    def outdated_check(self, outdated_check):
        """Sets the outdated_check of this Metadata.


        :param outdated_check: The outdated_check of this Metadata.  # noqa: E501
        :type: bool
        """

        self._outdated_check = outdated_check

    @property
    def outdated_time(self):
        """Gets the outdated_time of this Metadata.  # noqa: E501


        :return: The outdated_time of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._outdated_time

    @outdated_time.setter
    def outdated_time(self, outdated_time):
        """Sets the outdated_time of this Metadata.


        :param outdated_time: The outdated_time of this Metadata.  # noqa: E501
        :type: str
        """

        self._outdated_time = outdated_time

    @property
    def para_content_changed(self):
        """Gets the para_content_changed of this Metadata.  # noqa: E501


        :return: The para_content_changed of this Metadata.  # noqa: E501
        :rtype: bool
        """
        return self._para_content_changed

    @para_content_changed.setter
    def para_content_changed(self, para_content_changed):
        """Sets the para_content_changed of this Metadata.


        :param para_content_changed: The para_content_changed of this Metadata.  # noqa: E501
        :type: bool
        """

        self._para_content_changed = para_content_changed

    @property
    def plagiarised_content(self):
        """Gets the plagiarised_content of this Metadata.  # noqa: E501


        :return: The plagiarised_content of this Metadata.  # noqa: E501
        :rtype: int
        """
        return self._plagiarised_content

    @plagiarised_content.setter
    def plagiarised_content(self, plagiarised_content):
        """Sets the plagiarised_content of this Metadata.


        :param plagiarised_content: The plagiarised_content of this Metadata.  # noqa: E501
        :type: int
        """

        self._plagiarised_content = plagiarised_content

    @property
    def plagiarism_checked(self):
        """Gets the plagiarism_checked of this Metadata.  # noqa: E501


        :return: The plagiarism_checked of this Metadata.  # noqa: E501
        :rtype: bool
        """
        return self._plagiarism_checked

    @plagiarism_checked.setter
    def plagiarism_checked(self, plagiarism_checked):
        """Sets the plagiarism_checked of this Metadata.


        :param plagiarism_checked: The plagiarism_checked of this Metadata.  # noqa: E501
        :type: bool
        """

        self._plagiarism_checked = plagiarism_checked

    @property
    def posted_by(self):
        """Gets the posted_by of this Metadata.  # noqa: E501


        :return: The posted_by of this Metadata.  # noqa: E501
        :rtype: list[str]
        """
        return self._posted_by

    @posted_by.setter
    def posted_by(self, posted_by):
        """Sets the posted_by of this Metadata.


        :param posted_by: The posted_by of this Metadata.  # noqa: E501
        :type: list[str]
        """

        self._posted_by = posted_by

    @property
    def posted_by_list(self):
        """Gets the posted_by_list of this Metadata.  # noqa: E501


        :return: The posted_by_list of this Metadata.  # noqa: E501
        :rtype: list[UserData]
        """
        return self._posted_by_list

    @posted_by_list.setter
    def posted_by_list(self, posted_by_list):
        """Sets the posted_by_list of this Metadata.


        :param posted_by_list: The posted_by_list of this Metadata.  # noqa: E501
        :type: list[UserData]
        """

        self._posted_by_list = posted_by_list

    @property
    def premium_from_date(self):
        """Gets the premium_from_date of this Metadata.  # noqa: E501


        :return: The premium_from_date of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._premium_from_date

    @premium_from_date.setter
    def premium_from_date(self, premium_from_date):
        """Sets the premium_from_date of this Metadata.


        :param premium_from_date: The premium_from_date of this Metadata.  # noqa: E501
        :type: str
        """

        self._premium_from_date = premium_from_date

    @property
    def premium_notification(self):
        """Gets the premium_notification of this Metadata.  # noqa: E501


        :return: The premium_notification of this Metadata.  # noqa: E501
        :rtype: bool
        """
        return self._premium_notification

    @premium_notification.setter
    def premium_notification(self, premium_notification):
        """Sets the premium_notification of this Metadata.


        :param premium_notification: The premium_notification of this Metadata.  # noqa: E501
        :type: bool
        """

        self._premium_notification = premium_notification

    @property
    def premium_story(self):
        """Gets the premium_story of this Metadata.  # noqa: E501


        :return: The premium_story of this Metadata.  # noqa: E501
        :rtype: bool
        """
        return self._premium_story

    @premium_story.setter
    def premium_story(self, premium_story):
        """Sets the premium_story of this Metadata.


        :param premium_story: The premium_story of this Metadata.  # noqa: E501
        :type: bool
        """

        self._premium_story = premium_story

    @property
    def premium_story_days(self):
        """Gets the premium_story_days of this Metadata.  # noqa: E501


        :return: The premium_story_days of this Metadata.  # noqa: E501
        :rtype: int
        """
        return self._premium_story_days

    @premium_story_days.setter
    def premium_story_days(self, premium_story_days):
        """Sets the premium_story_days of this Metadata.


        :param premium_story_days: The premium_story_days of this Metadata.  # noqa: E501
        :type: int
        """

        self._premium_story_days = premium_story_days

    @property
    def premium_to_date(self):
        """Gets the premium_to_date of this Metadata.  # noqa: E501


        :return: The premium_to_date of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._premium_to_date

    @premium_to_date.setter
    def premium_to_date(self, premium_to_date):
        """Sets the premium_to_date of this Metadata.


        :param premium_to_date: The premium_to_date of this Metadata.  # noqa: E501
        :type: str
        """

        self._premium_to_date = premium_to_date

    @property
    def primary_location(self):
        """Gets the primary_location of this Metadata.  # noqa: E501


        :return: The primary_location of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._primary_location

    @primary_location.setter
    def primary_location(self, primary_location):
        """Sets the primary_location of this Metadata.


        :param primary_location: The primary_location of this Metadata.  # noqa: E501
        :type: str
        """

        self._primary_location = primary_location

    @property
    def recosense_keywords(self):
        """Gets the recosense_keywords of this Metadata.  # noqa: E501


        :return: The recosense_keywords of this Metadata.  # noqa: E501
        :rtype: list[str]
        """
        return self._recosense_keywords

    @recosense_keywords.setter
    def recosense_keywords(self, recosense_keywords):
        """Sets the recosense_keywords of this Metadata.


        :param recosense_keywords: The recosense_keywords of this Metadata.  # noqa: E501
        :type: list[str]
        """

        self._recosense_keywords = recosense_keywords

    @property
    def redirect_url(self):
        """Gets the redirect_url of this Metadata.  # noqa: E501


        :return: The redirect_url of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._redirect_url

    @redirect_url.setter
    def redirect_url(self, redirect_url):
        """Sets the redirect_url of this Metadata.


        :param redirect_url: The redirect_url of this Metadata.  # noqa: E501
        :type: str
        """

        self._redirect_url = redirect_url

    @property
    def reported_by(self):
        """Gets the reported_by of this Metadata.  # noqa: E501


        :return: The reported_by of this Metadata.  # noqa: E501
        :rtype: list[str]
        """
        return self._reported_by

    @reported_by.setter
    def reported_by(self, reported_by):
        """Sets the reported_by of this Metadata.


        :param reported_by: The reported_by of this Metadata.  # noqa: E501
        :type: list[str]
        """

        self._reported_by = reported_by

    @property
    def reported_by_list(self):
        """Gets the reported_by_list of this Metadata.  # noqa: E501


        :return: The reported_by_list of this Metadata.  # noqa: E501
        :rtype: list[UserData]
        """
        return self._reported_by_list

    @reported_by_list.setter
    def reported_by_list(self, reported_by_list):
        """Sets the reported_by_list of this Metadata.


        :param reported_by_list: The reported_by_list of this Metadata.  # noqa: E501
        :type: list[UserData]
        """

        self._reported_by_list = reported_by_list

    @property
    def secondary_brands(self):
        """Gets the secondary_brands of this Metadata.  # noqa: E501


        :return: The secondary_brands of this Metadata.  # noqa: E501
        :rtype: list[SecondaryBrands]
        """
        return self._secondary_brands

    @secondary_brands.setter
    def secondary_brands(self, secondary_brands):
        """Sets the secondary_brands of this Metadata.


        :param secondary_brands: The secondary_brands of this Metadata.  # noqa: E501
        :type: list[SecondaryBrands]
        """

        self._secondary_brands = secondary_brands

    @property
    def secondary_sections(self):
        """Gets the secondary_sections of this Metadata.  # noqa: E501


        :return: The secondary_sections of this Metadata.  # noqa: E501
        :rtype: list[SecondarySections]
        """
        return self._secondary_sections

    @secondary_sections.setter
    def secondary_sections(self, secondary_sections):
        """Sets the secondary_sections of this Metadata.


        :param secondary_sections: The secondary_sections of this Metadata.  # noqa: E501
        :type: list[SecondarySections]
        """

        self._secondary_sections = secondary_sections

    @property
    def section(self):
        """Gets the section of this Metadata.  # noqa: E501


        :return: The section of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._section

    @section.setter
    def section(self, section):
        """Sets the section of this Metadata.


        :param section: The section of this Metadata.  # noqa: E501
        :type: str
        """

        self._section = section

    @property
    def section_display_name(self):
        """Gets the section_display_name of this Metadata.  # noqa: E501


        :return: The section_display_name of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._section_display_name

    @section_display_name.setter
    def section_display_name(self, section_display_name):
        """Sets the section_display_name of this Metadata.


        :param section_display_name: The section_display_name of this Metadata.  # noqa: E501
        :type: str
        """

        self._section_display_name = section_display_name

    @property
    def section_id(self):
        """Gets the section_id of this Metadata.  # noqa: E501


        :return: The section_id of this Metadata.  # noqa: E501
        :rtype: int
        """
        return self._section_id

    @section_id.setter
    def section_id(self, section_id):
        """Sets the section_id of this Metadata.


        :param section_id: The section_id of this Metadata.  # noqa: E501
        :type: int
        """

        self._section_id = section_id

    @property
    def section_specific_default_tags(self):
        """Gets the section_specific_default_tags of this Metadata.  # noqa: E501


        :return: The section_specific_default_tags of this Metadata.  # noqa: E501
        :rtype: list[str]
        """
        return self._section_specific_default_tags

    @section_specific_default_tags.setter
    def section_specific_default_tags(self, section_specific_default_tags):
        """Sets the section_specific_default_tags of this Metadata.


        :param section_specific_default_tags: The section_specific_default_tags of this Metadata.  # noqa: E501
        :type: list[str]
        """

        self._section_specific_default_tags = section_specific_default_tags

    @property
    def section_url(self):
        """Gets the section_url of this Metadata.  # noqa: E501


        :return: The section_url of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._section_url

    @section_url.setter
    def section_url(self, section_url):
        """Sets the section_url of this Metadata.


        :param section_url: The section_url of this Metadata.  # noqa: E501
        :type: str
        """

        self._section_url = section_url

    @property
    def sentence_count(self):
        """Gets the sentence_count of this Metadata.  # noqa: E501


        :return: The sentence_count of this Metadata.  # noqa: E501
        :rtype: int
        """
        return self._sentence_count

    @sentence_count.setter
    def sentence_count(self, sentence_count):
        """Sets the sentence_count of this Metadata.


        :param sentence_count: The sentence_count of this Metadata.  # noqa: E501
        :type: int
        """

        self._sentence_count = sentence_count

    @property
    def seo_url(self):
        """Gets the seo_url of this Metadata.  # noqa: E501


        :return: The seo_url of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._seo_url

    @seo_url.setter
    def seo_url(self, seo_url):
        """Sets the seo_url of this Metadata.


        :param seo_url: The seo_url of this Metadata.  # noqa: E501
        :type: str
        """

        self._seo_url = seo_url

    @property
    def sponsored(self):
        """Gets the sponsored of this Metadata.  # noqa: E501


        :return: The sponsored of this Metadata.  # noqa: E501
        :rtype: bool
        """
        return self._sponsored

    @sponsored.setter
    def sponsored(self, sponsored):
        """Sets the sponsored of this Metadata.


        :param sponsored: The sponsored of this Metadata.  # noqa: E501
        :type: bool
        """

        self._sponsored = sponsored

    @property
    def sponsored_title(self):
        """Gets the sponsored_title of this Metadata.  # noqa: E501


        :return: The sponsored_title of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._sponsored_title

    @sponsored_title.setter
    def sponsored_title(self, sponsored_title):
        """Sets the sponsored_title of this Metadata.


        :param sponsored_title: The sponsored_title of this Metadata.  # noqa: E501
        :type: str
        """

        self._sponsored_title = sponsored_title

    @property
    def status(self):
        """Gets the status of this Metadata.  # noqa: E501


        :return: The status of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Metadata.


        :param status: The status of this Metadata.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def story_type(self):
        """Gets the story_type of this Metadata.  # noqa: E501


        :return: The story_type of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._story_type

    @story_type.setter
    def story_type(self, story_type):
        """Sets the story_type of this Metadata.


        :param story_type: The story_type of this Metadata.  # noqa: E501
        :type: str
        """
        allowed_values = ["DIGITAL", "PRINT", "AGENCY"]  # noqa: E501
        if story_type not in allowed_values:
            raise ValueError(
                "Invalid value for `story_type` ({0}), must be one of {1}"  # noqa: E501
                .format(story_type, allowed_values)
            )

        self._story_type = story_type

    @property
    def sub_section(self):
        """Gets the sub_section of this Metadata.  # noqa: E501


        :return: The sub_section of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._sub_section

    @sub_section.setter
    def sub_section(self, sub_section):
        """Sets the sub_section of this Metadata.


        :param sub_section: The sub_section of this Metadata.  # noqa: E501
        :type: str
        """

        self._sub_section = sub_section

    @property
    def sub_section_id(self):
        """Gets the sub_section_id of this Metadata.  # noqa: E501


        :return: The sub_section_id of this Metadata.  # noqa: E501
        :rtype: int
        """
        return self._sub_section_id

    @sub_section_id.setter
    def sub_section_id(self, sub_section_id):
        """Sets the sub_section_id of this Metadata.


        :param sub_section_id: The sub_section_id of this Metadata.  # noqa: E501
        :type: int
        """

        self._sub_section_id = sub_section_id

    @property
    def sub_section_l2(self):
        """Gets the sub_section_l2 of this Metadata.  # noqa: E501


        :return: The sub_section_l2 of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._sub_section_l2

    @sub_section_l2.setter
    def sub_section_l2(self, sub_section_l2):
        """Sets the sub_section_l2 of this Metadata.


        :param sub_section_l2: The sub_section_l2 of this Metadata.  # noqa: E501
        :type: str
        """

        self._sub_section_l2 = sub_section_l2

    @property
    def sub_section_l2_id(self):
        """Gets the sub_section_l2_id of this Metadata.  # noqa: E501


        :return: The sub_section_l2_id of this Metadata.  # noqa: E501
        :rtype: int
        """
        return self._sub_section_l2_id

    @sub_section_l2_id.setter
    def sub_section_l2_id(self, sub_section_l2_id):
        """Sets the sub_section_l2_id of this Metadata.


        :param sub_section_l2_id: The sub_section_l2_id of this Metadata.  # noqa: E501
        :type: int
        """

        self._sub_section_l2_id = sub_section_l2_id

    @property
    def sub_section_url(self):
        """Gets the sub_section_url of this Metadata.  # noqa: E501


        :return: The sub_section_url of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._sub_section_url

    @sub_section_url.setter
    def sub_section_url(self, sub_section_url):
        """Sets the sub_section_url of this Metadata.


        :param sub_section_url: The sub_section_url of this Metadata.  # noqa: E501
        :type: str
        """

        self._sub_section_url = sub_section_url

    @property
    def syllable_count(self):
        """Gets the syllable_count of this Metadata.  # noqa: E501


        :return: The syllable_count of this Metadata.  # noqa: E501
        :rtype: int
        """
        return self._syllable_count

    @syllable_count.setter
    def syllable_count(self, syllable_count):
        """Sets the syllable_count of this Metadata.


        :param syllable_count: The syllable_count of this Metadata.  # noqa: E501
        :type: int
        """

        self._syllable_count = syllable_count

    @property
    def syndication_feed(self):
        """Gets the syndication_feed of this Metadata.  # noqa: E501


        :return: The syndication_feed of this Metadata.  # noqa: E501
        :rtype: bool
        """
        return self._syndication_feed

    @syndication_feed.setter
    def syndication_feed(self, syndication_feed):
        """Sets the syndication_feed of this Metadata.


        :param syndication_feed: The syndication_feed of this Metadata.  # noqa: E501
        :type: bool
        """

        self._syndication_feed = syndication_feed

    @property
    def tags(self):
        """Gets the tags of this Metadata.  # noqa: E501


        :return: The tags of this Metadata.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Metadata.


        :param tags: The tags of this Metadata.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def time_taken_to_publish(self):
        """Gets the time_taken_to_publish of this Metadata.  # noqa: E501


        :return: The time_taken_to_publish of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._time_taken_to_publish

    @time_taken_to_publish.setter
    def time_taken_to_publish(self, time_taken_to_publish):
        """Sets the time_taken_to_publish of this Metadata.


        :param time_taken_to_publish: The time_taken_to_publish of this Metadata.  # noqa: E501
        :type: str
        """

        self._time_taken_to_publish = time_taken_to_publish

    @property
    def topic(self):
        """Gets the topic of this Metadata.  # noqa: E501


        :return: The topic of this Metadata.  # noqa: E501
        :rtype: list[str]
        """
        return self._topic

    @topic.setter
    def topic(self, topic):
        """Sets the topic of this Metadata.


        :param topic: The topic of this Metadata.  # noqa: E501
        :type: list[str]
        """

        self._topic = topic

    @property
    def topic_ids(self):
        """Gets the topic_ids of this Metadata.  # noqa: E501


        :return: The topic_ids of this Metadata.  # noqa: E501
        :rtype: list[int]
        """
        return self._topic_ids

    @topic_ids.setter
    def topic_ids(self, topic_ids):
        """Sets the topic_ids of this Metadata.


        :param topic_ids: The topic_ids of this Metadata.  # noqa: E501
        :type: list[int]
        """

        self._topic_ids = topic_ids

    @property
    def topic_name(self):
        """Gets the topic_name of this Metadata.  # noqa: E501


        :return: The topic_name of this Metadata.  # noqa: E501
        :rtype: list[str]
        """
        return self._topic_name

    @topic_name.setter
    def topic_name(self, topic_name):
        """Sets the topic_name of this Metadata.


        :param topic_name: The topic_name of this Metadata.  # noqa: E501
        :type: list[str]
        """

        self._topic_name = topic_name

    @property
    def topic_urls(self):
        """Gets the topic_urls of this Metadata.  # noqa: E501


        :return: The topic_urls of this Metadata.  # noqa: E501
        :rtype: list[str]
        """
        return self._topic_urls

    @topic_urls.setter
    def topic_urls(self, topic_urls):
        """Sets the topic_urls of this Metadata.


        :param topic_urls: The topic_urls of this Metadata.  # noqa: E501
        :type: list[str]
        """

        self._topic_urls = topic_urls

    @property
    def total_link_count(self):
        """Gets the total_link_count of this Metadata.  # noqa: E501


        :return: The total_link_count of this Metadata.  # noqa: E501
        :rtype: int
        """
        return self._total_link_count

    @total_link_count.setter
    def total_link_count(self, total_link_count):
        """Sets the total_link_count of this Metadata.


        :param total_link_count: The total_link_count of this Metadata.  # noqa: E501
        :type: int
        """

        self._total_link_count = total_link_count

    @property
    def url(self):
        """Gets the url of this Metadata.  # noqa: E501


        :return: The url of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Metadata.


        :param url: The url of this Metadata.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def video_metadata(self):
        """Gets the video_metadata of this Metadata.  # noqa: E501


        :return: The video_metadata of this Metadata.  # noqa: E501
        :rtype: VideoMetadata
        """
        return self._video_metadata

    @video_metadata.setter
    def video_metadata(self, video_metadata):
        """Sets the video_metadata of this Metadata.


        :param video_metadata: The video_metadata of this Metadata.  # noqa: E501
        :type: VideoMetadata
        """

        self._video_metadata = video_metadata

    @property
    def web(self):
        """Gets the web of this Metadata.  # noqa: E501


        :return: The web of this Metadata.  # noqa: E501
        :rtype: bool
        """
        return self._web

    @web.setter
    def web(self, web):
        """Sets the web of this Metadata.


        :param web: The web of this Metadata.  # noqa: E501
        :type: bool
        """

        self._web = web

    @property
    def word_count(self):
        """Gets the word_count of this Metadata.  # noqa: E501


        :return: The word_count of this Metadata.  # noqa: E501
        :rtype: int
        """
        return self._word_count

    @word_count.setter
    def word_count(self, word_count):
        """Sets the word_count of this Metadata.


        :param word_count: The word_count of this Metadata.  # noqa: E501
        :type: int
        """

        self._word_count = word_count

    @property
    def work_folder(self):
        """Gets the work_folder of this Metadata.  # noqa: E501


        :return: The work_folder of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._work_folder

    @work_folder.setter
    def work_folder(self, work_folder):
        """Sets the work_folder of this Metadata.


        :param work_folder: The work_folder of this Metadata.  # noqa: E501
        :type: str
        """

        self._work_folder = work_folder

    @property
    def written_by(self):
        """Gets the written_by of this Metadata.  # noqa: E501


        :return: The written_by of this Metadata.  # noqa: E501
        :rtype: list[str]
        """
        return self._written_by

    @written_by.setter
    def written_by(self, written_by):
        """Sets the written_by of this Metadata.


        :param written_by: The written_by of this Metadata.  # noqa: E501
        :type: list[str]
        """

        self._written_by = written_by

    @property
    def written_by_list(self):
        """Gets the written_by_list of this Metadata.  # noqa: E501


        :return: The written_by_list of this Metadata.  # noqa: E501
        :rtype: list[UserData]
        """
        return self._written_by_list

    @written_by_list.setter
    def written_by_list(self, written_by_list):
        """Sets the written_by_list of this Metadata.


        :param written_by_list: The written_by_list of this Metadata.  # noqa: E501
        :type: list[UserData]
        """

        self._written_by_list = written_by_list

    @property
    def yt_migrated(self):
        """Gets the yt_migrated of this Metadata.  # noqa: E501


        :return: The yt_migrated of this Metadata.  # noqa: E501
        :rtype: bool
        """
        return self._yt_migrated

    @yt_migrated.setter
    def yt_migrated(self, yt_migrated):
        """Sets the yt_migrated of this Metadata.


        :param yt_migrated: The yt_migrated of this Metadata.  # noqa: E501
        :type: bool
        """

        self._yt_migrated = yt_migrated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Metadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Metadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

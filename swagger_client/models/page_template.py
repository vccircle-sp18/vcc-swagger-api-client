# coding: utf-8

"""
    CMS-Backend API

    This is API documentation of CMS-Backend  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: htdevteam@hindustantimes.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PageTemplate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'alignment': 'str',
        'children': 'bool',
        'domain_id': 'str',
        'element_properties': 'dict(str, ElementProperty)',
        'elements': 'list[int]',
        'grids': 'list[PageTemplate]',
        'height': 'str',
        'id': 'str',
        'limit': 'int',
        'name': 'str',
        'parent_template_id': 'str',
        'root': 'bool',
        'template_class': 'str',
        'width': 'str'
    }

    attribute_map = {
        'alignment': 'alignment',
        'children': 'children',
        'domain_id': 'domainId',
        'element_properties': 'elementProperties',
        'elements': 'elements',
        'grids': 'grids',
        'height': 'height',
        'id': 'id',
        'limit': 'limit',
        'name': 'name',
        'parent_template_id': 'parentTemplateId',
        'root': 'root',
        'template_class': 'templateClass',
        'width': 'width'
    }

    def __init__(self, alignment=None, children=None, domain_id=None, element_properties=None, elements=None, grids=None, height=None, id=None, limit=None, name=None, parent_template_id=None, root=None, template_class=None, width=None):  # noqa: E501
        """PageTemplate - a model defined in Swagger"""  # noqa: E501
        self._alignment = None
        self._children = None
        self._domain_id = None
        self._element_properties = None
        self._elements = None
        self._grids = None
        self._height = None
        self._id = None
        self._limit = None
        self._name = None
        self._parent_template_id = None
        self._root = None
        self._template_class = None
        self._width = None
        self.discriminator = None
        if alignment is not None:
            self.alignment = alignment
        if children is not None:
            self.children = children
        if domain_id is not None:
            self.domain_id = domain_id
        if element_properties is not None:
            self.element_properties = element_properties
        if elements is not None:
            self.elements = elements
        if grids is not None:
            self.grids = grids
        if height is not None:
            self.height = height
        if id is not None:
            self.id = id
        if limit is not None:
            self.limit = limit
        if name is not None:
            self.name = name
        if parent_template_id is not None:
            self.parent_template_id = parent_template_id
        if root is not None:
            self.root = root
        if template_class is not None:
            self.template_class = template_class
        if width is not None:
            self.width = width

    @property
    def alignment(self):
        """Gets the alignment of this PageTemplate.  # noqa: E501


        :return: The alignment of this PageTemplate.  # noqa: E501
        :rtype: str
        """
        return self._alignment

    @alignment.setter
    def alignment(self, alignment):
        """Sets the alignment of this PageTemplate.


        :param alignment: The alignment of this PageTemplate.  # noqa: E501
        :type: str
        """

        self._alignment = alignment

    @property
    def children(self):
        """Gets the children of this PageTemplate.  # noqa: E501


        :return: The children of this PageTemplate.  # noqa: E501
        :rtype: bool
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this PageTemplate.


        :param children: The children of this PageTemplate.  # noqa: E501
        :type: bool
        """

        self._children = children

    @property
    def domain_id(self):
        """Gets the domain_id of this PageTemplate.  # noqa: E501


        :return: The domain_id of this PageTemplate.  # noqa: E501
        :rtype: str
        """
        return self._domain_id

    @domain_id.setter
    def domain_id(self, domain_id):
        """Sets the domain_id of this PageTemplate.


        :param domain_id: The domain_id of this PageTemplate.  # noqa: E501
        :type: str
        """

        self._domain_id = domain_id

    @property
    def element_properties(self):
        """Gets the element_properties of this PageTemplate.  # noqa: E501


        :return: The element_properties of this PageTemplate.  # noqa: E501
        :rtype: dict(str, ElementProperty)
        """
        return self._element_properties

    @element_properties.setter
    def element_properties(self, element_properties):
        """Sets the element_properties of this PageTemplate.


        :param element_properties: The element_properties of this PageTemplate.  # noqa: E501
        :type: dict(str, ElementProperty)
        """

        self._element_properties = element_properties

    @property
    def elements(self):
        """Gets the elements of this PageTemplate.  # noqa: E501


        :return: The elements of this PageTemplate.  # noqa: E501
        :rtype: list[int]
        """
        return self._elements

    @elements.setter
    def elements(self, elements):
        """Sets the elements of this PageTemplate.


        :param elements: The elements of this PageTemplate.  # noqa: E501
        :type: list[int]
        """

        self._elements = elements

    @property
    def grids(self):
        """Gets the grids of this PageTemplate.  # noqa: E501


        :return: The grids of this PageTemplate.  # noqa: E501
        :rtype: list[PageTemplate]
        """
        return self._grids

    @grids.setter
    def grids(self, grids):
        """Sets the grids of this PageTemplate.


        :param grids: The grids of this PageTemplate.  # noqa: E501
        :type: list[PageTemplate]
        """

        self._grids = grids

    @property
    def height(self):
        """Gets the height of this PageTemplate.  # noqa: E501


        :return: The height of this PageTemplate.  # noqa: E501
        :rtype: str
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this PageTemplate.


        :param height: The height of this PageTemplate.  # noqa: E501
        :type: str
        """

        self._height = height

    @property
    def id(self):
        """Gets the id of this PageTemplate.  # noqa: E501


        :return: The id of this PageTemplate.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PageTemplate.


        :param id: The id of this PageTemplate.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def limit(self):
        """Gets the limit of this PageTemplate.  # noqa: E501


        :return: The limit of this PageTemplate.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this PageTemplate.


        :param limit: The limit of this PageTemplate.  # noqa: E501
        :type: int
        """

        self._limit = limit

    @property
    def name(self):
        """Gets the name of this PageTemplate.  # noqa: E501


        :return: The name of this PageTemplate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PageTemplate.


        :param name: The name of this PageTemplate.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def parent_template_id(self):
        """Gets the parent_template_id of this PageTemplate.  # noqa: E501


        :return: The parent_template_id of this PageTemplate.  # noqa: E501
        :rtype: str
        """
        return self._parent_template_id

    @parent_template_id.setter
    def parent_template_id(self, parent_template_id):
        """Sets the parent_template_id of this PageTemplate.


        :param parent_template_id: The parent_template_id of this PageTemplate.  # noqa: E501
        :type: str
        """

        self._parent_template_id = parent_template_id

    @property
    def root(self):
        """Gets the root of this PageTemplate.  # noqa: E501


        :return: The root of this PageTemplate.  # noqa: E501
        :rtype: bool
        """
        return self._root

    @root.setter
    def root(self, root):
        """Sets the root of this PageTemplate.


        :param root: The root of this PageTemplate.  # noqa: E501
        :type: bool
        """

        self._root = root

    @property
    def template_class(self):
        """Gets the template_class of this PageTemplate.  # noqa: E501


        :return: The template_class of this PageTemplate.  # noqa: E501
        :rtype: str
        """
        return self._template_class

    @template_class.setter
    def template_class(self, template_class):
        """Sets the template_class of this PageTemplate.


        :param template_class: The template_class of this PageTemplate.  # noqa: E501
        :type: str
        """

        self._template_class = template_class

    @property
    def width(self):
        """Gets the width of this PageTemplate.  # noqa: E501


        :return: The width of this PageTemplate.  # noqa: E501
        :rtype: str
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this PageTemplate.


        :param width: The width of this PageTemplate.  # noqa: E501
        :type: str
        """

        self._width = width

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PageTemplate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PageTemplate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

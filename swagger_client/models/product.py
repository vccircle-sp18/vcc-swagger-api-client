# coding: utf-8

"""
    CMS-Backend API

    This is API documentation of CMS-Backend  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: htdevteam@hindustantimes.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Product(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'brand_id': 'str',
        'brand_name': 'str',
        'category_id': 'str',
        'category_name': 'str',
        'model_id': 'str',
        'model_name': 'str',
        'product_url': 'str'
    }

    attribute_map = {
        'brand_id': 'brandId',
        'brand_name': 'brandName',
        'category_id': 'categoryId',
        'category_name': 'categoryName',
        'model_id': 'modelId',
        'model_name': 'modelName',
        'product_url': 'productUrl'
    }

    def __init__(self, brand_id=None, brand_name=None, category_id=None, category_name=None, model_id=None, model_name=None, product_url=None):  # noqa: E501
        """Product - a model defined in Swagger"""  # noqa: E501
        self._brand_id = None
        self._brand_name = None
        self._category_id = None
        self._category_name = None
        self._model_id = None
        self._model_name = None
        self._product_url = None
        self.discriminator = None
        if brand_id is not None:
            self.brand_id = brand_id
        if brand_name is not None:
            self.brand_name = brand_name
        if category_id is not None:
            self.category_id = category_id
        if category_name is not None:
            self.category_name = category_name
        if model_id is not None:
            self.model_id = model_id
        if model_name is not None:
            self.model_name = model_name
        if product_url is not None:
            self.product_url = product_url

    @property
    def brand_id(self):
        """Gets the brand_id of this Product.  # noqa: E501


        :return: The brand_id of this Product.  # noqa: E501
        :rtype: str
        """
        return self._brand_id

    @brand_id.setter
    def brand_id(self, brand_id):
        """Sets the brand_id of this Product.


        :param brand_id: The brand_id of this Product.  # noqa: E501
        :type: str
        """

        self._brand_id = brand_id

    @property
    def brand_name(self):
        """Gets the brand_name of this Product.  # noqa: E501


        :return: The brand_name of this Product.  # noqa: E501
        :rtype: str
        """
        return self._brand_name

    @brand_name.setter
    def brand_name(self, brand_name):
        """Sets the brand_name of this Product.


        :param brand_name: The brand_name of this Product.  # noqa: E501
        :type: str
        """

        self._brand_name = brand_name

    @property
    def category_id(self):
        """Gets the category_id of this Product.  # noqa: E501


        :return: The category_id of this Product.  # noqa: E501
        :rtype: str
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this Product.


        :param category_id: The category_id of this Product.  # noqa: E501
        :type: str
        """

        self._category_id = category_id

    @property
    def category_name(self):
        """Gets the category_name of this Product.  # noqa: E501


        :return: The category_name of this Product.  # noqa: E501
        :rtype: str
        """
        return self._category_name

    @category_name.setter
    def category_name(self, category_name):
        """Sets the category_name of this Product.


        :param category_name: The category_name of this Product.  # noqa: E501
        :type: str
        """

        self._category_name = category_name

    @property
    def model_id(self):
        """Gets the model_id of this Product.  # noqa: E501


        :return: The model_id of this Product.  # noqa: E501
        :rtype: str
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id):
        """Sets the model_id of this Product.


        :param model_id: The model_id of this Product.  # noqa: E501
        :type: str
        """

        self._model_id = model_id

    @property
    def model_name(self):
        """Gets the model_name of this Product.  # noqa: E501


        :return: The model_name of this Product.  # noqa: E501
        :rtype: str
        """
        return self._model_name

    @model_name.setter
    def model_name(self, model_name):
        """Sets the model_name of this Product.


        :param model_name: The model_name of this Product.  # noqa: E501
        :type: str
        """

        self._model_name = model_name

    @property
    def product_url(self):
        """Gets the product_url of this Product.  # noqa: E501


        :return: The product_url of this Product.  # noqa: E501
        :rtype: str
        """
        return self._product_url

    @product_url.setter
    def product_url(self, product_url):
        """Sets the product_url of this Product.


        :param product_url: The product_url of this Product.  # noqa: E501
        :type: str
        """

        self._product_url = product_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Product, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Product):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

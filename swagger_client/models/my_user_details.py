# coding: utf-8

"""
    CMS-Backend API

    This is API documentation of CMS-Backend  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: htdevteam@hindustantimes.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MyUserDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'about': 'str',
        'alt_email_id': 'str',
        'bio': 'str',
        'bp_user': 'bool',
        'domain_id': 'str',
        'domain_name': 'str',
        'email_id': 'str',
        'facebook': 'str',
        'id': 'int',
        'is_active': 'int',
        'name': 'str',
        'picture_url': 'str',
        'role': 'str',
        'slug_name': 'str',
        'twitter': 'str',
        'user_types': 'list[str]',
        'username': 'str'
    }

    attribute_map = {
        'about': 'about',
        'alt_email_id': 'altEmailId',
        'bio': 'bio',
        'bp_user': 'bpUser',
        'domain_id': 'domainId',
        'domain_name': 'domainName',
        'email_id': 'emailId',
        'facebook': 'facebook',
        'id': 'id',
        'is_active': 'isActive',
        'name': 'name',
        'picture_url': 'pictureUrl',
        'role': 'role',
        'slug_name': 'slugName',
        'twitter': 'twitter',
        'user_types': 'userTypes',
        'username': 'username'
    }

    def __init__(self, about=None, alt_email_id=None, bio=None, bp_user=None, domain_id=None, domain_name=None, email_id=None, facebook=None, id=None, is_active=None, name=None, picture_url=None, role=None, slug_name=None, twitter=None, user_types=None, username=None):  # noqa: E501
        """MyUserDetails - a model defined in Swagger"""  # noqa: E501
        self._about = None
        self._alt_email_id = None
        self._bio = None
        self._bp_user = None
        self._domain_id = None
        self._domain_name = None
        self._email_id = None
        self._facebook = None
        self._id = None
        self._is_active = None
        self._name = None
        self._picture_url = None
        self._role = None
        self._slug_name = None
        self._twitter = None
        self._user_types = None
        self._username = None
        self.discriminator = None
        if about is not None:
            self.about = about
        if alt_email_id is not None:
            self.alt_email_id = alt_email_id
        if bio is not None:
            self.bio = bio
        if bp_user is not None:
            self.bp_user = bp_user
        if domain_id is not None:
            self.domain_id = domain_id
        if domain_name is not None:
            self.domain_name = domain_name
        if email_id is not None:
            self.email_id = email_id
        if facebook is not None:
            self.facebook = facebook
        if id is not None:
            self.id = id
        if is_active is not None:
            self.is_active = is_active
        if name is not None:
            self.name = name
        if picture_url is not None:
            self.picture_url = picture_url
        if role is not None:
            self.role = role
        if slug_name is not None:
            self.slug_name = slug_name
        if twitter is not None:
            self.twitter = twitter
        if user_types is not None:
            self.user_types = user_types
        if username is not None:
            self.username = username

    @property
    def about(self):
        """Gets the about of this MyUserDetails.  # noqa: E501


        :return: The about of this MyUserDetails.  # noqa: E501
        :rtype: str
        """
        return self._about

    @about.setter
    def about(self, about):
        """Sets the about of this MyUserDetails.


        :param about: The about of this MyUserDetails.  # noqa: E501
        :type: str
        """

        self._about = about

    @property
    def alt_email_id(self):
        """Gets the alt_email_id of this MyUserDetails.  # noqa: E501


        :return: The alt_email_id of this MyUserDetails.  # noqa: E501
        :rtype: str
        """
        return self._alt_email_id

    @alt_email_id.setter
    def alt_email_id(self, alt_email_id):
        """Sets the alt_email_id of this MyUserDetails.


        :param alt_email_id: The alt_email_id of this MyUserDetails.  # noqa: E501
        :type: str
        """

        self._alt_email_id = alt_email_id

    @property
    def bio(self):
        """Gets the bio of this MyUserDetails.  # noqa: E501


        :return: The bio of this MyUserDetails.  # noqa: E501
        :rtype: str
        """
        return self._bio

    @bio.setter
    def bio(self, bio):
        """Sets the bio of this MyUserDetails.


        :param bio: The bio of this MyUserDetails.  # noqa: E501
        :type: str
        """

        self._bio = bio

    @property
    def bp_user(self):
        """Gets the bp_user of this MyUserDetails.  # noqa: E501


        :return: The bp_user of this MyUserDetails.  # noqa: E501
        :rtype: bool
        """
        return self._bp_user

    @bp_user.setter
    def bp_user(self, bp_user):
        """Sets the bp_user of this MyUserDetails.


        :param bp_user: The bp_user of this MyUserDetails.  # noqa: E501
        :type: bool
        """

        self._bp_user = bp_user

    @property
    def domain_id(self):
        """Gets the domain_id of this MyUserDetails.  # noqa: E501


        :return: The domain_id of this MyUserDetails.  # noqa: E501
        :rtype: str
        """
        return self._domain_id

    @domain_id.setter
    def domain_id(self, domain_id):
        """Sets the domain_id of this MyUserDetails.


        :param domain_id: The domain_id of this MyUserDetails.  # noqa: E501
        :type: str
        """

        self._domain_id = domain_id

    @property
    def domain_name(self):
        """Gets the domain_name of this MyUserDetails.  # noqa: E501


        :return: The domain_name of this MyUserDetails.  # noqa: E501
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this MyUserDetails.


        :param domain_name: The domain_name of this MyUserDetails.  # noqa: E501
        :type: str
        """

        self._domain_name = domain_name

    @property
    def email_id(self):
        """Gets the email_id of this MyUserDetails.  # noqa: E501


        :return: The email_id of this MyUserDetails.  # noqa: E501
        :rtype: str
        """
        return self._email_id

    @email_id.setter
    def email_id(self, email_id):
        """Sets the email_id of this MyUserDetails.


        :param email_id: The email_id of this MyUserDetails.  # noqa: E501
        :type: str
        """

        self._email_id = email_id

    @property
    def facebook(self):
        """Gets the facebook of this MyUserDetails.  # noqa: E501


        :return: The facebook of this MyUserDetails.  # noqa: E501
        :rtype: str
        """
        return self._facebook

    @facebook.setter
    def facebook(self, facebook):
        """Sets the facebook of this MyUserDetails.


        :param facebook: The facebook of this MyUserDetails.  # noqa: E501
        :type: str
        """

        self._facebook = facebook

    @property
    def id(self):
        """Gets the id of this MyUserDetails.  # noqa: E501


        :return: The id of this MyUserDetails.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MyUserDetails.


        :param id: The id of this MyUserDetails.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def is_active(self):
        """Gets the is_active of this MyUserDetails.  # noqa: E501


        :return: The is_active of this MyUserDetails.  # noqa: E501
        :rtype: int
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this MyUserDetails.


        :param is_active: The is_active of this MyUserDetails.  # noqa: E501
        :type: int
        """

        self._is_active = is_active

    @property
    def name(self):
        """Gets the name of this MyUserDetails.  # noqa: E501


        :return: The name of this MyUserDetails.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MyUserDetails.


        :param name: The name of this MyUserDetails.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def picture_url(self):
        """Gets the picture_url of this MyUserDetails.  # noqa: E501


        :return: The picture_url of this MyUserDetails.  # noqa: E501
        :rtype: str
        """
        return self._picture_url

    @picture_url.setter
    def picture_url(self, picture_url):
        """Sets the picture_url of this MyUserDetails.


        :param picture_url: The picture_url of this MyUserDetails.  # noqa: E501
        :type: str
        """

        self._picture_url = picture_url

    @property
    def role(self):
        """Gets the role of this MyUserDetails.  # noqa: E501


        :return: The role of this MyUserDetails.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this MyUserDetails.


        :param role: The role of this MyUserDetails.  # noqa: E501
        :type: str
        """

        self._role = role

    @property
    def slug_name(self):
        """Gets the slug_name of this MyUserDetails.  # noqa: E501


        :return: The slug_name of this MyUserDetails.  # noqa: E501
        :rtype: str
        """
        return self._slug_name

    @slug_name.setter
    def slug_name(self, slug_name):
        """Sets the slug_name of this MyUserDetails.


        :param slug_name: The slug_name of this MyUserDetails.  # noqa: E501
        :type: str
        """

        self._slug_name = slug_name

    @property
    def twitter(self):
        """Gets the twitter of this MyUserDetails.  # noqa: E501


        :return: The twitter of this MyUserDetails.  # noqa: E501
        :rtype: str
        """
        return self._twitter

    @twitter.setter
    def twitter(self, twitter):
        """Sets the twitter of this MyUserDetails.


        :param twitter: The twitter of this MyUserDetails.  # noqa: E501
        :type: str
        """

        self._twitter = twitter

    @property
    def user_types(self):
        """Gets the user_types of this MyUserDetails.  # noqa: E501


        :return: The user_types of this MyUserDetails.  # noqa: E501
        :rtype: list[str]
        """
        return self._user_types

    @user_types.setter
    def user_types(self, user_types):
        """Sets the user_types of this MyUserDetails.


        :param user_types: The user_types of this MyUserDetails.  # noqa: E501
        :type: list[str]
        """

        self._user_types = user_types

    @property
    def username(self):
        """Gets the username of this MyUserDetails.  # noqa: E501


        :return: The username of this MyUserDetails.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this MyUserDetails.


        :param username: The username of this MyUserDetails.  # noqa: E501
        :type: str
        """

        self._username = username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MyUserDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MyUserDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

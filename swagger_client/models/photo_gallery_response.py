# coding: utf-8

"""
    CMS-Backend API

    This is API documentation of CMS-Backend  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: htdevteam@hindustantimes.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PhotoGalleryResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_date': 'str',
        'domain_name': 'str',
        'headline': 'str',
        'image_list': 'list[ImageDataGallery]',
        'last_published_date': 'str',
        'nid': 'int'
    }

    attribute_map = {
        'created_date': 'createdDate',
        'domain_name': 'domainName',
        'headline': 'headline',
        'image_list': 'imageList',
        'last_published_date': 'lastPublishedDate',
        'nid': 'nid'
    }

    def __init__(self, created_date=None, domain_name=None, headline=None, image_list=None, last_published_date=None, nid=None):  # noqa: E501
        """PhotoGalleryResponse - a model defined in Swagger"""  # noqa: E501
        self._created_date = None
        self._domain_name = None
        self._headline = None
        self._image_list = None
        self._last_published_date = None
        self._nid = None
        self.discriminator = None
        if created_date is not None:
            self.created_date = created_date
        if domain_name is not None:
            self.domain_name = domain_name
        if headline is not None:
            self.headline = headline
        if image_list is not None:
            self.image_list = image_list
        if last_published_date is not None:
            self.last_published_date = last_published_date
        if nid is not None:
            self.nid = nid

    @property
    def created_date(self):
        """Gets the created_date of this PhotoGalleryResponse.  # noqa: E501


        :return: The created_date of this PhotoGalleryResponse.  # noqa: E501
        :rtype: str
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this PhotoGalleryResponse.


        :param created_date: The created_date of this PhotoGalleryResponse.  # noqa: E501
        :type: str
        """

        self._created_date = created_date

    @property
    def domain_name(self):
        """Gets the domain_name of this PhotoGalleryResponse.  # noqa: E501


        :return: The domain_name of this PhotoGalleryResponse.  # noqa: E501
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this PhotoGalleryResponse.


        :param domain_name: The domain_name of this PhotoGalleryResponse.  # noqa: E501
        :type: str
        """

        self._domain_name = domain_name

    @property
    def headline(self):
        """Gets the headline of this PhotoGalleryResponse.  # noqa: E501


        :return: The headline of this PhotoGalleryResponse.  # noqa: E501
        :rtype: str
        """
        return self._headline

    @headline.setter
    def headline(self, headline):
        """Sets the headline of this PhotoGalleryResponse.


        :param headline: The headline of this PhotoGalleryResponse.  # noqa: E501
        :type: str
        """

        self._headline = headline

    @property
    def image_list(self):
        """Gets the image_list of this PhotoGalleryResponse.  # noqa: E501


        :return: The image_list of this PhotoGalleryResponse.  # noqa: E501
        :rtype: list[ImageDataGallery]
        """
        return self._image_list

    @image_list.setter
    def image_list(self, image_list):
        """Sets the image_list of this PhotoGalleryResponse.


        :param image_list: The image_list of this PhotoGalleryResponse.  # noqa: E501
        :type: list[ImageDataGallery]
        """

        self._image_list = image_list

    @property
    def last_published_date(self):
        """Gets the last_published_date of this PhotoGalleryResponse.  # noqa: E501


        :return: The last_published_date of this PhotoGalleryResponse.  # noqa: E501
        :rtype: str
        """
        return self._last_published_date

    @last_published_date.setter
    def last_published_date(self, last_published_date):
        """Sets the last_published_date of this PhotoGalleryResponse.


        :param last_published_date: The last_published_date of this PhotoGalleryResponse.  # noqa: E501
        :type: str
        """

        self._last_published_date = last_published_date

    @property
    def nid(self):
        """Gets the nid of this PhotoGalleryResponse.  # noqa: E501


        :return: The nid of this PhotoGalleryResponse.  # noqa: E501
        :rtype: int
        """
        return self._nid

    @nid.setter
    def nid(self, nid):
        """Sets the nid of this PhotoGalleryResponse.


        :param nid: The nid of this PhotoGalleryResponse.  # noqa: E501
        :type: int
        """

        self._nid = nid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PhotoGalleryResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PhotoGalleryResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    CMS-Backend API

    This is API documentation of CMS-Backend  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: htdevteam@hindustantimes.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CategoryMaster(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active_inactive': 'bool',
        'category_description': 'str',
        'category_name': 'str',
        'deleted': 'bool',
        'id': 'str',
        'parent_category': 'str'
    }

    attribute_map = {
        'active_inactive': 'activeInactive',
        'category_description': 'categoryDescription',
        'category_name': 'categoryName',
        'deleted': 'deleted',
        'id': 'id',
        'parent_category': 'parentCategory'
    }

    def __init__(self, active_inactive=None, category_description=None, category_name=None, deleted=None, id=None, parent_category=None):  # noqa: E501
        """CategoryMaster - a model defined in Swagger"""  # noqa: E501
        self._active_inactive = None
        self._category_description = None
        self._category_name = None
        self._deleted = None
        self._id = None
        self._parent_category = None
        self.discriminator = None
        if active_inactive is not None:
            self.active_inactive = active_inactive
        if category_description is not None:
            self.category_description = category_description
        if category_name is not None:
            self.category_name = category_name
        if deleted is not None:
            self.deleted = deleted
        if id is not None:
            self.id = id
        if parent_category is not None:
            self.parent_category = parent_category

    @property
    def active_inactive(self):
        """Gets the active_inactive of this CategoryMaster.  # noqa: E501


        :return: The active_inactive of this CategoryMaster.  # noqa: E501
        :rtype: bool
        """
        return self._active_inactive

    @active_inactive.setter
    def active_inactive(self, active_inactive):
        """Sets the active_inactive of this CategoryMaster.


        :param active_inactive: The active_inactive of this CategoryMaster.  # noqa: E501
        :type: bool
        """

        self._active_inactive = active_inactive

    @property
    def category_description(self):
        """Gets the category_description of this CategoryMaster.  # noqa: E501


        :return: The category_description of this CategoryMaster.  # noqa: E501
        :rtype: str
        """
        return self._category_description

    @category_description.setter
    def category_description(self, category_description):
        """Sets the category_description of this CategoryMaster.


        :param category_description: The category_description of this CategoryMaster.  # noqa: E501
        :type: str
        """

        self._category_description = category_description

    @property
    def category_name(self):
        """Gets the category_name of this CategoryMaster.  # noqa: E501


        :return: The category_name of this CategoryMaster.  # noqa: E501
        :rtype: str
        """
        return self._category_name

    @category_name.setter
    def category_name(self, category_name):
        """Sets the category_name of this CategoryMaster.


        :param category_name: The category_name of this CategoryMaster.  # noqa: E501
        :type: str
        """

        self._category_name = category_name

    @property
    def deleted(self):
        """Gets the deleted of this CategoryMaster.  # noqa: E501


        :return: The deleted of this CategoryMaster.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this CategoryMaster.


        :param deleted: The deleted of this CategoryMaster.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def id(self):
        """Gets the id of this CategoryMaster.  # noqa: E501


        :return: The id of this CategoryMaster.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CategoryMaster.


        :param id: The id of this CategoryMaster.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def parent_category(self):
        """Gets the parent_category of this CategoryMaster.  # noqa: E501


        :return: The parent_category of this CategoryMaster.  # noqa: E501
        :rtype: str
        """
        return self._parent_category

    @parent_category.setter
    def parent_category(self, parent_category):
        """Sets the parent_category of this CategoryMaster.


        :param parent_category: The parent_category of this CategoryMaster.  # noqa: E501
        :type: str
        """

        self._parent_category = parent_category

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CategoryMaster, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CategoryMaster):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

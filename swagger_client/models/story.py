# coding: utf-8

"""
    CMS-Backend API

    This is API documentation of CMS-Backend  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: htdevteam@hindustantimes.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Story(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'article_type': 'str',
        'auto_backlink_status': 'AutoBacklinkStatus',
        'auto_published': 'bool',
        'browser_notification_headline': 'str',
        'changes_published': 'bool',
        'collection_stories_version': 'int',
        'company_chart_added': 'bool',
        'cover_image_url': 'str',
        'created_by': 'str',
        'created_date': 'str',
        'cross_domain_stories': 'list[int]',
        'cross_domain_story_id': 'int',
        'crosstenant_photo_gallery': 'bool',
        'domain_id': 'str',
        'elements': 'list[int]',
        'embargo_at': 'int',
        'embargo_by': 'str',
        'embargo_date': 'str',
        'expire_at': 'int',
        'expiry_date': 'str',
        'facebook_headline': 'str',
        'first_published_date': 'str',
        'h2_header_headline': 'str',
        'h3_header_headline': 'str',
        'headline': 'str',
        'id': 'int',
        'image_amp_validated': 'bool',
        'intro_body': 'str',
        'intro_elements': 'list[int]',
        'is_deleted': 'int',
        'isrelated_video_added': 'bool',
        'last_modified_by': 'str',
        'last_modified_by_user_name': 'str',
        'last_modified_date': 'str',
        'last_published_by': 'str',
        'last_published_by_user_name': 'str',
        'last_published_date': 'str',
        'last_published_headline': 'str',
        'last_published_summary': 'str',
        'last_request_id': 'str',
        'lead_media': 'LeadMedia',
        'lead_media_gif': 'LeadMediaGif',
        'link_story_id': 'int',
        'locked_by_user_id': 'str',
        'locked_by_user_name': 'str',
        'locked_date': 'str',
        'manual_summary': 'bool',
        'metadata': 'Metadata',
        'migration_info_web_url': 'str',
        'migration_info_web_url_migrated': 'bool',
        'migration_info_web_url_published': 'bool',
        'mobile_app_notification_headline': 'str',
        'mobile_headline': 'str',
        'newsletter_headline': 'str',
        'newsletter_summary': 'str',
        'next_stories': 'list[Story]',
        'old_uuid': 'str',
        'pinned_articles': 'list[int]',
        'quick_read_status': 'str',
        'quick_read_summary': 'str',
        'quick_read_summary_api': 'str',
        'read_by_users': 'list[str]',
        'related': 'list[int]',
        'related_how_to': 'list[int]',
        'related_video_element_ids': 'list[int]',
        'scheduled_at': 'int',
        'scheduled_by': 'str',
        'scheduled_date': 'str',
        'show_related': 'bool',
        'slide_animation': 'str',
        'social': 'dict(str, bool)',
        'social_counter': 'dict(str, int)',
        'social_list': 'dict(str, list[str])',
        'soft_published': 'bool',
        'suggest': 'Completion',
        'summary': 'str',
        'tag_twitter_author': 'bool',
        'time_to_read': 'int',
        'title': 'str',
        'title_wo_sp_char': 'str',
        'topic_migrated': 'bool',
        'topic_published': 'bool',
        'twitter_headline': 'str',
        'type': 'str',
        'updating_homepage_flag': 'bool',
        'url_headline': 'str',
        'web_engage_scheduled_at': 'int',
        'web_engage_scheduled_date': 'str',
        'web_id': 'str',
        'web_story_template': 'bool',
        'webengage_notification_title': 'str',
        'wire_feed_id': 'str'
    }

    attribute_map = {
        'article_type': 'articleType',
        'auto_backlink_status': 'autoBacklinkStatus',
        'auto_published': 'autoPublished',
        'browser_notification_headline': 'browserNotificationHeadline',
        'changes_published': 'changesPublished',
        'collection_stories_version': 'collectionStoriesVersion',
        'company_chart_added': 'companyChartAdded',
        'cover_image_url': 'coverImageUrl',
        'created_by': 'createdBy',
        'created_date': 'createdDate',
        'cross_domain_stories': 'crossDomainStories',
        'cross_domain_story_id': 'crossDomainStoryId',
        'crosstenant_photo_gallery': 'crosstenantPhotoGallery',
        'domain_id': 'domainId',
        'elements': 'elements',
        'embargo_at': 'embargoAt',
        'embargo_by': 'embargoBy',
        'embargo_date': 'embargoDate',
        'expire_at': 'expireAt',
        'expiry_date': 'expiryDate',
        'facebook_headline': 'facebookHeadline',
        'first_published_date': 'firstPublishedDate',
        'h2_header_headline': 'h2HeaderHeadline',
        'h3_header_headline': 'h3HeaderHeadline',
        'headline': 'headline',
        'id': 'id',
        'image_amp_validated': 'imageAmpValidated',
        'intro_body': 'introBody',
        'intro_elements': 'introElements',
        'is_deleted': 'isDeleted',
        'isrelated_video_added': 'isrelatedVideoAdded',
        'last_modified_by': 'lastModifiedBy',
        'last_modified_by_user_name': 'lastModifiedByUserName',
        'last_modified_date': 'lastModifiedDate',
        'last_published_by': 'lastPublishedBy',
        'last_published_by_user_name': 'lastPublishedByUserName',
        'last_published_date': 'lastPublishedDate',
        'last_published_headline': 'lastPublishedHeadline',
        'last_published_summary': 'lastPublishedSummary',
        'last_request_id': 'lastRequestId',
        'lead_media': 'leadMedia',
        'lead_media_gif': 'leadMediaGif',
        'link_story_id': 'linkStoryId',
        'locked_by_user_id': 'lockedByUserId',
        'locked_by_user_name': 'lockedByUserName',
        'locked_date': 'lockedDate',
        'manual_summary': 'manualSummary',
        'metadata': 'metadata',
        'migration_info_web_url': 'migrationInfoWebUrl',
        'migration_info_web_url_migrated': 'migrationInfoWebUrlMigrated',
        'migration_info_web_url_published': 'migrationInfoWebUrlPublished',
        'mobile_app_notification_headline': 'mobileAppNotificationHeadline',
        'mobile_headline': 'mobileHeadline',
        'newsletter_headline': 'newsletterHeadline',
        'newsletter_summary': 'newsletterSummary',
        'next_stories': 'nextStories',
        'old_uuid': 'oldUuid',
        'pinned_articles': 'pinnedArticles',
        'quick_read_status': 'quickReadStatus',
        'quick_read_summary': 'quickReadSummary',
        'quick_read_summary_api': 'quickReadSummaryAPI',
        'read_by_users': 'readByUsers',
        'related': 'related',
        'related_how_to': 'relatedHowTo',
        'related_video_element_ids': 'relatedVideoElementIds',
        'scheduled_at': 'scheduledAt',
        'scheduled_by': 'scheduledBy',
        'scheduled_date': 'scheduledDate',
        'show_related': 'showRelated',
        'slide_animation': 'slideAnimation',
        'social': 'social',
        'social_counter': 'socialCounter',
        'social_list': 'socialList',
        'soft_published': 'softPublished',
        'suggest': 'suggest',
        'summary': 'summary',
        'tag_twitter_author': 'tagTwitterAuthor',
        'time_to_read': 'timeToRead',
        'title': 'title',
        'title_wo_sp_char': 'titleWoSpChar',
        'topic_migrated': 'topicMigrated',
        'topic_published': 'topicPublished',
        'twitter_headline': 'twitterHeadline',
        'type': 'type',
        'updating_homepage_flag': 'updatingHomepageFlag',
        'url_headline': 'urlHeadline',
        'web_engage_scheduled_at': 'webEngageScheduledAt',
        'web_engage_scheduled_date': 'webEngageScheduledDate',
        'web_id': 'webId',
        'web_story_template': 'webStoryTemplate',
        'webengage_notification_title': 'webengageNotificationTitle',
        'wire_feed_id': 'wireFeedId'
    }

    def __init__(self, article_type=None, auto_backlink_status=None, auto_published=None, browser_notification_headline=None, changes_published=None, collection_stories_version=None, company_chart_added=None, cover_image_url=None, created_by=None, created_date=None, cross_domain_stories=None, cross_domain_story_id=None, crosstenant_photo_gallery=None, domain_id=None, elements=None, embargo_at=None, embargo_by=None, embargo_date=None, expire_at=None, expiry_date=None, facebook_headline=None, first_published_date=None, h2_header_headline=None, h3_header_headline=None, headline=None, id=None, image_amp_validated=None, intro_body=None, intro_elements=None, is_deleted=None, isrelated_video_added=None, last_modified_by=None, last_modified_by_user_name=None, last_modified_date=None, last_published_by=None, last_published_by_user_name=None, last_published_date=None, last_published_headline=None, last_published_summary=None, last_request_id=None, lead_media=None, lead_media_gif=None, link_story_id=None, locked_by_user_id=None, locked_by_user_name=None, locked_date=None, manual_summary=None, metadata=None, migration_info_web_url=None, migration_info_web_url_migrated=None, migration_info_web_url_published=None, mobile_app_notification_headline=None, mobile_headline=None, newsletter_headline=None, newsletter_summary=None, next_stories=None, old_uuid=None, pinned_articles=None, quick_read_status=None, quick_read_summary=None, quick_read_summary_api=None, read_by_users=None, related=None, related_how_to=None, related_video_element_ids=None, scheduled_at=None, scheduled_by=None, scheduled_date=None, show_related=None, slide_animation=None, social=None, social_counter=None, social_list=None, soft_published=None, suggest=None, summary=None, tag_twitter_author=None, time_to_read=None, title=None, title_wo_sp_char=None, topic_migrated=None, topic_published=None, twitter_headline=None, type=None, updating_homepage_flag=None, url_headline=None, web_engage_scheduled_at=None, web_engage_scheduled_date=None, web_id=None, web_story_template=None, webengage_notification_title=None, wire_feed_id=None):  # noqa: E501
        """Story - a model defined in Swagger"""  # noqa: E501
        self._article_type = None
        self._auto_backlink_status = None
        self._auto_published = None
        self._browser_notification_headline = None
        self._changes_published = None
        self._collection_stories_version = None
        self._company_chart_added = None
        self._cover_image_url = None
        self._created_by = None
        self._created_date = None
        self._cross_domain_stories = None
        self._cross_domain_story_id = None
        self._crosstenant_photo_gallery = None
        self._domain_id = None
        self._elements = None
        self._embargo_at = None
        self._embargo_by = None
        self._embargo_date = None
        self._expire_at = None
        self._expiry_date = None
        self._facebook_headline = None
        self._first_published_date = None
        self._h2_header_headline = None
        self._h3_header_headline = None
        self._headline = None
        self._id = None
        self._image_amp_validated = None
        self._intro_body = None
        self._intro_elements = None
        self._is_deleted = None
        self._isrelated_video_added = None
        self._last_modified_by = None
        self._last_modified_by_user_name = None
        self._last_modified_date = None
        self._last_published_by = None
        self._last_published_by_user_name = None
        self._last_published_date = None
        self._last_published_headline = None
        self._last_published_summary = None
        self._last_request_id = None
        self._lead_media = None
        self._lead_media_gif = None
        self._link_story_id = None
        self._locked_by_user_id = None
        self._locked_by_user_name = None
        self._locked_date = None
        self._manual_summary = None
        self._metadata = None
        self._migration_info_web_url = None
        self._migration_info_web_url_migrated = None
        self._migration_info_web_url_published = None
        self._mobile_app_notification_headline = None
        self._mobile_headline = None
        self._newsletter_headline = None
        self._newsletter_summary = None
        self._next_stories = None
        self._old_uuid = None
        self._pinned_articles = None
        self._quick_read_status = None
        self._quick_read_summary = None
        self._quick_read_summary_api = None
        self._read_by_users = None
        self._related = None
        self._related_how_to = None
        self._related_video_element_ids = None
        self._scheduled_at = None
        self._scheduled_by = None
        self._scheduled_date = None
        self._show_related = None
        self._slide_animation = None
        self._social = None
        self._social_counter = None
        self._social_list = None
        self._soft_published = None
        self._suggest = None
        self._summary = None
        self._tag_twitter_author = None
        self._time_to_read = None
        self._title = None
        self._title_wo_sp_char = None
        self._topic_migrated = None
        self._topic_published = None
        self._twitter_headline = None
        self._type = None
        self._updating_homepage_flag = None
        self._url_headline = None
        self._web_engage_scheduled_at = None
        self._web_engage_scheduled_date = None
        self._web_id = None
        self._web_story_template = None
        self._webengage_notification_title = None
        self._wire_feed_id = None
        self.discriminator = None
        if article_type is not None:
            self.article_type = article_type
        if auto_backlink_status is not None:
            self.auto_backlink_status = auto_backlink_status
        if auto_published is not None:
            self.auto_published = auto_published
        if browser_notification_headline is not None:
            self.browser_notification_headline = browser_notification_headline
        if changes_published is not None:
            self.changes_published = changes_published
        if collection_stories_version is not None:
            self.collection_stories_version = collection_stories_version
        if company_chart_added is not None:
            self.company_chart_added = company_chart_added
        if cover_image_url is not None:
            self.cover_image_url = cover_image_url
        if created_by is not None:
            self.created_by = created_by
        if created_date is not None:
            self.created_date = created_date
        if cross_domain_stories is not None:
            self.cross_domain_stories = cross_domain_stories
        if cross_domain_story_id is not None:
            self.cross_domain_story_id = cross_domain_story_id
        if crosstenant_photo_gallery is not None:
            self.crosstenant_photo_gallery = crosstenant_photo_gallery
        if domain_id is not None:
            self.domain_id = domain_id
        if elements is not None:
            self.elements = elements
        if embargo_at is not None:
            self.embargo_at = embargo_at
        if embargo_by is not None:
            self.embargo_by = embargo_by
        if embargo_date is not None:
            self.embargo_date = embargo_date
        if expire_at is not None:
            self.expire_at = expire_at
        if expiry_date is not None:
            self.expiry_date = expiry_date
        if facebook_headline is not None:
            self.facebook_headline = facebook_headline
        if first_published_date is not None:
            self.first_published_date = first_published_date
        if h2_header_headline is not None:
            self.h2_header_headline = h2_header_headline
        if h3_header_headline is not None:
            self.h3_header_headline = h3_header_headline
        if headline is not None:
            self.headline = headline
        if id is not None:
            self.id = id
        if image_amp_validated is not None:
            self.image_amp_validated = image_amp_validated
        if intro_body is not None:
            self.intro_body = intro_body
        if intro_elements is not None:
            self.intro_elements = intro_elements
        if is_deleted is not None:
            self.is_deleted = is_deleted
        if isrelated_video_added is not None:
            self.isrelated_video_added = isrelated_video_added
        if last_modified_by is not None:
            self.last_modified_by = last_modified_by
        if last_modified_by_user_name is not None:
            self.last_modified_by_user_name = last_modified_by_user_name
        if last_modified_date is not None:
            self.last_modified_date = last_modified_date
        if last_published_by is not None:
            self.last_published_by = last_published_by
        if last_published_by_user_name is not None:
            self.last_published_by_user_name = last_published_by_user_name
        if last_published_date is not None:
            self.last_published_date = last_published_date
        if last_published_headline is not None:
            self.last_published_headline = last_published_headline
        if last_published_summary is not None:
            self.last_published_summary = last_published_summary
        if last_request_id is not None:
            self.last_request_id = last_request_id
        if lead_media is not None:
            self.lead_media = lead_media
        if lead_media_gif is not None:
            self.lead_media_gif = lead_media_gif
        if link_story_id is not None:
            self.link_story_id = link_story_id
        if locked_by_user_id is not None:
            self.locked_by_user_id = locked_by_user_id
        if locked_by_user_name is not None:
            self.locked_by_user_name = locked_by_user_name
        if locked_date is not None:
            self.locked_date = locked_date
        if manual_summary is not None:
            self.manual_summary = manual_summary
        if metadata is not None:
            self.metadata = metadata
        if migration_info_web_url is not None:
            self.migration_info_web_url = migration_info_web_url
        if migration_info_web_url_migrated is not None:
            self.migration_info_web_url_migrated = migration_info_web_url_migrated
        if migration_info_web_url_published is not None:
            self.migration_info_web_url_published = migration_info_web_url_published
        if mobile_app_notification_headline is not None:
            self.mobile_app_notification_headline = mobile_app_notification_headline
        if mobile_headline is not None:
            self.mobile_headline = mobile_headline
        if newsletter_headline is not None:
            self.newsletter_headline = newsletter_headline
        if newsletter_summary is not None:
            self.newsletter_summary = newsletter_summary
        if next_stories is not None:
            self.next_stories = next_stories
        if old_uuid is not None:
            self.old_uuid = old_uuid
        if pinned_articles is not None:
            self.pinned_articles = pinned_articles
        if quick_read_status is not None:
            self.quick_read_status = quick_read_status
        if quick_read_summary is not None:
            self.quick_read_summary = quick_read_summary
        if quick_read_summary_api is not None:
            self.quick_read_summary_api = quick_read_summary_api
        if read_by_users is not None:
            self.read_by_users = read_by_users
        if related is not None:
            self.related = related
        if related_how_to is not None:
            self.related_how_to = related_how_to
        if related_video_element_ids is not None:
            self.related_video_element_ids = related_video_element_ids
        if scheduled_at is not None:
            self.scheduled_at = scheduled_at
        if scheduled_by is not None:
            self.scheduled_by = scheduled_by
        if scheduled_date is not None:
            self.scheduled_date = scheduled_date
        if show_related is not None:
            self.show_related = show_related
        if slide_animation is not None:
            self.slide_animation = slide_animation
        if social is not None:
            self.social = social
        if social_counter is not None:
            self.social_counter = social_counter
        if social_list is not None:
            self.social_list = social_list
        if soft_published is not None:
            self.soft_published = soft_published
        if suggest is not None:
            self.suggest = suggest
        if summary is not None:
            self.summary = summary
        if tag_twitter_author is not None:
            self.tag_twitter_author = tag_twitter_author
        if time_to_read is not None:
            self.time_to_read = time_to_read
        if title is not None:
            self.title = title
        if title_wo_sp_char is not None:
            self.title_wo_sp_char = title_wo_sp_char
        if topic_migrated is not None:
            self.topic_migrated = topic_migrated
        if topic_published is not None:
            self.topic_published = topic_published
        if twitter_headline is not None:
            self.twitter_headline = twitter_headline
        if type is not None:
            self.type = type
        if updating_homepage_flag is not None:
            self.updating_homepage_flag = updating_homepage_flag
        if url_headline is not None:
            self.url_headline = url_headline
        if web_engage_scheduled_at is not None:
            self.web_engage_scheduled_at = web_engage_scheduled_at
        if web_engage_scheduled_date is not None:
            self.web_engage_scheduled_date = web_engage_scheduled_date
        if web_id is not None:
            self.web_id = web_id
        if web_story_template is not None:
            self.web_story_template = web_story_template
        if webengage_notification_title is not None:
            self.webengage_notification_title = webengage_notification_title
        if wire_feed_id is not None:
            self.wire_feed_id = wire_feed_id

    @property
    def article_type(self):
        """Gets the article_type of this Story.  # noqa: E501


        :return: The article_type of this Story.  # noqa: E501
        :rtype: str
        """
        return self._article_type

    @article_type.setter
    def article_type(self, article_type):
        """Sets the article_type of this Story.


        :param article_type: The article_type of this Story.  # noqa: E501
        :type: str
        """

        self._article_type = article_type

    @property
    def auto_backlink_status(self):
        """Gets the auto_backlink_status of this Story.  # noqa: E501


        :return: The auto_backlink_status of this Story.  # noqa: E501
        :rtype: AutoBacklinkStatus
        """
        return self._auto_backlink_status

    @auto_backlink_status.setter
    def auto_backlink_status(self, auto_backlink_status):
        """Sets the auto_backlink_status of this Story.


        :param auto_backlink_status: The auto_backlink_status of this Story.  # noqa: E501
        :type: AutoBacklinkStatus
        """

        self._auto_backlink_status = auto_backlink_status

    @property
    def auto_published(self):
        """Gets the auto_published of this Story.  # noqa: E501


        :return: The auto_published of this Story.  # noqa: E501
        :rtype: bool
        """
        return self._auto_published

    @auto_published.setter
    def auto_published(self, auto_published):
        """Sets the auto_published of this Story.


        :param auto_published: The auto_published of this Story.  # noqa: E501
        :type: bool
        """

        self._auto_published = auto_published

    @property
    def browser_notification_headline(self):
        """Gets the browser_notification_headline of this Story.  # noqa: E501


        :return: The browser_notification_headline of this Story.  # noqa: E501
        :rtype: str
        """
        return self._browser_notification_headline

    @browser_notification_headline.setter
    def browser_notification_headline(self, browser_notification_headline):
        """Sets the browser_notification_headline of this Story.


        :param browser_notification_headline: The browser_notification_headline of this Story.  # noqa: E501
        :type: str
        """

        self._browser_notification_headline = browser_notification_headline

    @property
    def changes_published(self):
        """Gets the changes_published of this Story.  # noqa: E501


        :return: The changes_published of this Story.  # noqa: E501
        :rtype: bool
        """
        return self._changes_published

    @changes_published.setter
    def changes_published(self, changes_published):
        """Sets the changes_published of this Story.


        :param changes_published: The changes_published of this Story.  # noqa: E501
        :type: bool
        """

        self._changes_published = changes_published

    @property
    def collection_stories_version(self):
        """Gets the collection_stories_version of this Story.  # noqa: E501


        :return: The collection_stories_version of this Story.  # noqa: E501
        :rtype: int
        """
        return self._collection_stories_version

    @collection_stories_version.setter
    def collection_stories_version(self, collection_stories_version):
        """Sets the collection_stories_version of this Story.


        :param collection_stories_version: The collection_stories_version of this Story.  # noqa: E501
        :type: int
        """

        self._collection_stories_version = collection_stories_version

    @property
    def company_chart_added(self):
        """Gets the company_chart_added of this Story.  # noqa: E501


        :return: The company_chart_added of this Story.  # noqa: E501
        :rtype: bool
        """
        return self._company_chart_added

    @company_chart_added.setter
    def company_chart_added(self, company_chart_added):
        """Sets the company_chart_added of this Story.


        :param company_chart_added: The company_chart_added of this Story.  # noqa: E501
        :type: bool
        """

        self._company_chart_added = company_chart_added

    @property
    def cover_image_url(self):
        """Gets the cover_image_url of this Story.  # noqa: E501


        :return: The cover_image_url of this Story.  # noqa: E501
        :rtype: str
        """
        return self._cover_image_url

    @cover_image_url.setter
    def cover_image_url(self, cover_image_url):
        """Sets the cover_image_url of this Story.


        :param cover_image_url: The cover_image_url of this Story.  # noqa: E501
        :type: str
        """

        self._cover_image_url = cover_image_url

    @property
    def created_by(self):
        """Gets the created_by of this Story.  # noqa: E501


        :return: The created_by of this Story.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Story.


        :param created_by: The created_by of this Story.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def created_date(self):
        """Gets the created_date of this Story.  # noqa: E501


        :return: The created_date of this Story.  # noqa: E501
        :rtype: str
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this Story.


        :param created_date: The created_date of this Story.  # noqa: E501
        :type: str
        """

        self._created_date = created_date

    @property
    def cross_domain_stories(self):
        """Gets the cross_domain_stories of this Story.  # noqa: E501


        :return: The cross_domain_stories of this Story.  # noqa: E501
        :rtype: list[int]
        """
        return self._cross_domain_stories

    @cross_domain_stories.setter
    def cross_domain_stories(self, cross_domain_stories):
        """Sets the cross_domain_stories of this Story.


        :param cross_domain_stories: The cross_domain_stories of this Story.  # noqa: E501
        :type: list[int]
        """

        self._cross_domain_stories = cross_domain_stories

    @property
    def cross_domain_story_id(self):
        """Gets the cross_domain_story_id of this Story.  # noqa: E501


        :return: The cross_domain_story_id of this Story.  # noqa: E501
        :rtype: int
        """
        return self._cross_domain_story_id

    @cross_domain_story_id.setter
    def cross_domain_story_id(self, cross_domain_story_id):
        """Sets the cross_domain_story_id of this Story.


        :param cross_domain_story_id: The cross_domain_story_id of this Story.  # noqa: E501
        :type: int
        """

        self._cross_domain_story_id = cross_domain_story_id

    @property
    def crosstenant_photo_gallery(self):
        """Gets the crosstenant_photo_gallery of this Story.  # noqa: E501


        :return: The crosstenant_photo_gallery of this Story.  # noqa: E501
        :rtype: bool
        """
        return self._crosstenant_photo_gallery

    @crosstenant_photo_gallery.setter
    def crosstenant_photo_gallery(self, crosstenant_photo_gallery):
        """Sets the crosstenant_photo_gallery of this Story.


        :param crosstenant_photo_gallery: The crosstenant_photo_gallery of this Story.  # noqa: E501
        :type: bool
        """

        self._crosstenant_photo_gallery = crosstenant_photo_gallery

    @property
    def domain_id(self):
        """Gets the domain_id of this Story.  # noqa: E501


        :return: The domain_id of this Story.  # noqa: E501
        :rtype: str
        """
        return self._domain_id

    @domain_id.setter
    def domain_id(self, domain_id):
        """Sets the domain_id of this Story.


        :param domain_id: The domain_id of this Story.  # noqa: E501
        :type: str
        """

        self._domain_id = domain_id

    @property
    def elements(self):
        """Gets the elements of this Story.  # noqa: E501


        :return: The elements of this Story.  # noqa: E501
        :rtype: list[int]
        """
        return self._elements

    @elements.setter
    def elements(self, elements):
        """Sets the elements of this Story.


        :param elements: The elements of this Story.  # noqa: E501
        :type: list[int]
        """

        self._elements = elements

    @property
    def embargo_at(self):
        """Gets the embargo_at of this Story.  # noqa: E501


        :return: The embargo_at of this Story.  # noqa: E501
        :rtype: int
        """
        return self._embargo_at

    @embargo_at.setter
    def embargo_at(self, embargo_at):
        """Sets the embargo_at of this Story.


        :param embargo_at: The embargo_at of this Story.  # noqa: E501
        :type: int
        """

        self._embargo_at = embargo_at

    @property
    def embargo_by(self):
        """Gets the embargo_by of this Story.  # noqa: E501


        :return: The embargo_by of this Story.  # noqa: E501
        :rtype: str
        """
        return self._embargo_by

    @embargo_by.setter
    def embargo_by(self, embargo_by):
        """Sets the embargo_by of this Story.


        :param embargo_by: The embargo_by of this Story.  # noqa: E501
        :type: str
        """

        self._embargo_by = embargo_by

    @property
    def embargo_date(self):
        """Gets the embargo_date of this Story.  # noqa: E501


        :return: The embargo_date of this Story.  # noqa: E501
        :rtype: str
        """
        return self._embargo_date

    @embargo_date.setter
    def embargo_date(self, embargo_date):
        """Sets the embargo_date of this Story.


        :param embargo_date: The embargo_date of this Story.  # noqa: E501
        :type: str
        """

        self._embargo_date = embargo_date

    @property
    def expire_at(self):
        """Gets the expire_at of this Story.  # noqa: E501


        :return: The expire_at of this Story.  # noqa: E501
        :rtype: int
        """
        return self._expire_at

    @expire_at.setter
    def expire_at(self, expire_at):
        """Sets the expire_at of this Story.


        :param expire_at: The expire_at of this Story.  # noqa: E501
        :type: int
        """

        self._expire_at = expire_at

    @property
    def expiry_date(self):
        """Gets the expiry_date of this Story.  # noqa: E501


        :return: The expiry_date of this Story.  # noqa: E501
        :rtype: str
        """
        return self._expiry_date

    @expiry_date.setter
    def expiry_date(self, expiry_date):
        """Sets the expiry_date of this Story.


        :param expiry_date: The expiry_date of this Story.  # noqa: E501
        :type: str
        """

        self._expiry_date = expiry_date

    @property
    def facebook_headline(self):
        """Gets the facebook_headline of this Story.  # noqa: E501


        :return: The facebook_headline of this Story.  # noqa: E501
        :rtype: str
        """
        return self._facebook_headline

    @facebook_headline.setter
    def facebook_headline(self, facebook_headline):
        """Sets the facebook_headline of this Story.


        :param facebook_headline: The facebook_headline of this Story.  # noqa: E501
        :type: str
        """

        self._facebook_headline = facebook_headline

    @property
    def first_published_date(self):
        """Gets the first_published_date of this Story.  # noqa: E501


        :return: The first_published_date of this Story.  # noqa: E501
        :rtype: str
        """
        return self._first_published_date

    @first_published_date.setter
    def first_published_date(self, first_published_date):
        """Sets the first_published_date of this Story.


        :param first_published_date: The first_published_date of this Story.  # noqa: E501
        :type: str
        """

        self._first_published_date = first_published_date

    @property
    def h2_header_headline(self):
        """Gets the h2_header_headline of this Story.  # noqa: E501


        :return: The h2_header_headline of this Story.  # noqa: E501
        :rtype: str
        """
        return self._h2_header_headline

    @h2_header_headline.setter
    def h2_header_headline(self, h2_header_headline):
        """Sets the h2_header_headline of this Story.


        :param h2_header_headline: The h2_header_headline of this Story.  # noqa: E501
        :type: str
        """

        self._h2_header_headline = h2_header_headline

    @property
    def h3_header_headline(self):
        """Gets the h3_header_headline of this Story.  # noqa: E501


        :return: The h3_header_headline of this Story.  # noqa: E501
        :rtype: str
        """
        return self._h3_header_headline

    @h3_header_headline.setter
    def h3_header_headline(self, h3_header_headline):
        """Sets the h3_header_headline of this Story.


        :param h3_header_headline: The h3_header_headline of this Story.  # noqa: E501
        :type: str
        """

        self._h3_header_headline = h3_header_headline

    @property
    def headline(self):
        """Gets the headline of this Story.  # noqa: E501


        :return: The headline of this Story.  # noqa: E501
        :rtype: str
        """
        return self._headline

    @headline.setter
    def headline(self, headline):
        """Sets the headline of this Story.


        :param headline: The headline of this Story.  # noqa: E501
        :type: str
        """

        self._headline = headline

    @property
    def id(self):
        """Gets the id of this Story.  # noqa: E501


        :return: The id of this Story.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Story.


        :param id: The id of this Story.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def image_amp_validated(self):
        """Gets the image_amp_validated of this Story.  # noqa: E501


        :return: The image_amp_validated of this Story.  # noqa: E501
        :rtype: bool
        """
        return self._image_amp_validated

    @image_amp_validated.setter
    def image_amp_validated(self, image_amp_validated):
        """Sets the image_amp_validated of this Story.


        :param image_amp_validated: The image_amp_validated of this Story.  # noqa: E501
        :type: bool
        """

        self._image_amp_validated = image_amp_validated

    @property
    def intro_body(self):
        """Gets the intro_body of this Story.  # noqa: E501


        :return: The intro_body of this Story.  # noqa: E501
        :rtype: str
        """
        return self._intro_body

    @intro_body.setter
    def intro_body(self, intro_body):
        """Sets the intro_body of this Story.


        :param intro_body: The intro_body of this Story.  # noqa: E501
        :type: str
        """

        self._intro_body = intro_body

    @property
    def intro_elements(self):
        """Gets the intro_elements of this Story.  # noqa: E501


        :return: The intro_elements of this Story.  # noqa: E501
        :rtype: list[int]
        """
        return self._intro_elements

    @intro_elements.setter
    def intro_elements(self, intro_elements):
        """Sets the intro_elements of this Story.


        :param intro_elements: The intro_elements of this Story.  # noqa: E501
        :type: list[int]
        """

        self._intro_elements = intro_elements

    @property
    def is_deleted(self):
        """Gets the is_deleted of this Story.  # noqa: E501


        :return: The is_deleted of this Story.  # noqa: E501
        :rtype: int
        """
        return self._is_deleted

    @is_deleted.setter
    def is_deleted(self, is_deleted):
        """Sets the is_deleted of this Story.


        :param is_deleted: The is_deleted of this Story.  # noqa: E501
        :type: int
        """

        self._is_deleted = is_deleted

    @property
    def isrelated_video_added(self):
        """Gets the isrelated_video_added of this Story.  # noqa: E501


        :return: The isrelated_video_added of this Story.  # noqa: E501
        :rtype: bool
        """
        return self._isrelated_video_added

    @isrelated_video_added.setter
    def isrelated_video_added(self, isrelated_video_added):
        """Sets the isrelated_video_added of this Story.


        :param isrelated_video_added: The isrelated_video_added of this Story.  # noqa: E501
        :type: bool
        """

        self._isrelated_video_added = isrelated_video_added

    @property
    def last_modified_by(self):
        """Gets the last_modified_by of this Story.  # noqa: E501


        :return: The last_modified_by of this Story.  # noqa: E501
        :rtype: str
        """
        return self._last_modified_by

    @last_modified_by.setter
    def last_modified_by(self, last_modified_by):
        """Sets the last_modified_by of this Story.


        :param last_modified_by: The last_modified_by of this Story.  # noqa: E501
        :type: str
        """

        self._last_modified_by = last_modified_by

    @property
    def last_modified_by_user_name(self):
        """Gets the last_modified_by_user_name of this Story.  # noqa: E501


        :return: The last_modified_by_user_name of this Story.  # noqa: E501
        :rtype: str
        """
        return self._last_modified_by_user_name

    @last_modified_by_user_name.setter
    def last_modified_by_user_name(self, last_modified_by_user_name):
        """Sets the last_modified_by_user_name of this Story.


        :param last_modified_by_user_name: The last_modified_by_user_name of this Story.  # noqa: E501
        :type: str
        """

        self._last_modified_by_user_name = last_modified_by_user_name

    @property
    def last_modified_date(self):
        """Gets the last_modified_date of this Story.  # noqa: E501


        :return: The last_modified_date of this Story.  # noqa: E501
        :rtype: str
        """
        return self._last_modified_date

    @last_modified_date.setter
    def last_modified_date(self, last_modified_date):
        """Sets the last_modified_date of this Story.


        :param last_modified_date: The last_modified_date of this Story.  # noqa: E501
        :type: str
        """

        self._last_modified_date = last_modified_date

    @property
    def last_published_by(self):
        """Gets the last_published_by of this Story.  # noqa: E501


        :return: The last_published_by of this Story.  # noqa: E501
        :rtype: str
        """
        return self._last_published_by

    @last_published_by.setter
    def last_published_by(self, last_published_by):
        """Sets the last_published_by of this Story.


        :param last_published_by: The last_published_by of this Story.  # noqa: E501
        :type: str
        """

        self._last_published_by = last_published_by

    @property
    def last_published_by_user_name(self):
        """Gets the last_published_by_user_name of this Story.  # noqa: E501


        :return: The last_published_by_user_name of this Story.  # noqa: E501
        :rtype: str
        """
        return self._last_published_by_user_name

    @last_published_by_user_name.setter
    def last_published_by_user_name(self, last_published_by_user_name):
        """Sets the last_published_by_user_name of this Story.


        :param last_published_by_user_name: The last_published_by_user_name of this Story.  # noqa: E501
        :type: str
        """

        self._last_published_by_user_name = last_published_by_user_name

    @property
    def last_published_date(self):
        """Gets the last_published_date of this Story.  # noqa: E501


        :return: The last_published_date of this Story.  # noqa: E501
        :rtype: str
        """
        return self._last_published_date

    @last_published_date.setter
    def last_published_date(self, last_published_date):
        """Sets the last_published_date of this Story.


        :param last_published_date: The last_published_date of this Story.  # noqa: E501
        :type: str
        """

        self._last_published_date = last_published_date

    @property
    def last_published_headline(self):
        """Gets the last_published_headline of this Story.  # noqa: E501


        :return: The last_published_headline of this Story.  # noqa: E501
        :rtype: str
        """
        return self._last_published_headline

    @last_published_headline.setter
    def last_published_headline(self, last_published_headline):
        """Sets the last_published_headline of this Story.


        :param last_published_headline: The last_published_headline of this Story.  # noqa: E501
        :type: str
        """

        self._last_published_headline = last_published_headline

    @property
    def last_published_summary(self):
        """Gets the last_published_summary of this Story.  # noqa: E501


        :return: The last_published_summary of this Story.  # noqa: E501
        :rtype: str
        """
        return self._last_published_summary

    @last_published_summary.setter
    def last_published_summary(self, last_published_summary):
        """Sets the last_published_summary of this Story.


        :param last_published_summary: The last_published_summary of this Story.  # noqa: E501
        :type: str
        """

        self._last_published_summary = last_published_summary

    @property
    def last_request_id(self):
        """Gets the last_request_id of this Story.  # noqa: E501


        :return: The last_request_id of this Story.  # noqa: E501
        :rtype: str
        """
        return self._last_request_id

    @last_request_id.setter
    def last_request_id(self, last_request_id):
        """Sets the last_request_id of this Story.


        :param last_request_id: The last_request_id of this Story.  # noqa: E501
        :type: str
        """

        self._last_request_id = last_request_id

    @property
    def lead_media(self):
        """Gets the lead_media of this Story.  # noqa: E501


        :return: The lead_media of this Story.  # noqa: E501
        :rtype: LeadMedia
        """
        return self._lead_media

    @lead_media.setter
    def lead_media(self, lead_media):
        """Sets the lead_media of this Story.


        :param lead_media: The lead_media of this Story.  # noqa: E501
        :type: LeadMedia
        """

        self._lead_media = lead_media

    @property
    def lead_media_gif(self):
        """Gets the lead_media_gif of this Story.  # noqa: E501


        :return: The lead_media_gif of this Story.  # noqa: E501
        :rtype: LeadMediaGif
        """
        return self._lead_media_gif

    @lead_media_gif.setter
    def lead_media_gif(self, lead_media_gif):
        """Sets the lead_media_gif of this Story.


        :param lead_media_gif: The lead_media_gif of this Story.  # noqa: E501
        :type: LeadMediaGif
        """

        self._lead_media_gif = lead_media_gif

    @property
    def link_story_id(self):
        """Gets the link_story_id of this Story.  # noqa: E501


        :return: The link_story_id of this Story.  # noqa: E501
        :rtype: int
        """
        return self._link_story_id

    @link_story_id.setter
    def link_story_id(self, link_story_id):
        """Sets the link_story_id of this Story.


        :param link_story_id: The link_story_id of this Story.  # noqa: E501
        :type: int
        """

        self._link_story_id = link_story_id

    @property
    def locked_by_user_id(self):
        """Gets the locked_by_user_id of this Story.  # noqa: E501


        :return: The locked_by_user_id of this Story.  # noqa: E501
        :rtype: str
        """
        return self._locked_by_user_id

    @locked_by_user_id.setter
    def locked_by_user_id(self, locked_by_user_id):
        """Sets the locked_by_user_id of this Story.


        :param locked_by_user_id: The locked_by_user_id of this Story.  # noqa: E501
        :type: str
        """

        self._locked_by_user_id = locked_by_user_id

    @property
    def locked_by_user_name(self):
        """Gets the locked_by_user_name of this Story.  # noqa: E501


        :return: The locked_by_user_name of this Story.  # noqa: E501
        :rtype: str
        """
        return self._locked_by_user_name

    @locked_by_user_name.setter
    def locked_by_user_name(self, locked_by_user_name):
        """Sets the locked_by_user_name of this Story.


        :param locked_by_user_name: The locked_by_user_name of this Story.  # noqa: E501
        :type: str
        """

        self._locked_by_user_name = locked_by_user_name

    @property
    def locked_date(self):
        """Gets the locked_date of this Story.  # noqa: E501


        :return: The locked_date of this Story.  # noqa: E501
        :rtype: str
        """
        return self._locked_date

    @locked_date.setter
    def locked_date(self, locked_date):
        """Sets the locked_date of this Story.


        :param locked_date: The locked_date of this Story.  # noqa: E501
        :type: str
        """

        self._locked_date = locked_date

    @property
    def manual_summary(self):
        """Gets the manual_summary of this Story.  # noqa: E501


        :return: The manual_summary of this Story.  # noqa: E501
        :rtype: bool
        """
        return self._manual_summary

    @manual_summary.setter
    def manual_summary(self, manual_summary):
        """Sets the manual_summary of this Story.


        :param manual_summary: The manual_summary of this Story.  # noqa: E501
        :type: bool
        """

        self._manual_summary = manual_summary

    @property
    def metadata(self):
        """Gets the metadata of this Story.  # noqa: E501


        :return: The metadata of this Story.  # noqa: E501
        :rtype: Metadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Story.


        :param metadata: The metadata of this Story.  # noqa: E501
        :type: Metadata
        """

        self._metadata = metadata

    @property
    def migration_info_web_url(self):
        """Gets the migration_info_web_url of this Story.  # noqa: E501


        :return: The migration_info_web_url of this Story.  # noqa: E501
        :rtype: str
        """
        return self._migration_info_web_url

    @migration_info_web_url.setter
    def migration_info_web_url(self, migration_info_web_url):
        """Sets the migration_info_web_url of this Story.


        :param migration_info_web_url: The migration_info_web_url of this Story.  # noqa: E501
        :type: str
        """

        self._migration_info_web_url = migration_info_web_url

    @property
    def migration_info_web_url_migrated(self):
        """Gets the migration_info_web_url_migrated of this Story.  # noqa: E501


        :return: The migration_info_web_url_migrated of this Story.  # noqa: E501
        :rtype: bool
        """
        return self._migration_info_web_url_migrated

    @migration_info_web_url_migrated.setter
    def migration_info_web_url_migrated(self, migration_info_web_url_migrated):
        """Sets the migration_info_web_url_migrated of this Story.


        :param migration_info_web_url_migrated: The migration_info_web_url_migrated of this Story.  # noqa: E501
        :type: bool
        """

        self._migration_info_web_url_migrated = migration_info_web_url_migrated

    @property
    def migration_info_web_url_published(self):
        """Gets the migration_info_web_url_published of this Story.  # noqa: E501


        :return: The migration_info_web_url_published of this Story.  # noqa: E501
        :rtype: bool
        """
        return self._migration_info_web_url_published

    @migration_info_web_url_published.setter
    def migration_info_web_url_published(self, migration_info_web_url_published):
        """Sets the migration_info_web_url_published of this Story.


        :param migration_info_web_url_published: The migration_info_web_url_published of this Story.  # noqa: E501
        :type: bool
        """

        self._migration_info_web_url_published = migration_info_web_url_published

    @property
    def mobile_app_notification_headline(self):
        """Gets the mobile_app_notification_headline of this Story.  # noqa: E501


        :return: The mobile_app_notification_headline of this Story.  # noqa: E501
        :rtype: str
        """
        return self._mobile_app_notification_headline

    @mobile_app_notification_headline.setter
    def mobile_app_notification_headline(self, mobile_app_notification_headline):
        """Sets the mobile_app_notification_headline of this Story.


        :param mobile_app_notification_headline: The mobile_app_notification_headline of this Story.  # noqa: E501
        :type: str
        """

        self._mobile_app_notification_headline = mobile_app_notification_headline

    @property
    def mobile_headline(self):
        """Gets the mobile_headline of this Story.  # noqa: E501


        :return: The mobile_headline of this Story.  # noqa: E501
        :rtype: str
        """
        return self._mobile_headline

    @mobile_headline.setter
    def mobile_headline(self, mobile_headline):
        """Sets the mobile_headline of this Story.


        :param mobile_headline: The mobile_headline of this Story.  # noqa: E501
        :type: str
        """

        self._mobile_headline = mobile_headline

    @property
    def newsletter_headline(self):
        """Gets the newsletter_headline of this Story.  # noqa: E501


        :return: The newsletter_headline of this Story.  # noqa: E501
        :rtype: str
        """
        return self._newsletter_headline

    @newsletter_headline.setter
    def newsletter_headline(self, newsletter_headline):
        """Sets the newsletter_headline of this Story.


        :param newsletter_headline: The newsletter_headline of this Story.  # noqa: E501
        :type: str
        """

        self._newsletter_headline = newsletter_headline

    @property
    def newsletter_summary(self):
        """Gets the newsletter_summary of this Story.  # noqa: E501


        :return: The newsletter_summary of this Story.  # noqa: E501
        :rtype: str
        """
        return self._newsletter_summary

    @newsletter_summary.setter
    def newsletter_summary(self, newsletter_summary):
        """Sets the newsletter_summary of this Story.


        :param newsletter_summary: The newsletter_summary of this Story.  # noqa: E501
        :type: str
        """

        self._newsletter_summary = newsletter_summary

    @property
    def next_stories(self):
        """Gets the next_stories of this Story.  # noqa: E501


        :return: The next_stories of this Story.  # noqa: E501
        :rtype: list[Story]
        """
        return self._next_stories

    @next_stories.setter
    def next_stories(self, next_stories):
        """Sets the next_stories of this Story.


        :param next_stories: The next_stories of this Story.  # noqa: E501
        :type: list[Story]
        """

        self._next_stories = next_stories

    @property
    def old_uuid(self):
        """Gets the old_uuid of this Story.  # noqa: E501


        :return: The old_uuid of this Story.  # noqa: E501
        :rtype: str
        """
        return self._old_uuid

    @old_uuid.setter
    def old_uuid(self, old_uuid):
        """Sets the old_uuid of this Story.


        :param old_uuid: The old_uuid of this Story.  # noqa: E501
        :type: str
        """

        self._old_uuid = old_uuid

    @property
    def pinned_articles(self):
        """Gets the pinned_articles of this Story.  # noqa: E501


        :return: The pinned_articles of this Story.  # noqa: E501
        :rtype: list[int]
        """
        return self._pinned_articles

    @pinned_articles.setter
    def pinned_articles(self, pinned_articles):
        """Sets the pinned_articles of this Story.


        :param pinned_articles: The pinned_articles of this Story.  # noqa: E501
        :type: list[int]
        """

        self._pinned_articles = pinned_articles

    @property
    def quick_read_status(self):
        """Gets the quick_read_status of this Story.  # noqa: E501


        :return: The quick_read_status of this Story.  # noqa: E501
        :rtype: str
        """
        return self._quick_read_status

    @quick_read_status.setter
    def quick_read_status(self, quick_read_status):
        """Sets the quick_read_status of this Story.


        :param quick_read_status: The quick_read_status of this Story.  # noqa: E501
        :type: str
        """
        allowed_values = ["Manual", "Automated", "None", "Automated_Edited"]  # noqa: E501
        if quick_read_status not in allowed_values:
            raise ValueError(
                "Invalid value for `quick_read_status` ({0}), must be one of {1}"  # noqa: E501
                .format(quick_read_status, allowed_values)
            )

        self._quick_read_status = quick_read_status

    @property
    def quick_read_summary(self):
        """Gets the quick_read_summary of this Story.  # noqa: E501


        :return: The quick_read_summary of this Story.  # noqa: E501
        :rtype: str
        """
        return self._quick_read_summary

    @quick_read_summary.setter
    def quick_read_summary(self, quick_read_summary):
        """Sets the quick_read_summary of this Story.


        :param quick_read_summary: The quick_read_summary of this Story.  # noqa: E501
        :type: str
        """

        self._quick_read_summary = quick_read_summary

    @property
    def quick_read_summary_api(self):
        """Gets the quick_read_summary_api of this Story.  # noqa: E501


        :return: The quick_read_summary_api of this Story.  # noqa: E501
        :rtype: str
        """
        return self._quick_read_summary_api

    @quick_read_summary_api.setter
    def quick_read_summary_api(self, quick_read_summary_api):
        """Sets the quick_read_summary_api of this Story.


        :param quick_read_summary_api: The quick_read_summary_api of this Story.  # noqa: E501
        :type: str
        """

        self._quick_read_summary_api = quick_read_summary_api

    @property
    def read_by_users(self):
        """Gets the read_by_users of this Story.  # noqa: E501


        :return: The read_by_users of this Story.  # noqa: E501
        :rtype: list[str]
        """
        return self._read_by_users

    @read_by_users.setter
    def read_by_users(self, read_by_users):
        """Sets the read_by_users of this Story.


        :param read_by_users: The read_by_users of this Story.  # noqa: E501
        :type: list[str]
        """

        self._read_by_users = read_by_users

    @property
    def related(self):
        """Gets the related of this Story.  # noqa: E501


        :return: The related of this Story.  # noqa: E501
        :rtype: list[int]
        """
        return self._related

    @related.setter
    def related(self, related):
        """Sets the related of this Story.


        :param related: The related of this Story.  # noqa: E501
        :type: list[int]
        """

        self._related = related

    @property
    def related_how_to(self):
        """Gets the related_how_to of this Story.  # noqa: E501


        :return: The related_how_to of this Story.  # noqa: E501
        :rtype: list[int]
        """
        return self._related_how_to

    @related_how_to.setter
    def related_how_to(self, related_how_to):
        """Sets the related_how_to of this Story.


        :param related_how_to: The related_how_to of this Story.  # noqa: E501
        :type: list[int]
        """

        self._related_how_to = related_how_to

    @property
    def related_video_element_ids(self):
        """Gets the related_video_element_ids of this Story.  # noqa: E501


        :return: The related_video_element_ids of this Story.  # noqa: E501
        :rtype: list[int]
        """
        return self._related_video_element_ids

    @related_video_element_ids.setter
    def related_video_element_ids(self, related_video_element_ids):
        """Sets the related_video_element_ids of this Story.


        :param related_video_element_ids: The related_video_element_ids of this Story.  # noqa: E501
        :type: list[int]
        """

        self._related_video_element_ids = related_video_element_ids

    @property
    def scheduled_at(self):
        """Gets the scheduled_at of this Story.  # noqa: E501


        :return: The scheduled_at of this Story.  # noqa: E501
        :rtype: int
        """
        return self._scheduled_at

    @scheduled_at.setter
    def scheduled_at(self, scheduled_at):
        """Sets the scheduled_at of this Story.


        :param scheduled_at: The scheduled_at of this Story.  # noqa: E501
        :type: int
        """

        self._scheduled_at = scheduled_at

    @property
    def scheduled_by(self):
        """Gets the scheduled_by of this Story.  # noqa: E501


        :return: The scheduled_by of this Story.  # noqa: E501
        :rtype: str
        """
        return self._scheduled_by

    @scheduled_by.setter
    def scheduled_by(self, scheduled_by):
        """Sets the scheduled_by of this Story.


        :param scheduled_by: The scheduled_by of this Story.  # noqa: E501
        :type: str
        """

        self._scheduled_by = scheduled_by

    @property
    def scheduled_date(self):
        """Gets the scheduled_date of this Story.  # noqa: E501


        :return: The scheduled_date of this Story.  # noqa: E501
        :rtype: str
        """
        return self._scheduled_date

    @scheduled_date.setter
    def scheduled_date(self, scheduled_date):
        """Sets the scheduled_date of this Story.


        :param scheduled_date: The scheduled_date of this Story.  # noqa: E501
        :type: str
        """

        self._scheduled_date = scheduled_date

    @property
    def show_related(self):
        """Gets the show_related of this Story.  # noqa: E501


        :return: The show_related of this Story.  # noqa: E501
        :rtype: bool
        """
        return self._show_related

    @show_related.setter
    def show_related(self, show_related):
        """Sets the show_related of this Story.


        :param show_related: The show_related of this Story.  # noqa: E501
        :type: bool
        """

        self._show_related = show_related

    @property
    def slide_animation(self):
        """Gets the slide_animation of this Story.  # noqa: E501


        :return: The slide_animation of this Story.  # noqa: E501
        :rtype: str
        """
        return self._slide_animation

    @slide_animation.setter
    def slide_animation(self, slide_animation):
        """Sets the slide_animation of this Story.


        :param slide_animation: The slide_animation of this Story.  # noqa: E501
        :type: str
        """

        self._slide_animation = slide_animation

    @property
    def social(self):
        """Gets the social of this Story.  # noqa: E501


        :return: The social of this Story.  # noqa: E501
        :rtype: dict(str, bool)
        """
        return self._social

    @social.setter
    def social(self, social):
        """Sets the social of this Story.


        :param social: The social of this Story.  # noqa: E501
        :type: dict(str, bool)
        """

        self._social = social

    @property
    def social_counter(self):
        """Gets the social_counter of this Story.  # noqa: E501


        :return: The social_counter of this Story.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._social_counter

    @social_counter.setter
    def social_counter(self, social_counter):
        """Sets the social_counter of this Story.


        :param social_counter: The social_counter of this Story.  # noqa: E501
        :type: dict(str, int)
        """

        self._social_counter = social_counter

    @property
    def social_list(self):
        """Gets the social_list of this Story.  # noqa: E501


        :return: The social_list of this Story.  # noqa: E501
        :rtype: dict(str, list[str])
        """
        return self._social_list

    @social_list.setter
    def social_list(self, social_list):
        """Sets the social_list of this Story.


        :param social_list: The social_list of this Story.  # noqa: E501
        :type: dict(str, list[str])
        """

        self._social_list = social_list

    @property
    def soft_published(self):
        """Gets the soft_published of this Story.  # noqa: E501


        :return: The soft_published of this Story.  # noqa: E501
        :rtype: bool
        """
        return self._soft_published

    @soft_published.setter
    def soft_published(self, soft_published):
        """Sets the soft_published of this Story.


        :param soft_published: The soft_published of this Story.  # noqa: E501
        :type: bool
        """

        self._soft_published = soft_published

    @property
    def suggest(self):
        """Gets the suggest of this Story.  # noqa: E501


        :return: The suggest of this Story.  # noqa: E501
        :rtype: Completion
        """
        return self._suggest

    @suggest.setter
    def suggest(self, suggest):
        """Sets the suggest of this Story.


        :param suggest: The suggest of this Story.  # noqa: E501
        :type: Completion
        """

        self._suggest = suggest

    @property
    def summary(self):
        """Gets the summary of this Story.  # noqa: E501


        :return: The summary of this Story.  # noqa: E501
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this Story.


        :param summary: The summary of this Story.  # noqa: E501
        :type: str
        """

        self._summary = summary

    @property
    def tag_twitter_author(self):
        """Gets the tag_twitter_author of this Story.  # noqa: E501


        :return: The tag_twitter_author of this Story.  # noqa: E501
        :rtype: bool
        """
        return self._tag_twitter_author

    @tag_twitter_author.setter
    def tag_twitter_author(self, tag_twitter_author):
        """Sets the tag_twitter_author of this Story.


        :param tag_twitter_author: The tag_twitter_author of this Story.  # noqa: E501
        :type: bool
        """

        self._tag_twitter_author = tag_twitter_author

    @property
    def time_to_read(self):
        """Gets the time_to_read of this Story.  # noqa: E501


        :return: The time_to_read of this Story.  # noqa: E501
        :rtype: int
        """
        return self._time_to_read

    @time_to_read.setter
    def time_to_read(self, time_to_read):
        """Sets the time_to_read of this Story.


        :param time_to_read: The time_to_read of this Story.  # noqa: E501
        :type: int
        """

        self._time_to_read = time_to_read

    @property
    def title(self):
        """Gets the title of this Story.  # noqa: E501


        :return: The title of this Story.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Story.


        :param title: The title of this Story.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def title_wo_sp_char(self):
        """Gets the title_wo_sp_char of this Story.  # noqa: E501


        :return: The title_wo_sp_char of this Story.  # noqa: E501
        :rtype: str
        """
        return self._title_wo_sp_char

    @title_wo_sp_char.setter
    def title_wo_sp_char(self, title_wo_sp_char):
        """Sets the title_wo_sp_char of this Story.


        :param title_wo_sp_char: The title_wo_sp_char of this Story.  # noqa: E501
        :type: str
        """

        self._title_wo_sp_char = title_wo_sp_char

    @property
    def topic_migrated(self):
        """Gets the topic_migrated of this Story.  # noqa: E501


        :return: The topic_migrated of this Story.  # noqa: E501
        :rtype: bool
        """
        return self._topic_migrated

    @topic_migrated.setter
    def topic_migrated(self, topic_migrated):
        """Sets the topic_migrated of this Story.


        :param topic_migrated: The topic_migrated of this Story.  # noqa: E501
        :type: bool
        """

        self._topic_migrated = topic_migrated

    @property
    def topic_published(self):
        """Gets the topic_published of this Story.  # noqa: E501


        :return: The topic_published of this Story.  # noqa: E501
        :rtype: bool
        """
        return self._topic_published

    @topic_published.setter
    def topic_published(self, topic_published):
        """Sets the topic_published of this Story.


        :param topic_published: The topic_published of this Story.  # noqa: E501
        :type: bool
        """

        self._topic_published = topic_published

    @property
    def twitter_headline(self):
        """Gets the twitter_headline of this Story.  # noqa: E501


        :return: The twitter_headline of this Story.  # noqa: E501
        :rtype: str
        """
        return self._twitter_headline

    @twitter_headline.setter
    def twitter_headline(self, twitter_headline):
        """Sets the twitter_headline of this Story.


        :param twitter_headline: The twitter_headline of this Story.  # noqa: E501
        :type: str
        """

        self._twitter_headline = twitter_headline

    @property
    def type(self):
        """Gets the type of this Story.  # noqa: E501


        :return: The type of this Story.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Story.


        :param type: The type of this Story.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def updating_homepage_flag(self):
        """Gets the updating_homepage_flag of this Story.  # noqa: E501


        :return: The updating_homepage_flag of this Story.  # noqa: E501
        :rtype: bool
        """
        return self._updating_homepage_flag

    @updating_homepage_flag.setter
    def updating_homepage_flag(self, updating_homepage_flag):
        """Sets the updating_homepage_flag of this Story.


        :param updating_homepage_flag: The updating_homepage_flag of this Story.  # noqa: E501
        :type: bool
        """

        self._updating_homepage_flag = updating_homepage_flag

    @property
    def url_headline(self):
        """Gets the url_headline of this Story.  # noqa: E501


        :return: The url_headline of this Story.  # noqa: E501
        :rtype: str
        """
        return self._url_headline

    @url_headline.setter
    def url_headline(self, url_headline):
        """Sets the url_headline of this Story.


        :param url_headline: The url_headline of this Story.  # noqa: E501
        :type: str
        """

        self._url_headline = url_headline

    @property
    def web_engage_scheduled_at(self):
        """Gets the web_engage_scheduled_at of this Story.  # noqa: E501


        :return: The web_engage_scheduled_at of this Story.  # noqa: E501
        :rtype: int
        """
        return self._web_engage_scheduled_at

    @web_engage_scheduled_at.setter
    def web_engage_scheduled_at(self, web_engage_scheduled_at):
        """Sets the web_engage_scheduled_at of this Story.


        :param web_engage_scheduled_at: The web_engage_scheduled_at of this Story.  # noqa: E501
        :type: int
        """

        self._web_engage_scheduled_at = web_engage_scheduled_at

    @property
    def web_engage_scheduled_date(self):
        """Gets the web_engage_scheduled_date of this Story.  # noqa: E501


        :return: The web_engage_scheduled_date of this Story.  # noqa: E501
        :rtype: str
        """
        return self._web_engage_scheduled_date

    @web_engage_scheduled_date.setter
    def web_engage_scheduled_date(self, web_engage_scheduled_date):
        """Sets the web_engage_scheduled_date of this Story.


        :param web_engage_scheduled_date: The web_engage_scheduled_date of this Story.  # noqa: E501
        :type: str
        """

        self._web_engage_scheduled_date = web_engage_scheduled_date

    @property
    def web_id(self):
        """Gets the web_id of this Story.  # noqa: E501


        :return: The web_id of this Story.  # noqa: E501
        :rtype: str
        """
        return self._web_id

    @web_id.setter
    def web_id(self, web_id):
        """Sets the web_id of this Story.


        :param web_id: The web_id of this Story.  # noqa: E501
        :type: str
        """

        self._web_id = web_id

    @property
    def web_story_template(self):
        """Gets the web_story_template of this Story.  # noqa: E501


        :return: The web_story_template of this Story.  # noqa: E501
        :rtype: bool
        """
        return self._web_story_template

    @web_story_template.setter
    def web_story_template(self, web_story_template):
        """Sets the web_story_template of this Story.


        :param web_story_template: The web_story_template of this Story.  # noqa: E501
        :type: bool
        """

        self._web_story_template = web_story_template

    @property
    def webengage_notification_title(self):
        """Gets the webengage_notification_title of this Story.  # noqa: E501


        :return: The webengage_notification_title of this Story.  # noqa: E501
        :rtype: str
        """
        return self._webengage_notification_title

    @webengage_notification_title.setter
    def webengage_notification_title(self, webengage_notification_title):
        """Sets the webengage_notification_title of this Story.


        :param webengage_notification_title: The webengage_notification_title of this Story.  # noqa: E501
        :type: str
        """

        self._webengage_notification_title = webengage_notification_title

    @property
    def wire_feed_id(self):
        """Gets the wire_feed_id of this Story.  # noqa: E501


        :return: The wire_feed_id of this Story.  # noqa: E501
        :rtype: str
        """
        return self._wire_feed_id

    @wire_feed_id.setter
    def wire_feed_id(self, wire_feed_id):
        """Sets the wire_feed_id of this Story.


        :param wire_feed_id: The wire_feed_id of this Story.  # noqa: E501
        :type: str
        """

        self._wire_feed_id = wire_feed_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Story, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Story):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

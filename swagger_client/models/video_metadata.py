# coding: utf-8

"""
    CMS-Backend API

    This is API documentation of CMS-Backend  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: htdevteam@hindustantimes.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class VideoMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'categories': 'list[str]',
        'daily_motion': 'bool',
        'duration': 'int',
        'language': 'str',
        'playlist': 'list[str]',
        'syndication': 'bool',
        'thumbnail': 'str',
        'video_duration': 'str',
        'visibility': 'str',
        'webcast': 'bool',
        'youtube_monetization': 'bool'
    }

    attribute_map = {
        'categories': 'categories',
        'daily_motion': 'dailyMotion',
        'duration': 'duration',
        'language': 'language',
        'playlist': 'playlist',
        'syndication': 'syndication',
        'thumbnail': 'thumbnail',
        'video_duration': 'videoDuration',
        'visibility': 'visibility',
        'webcast': 'webcast',
        'youtube_monetization': 'youtubeMonetization'
    }

    def __init__(self, categories=None, daily_motion=None, duration=None, language=None, playlist=None, syndication=None, thumbnail=None, video_duration=None, visibility=None, webcast=None, youtube_monetization=None):  # noqa: E501
        """VideoMetadata - a model defined in Swagger"""  # noqa: E501
        self._categories = None
        self._daily_motion = None
        self._duration = None
        self._language = None
        self._playlist = None
        self._syndication = None
        self._thumbnail = None
        self._video_duration = None
        self._visibility = None
        self._webcast = None
        self._youtube_monetization = None
        self.discriminator = None
        if categories is not None:
            self.categories = categories
        if daily_motion is not None:
            self.daily_motion = daily_motion
        if duration is not None:
            self.duration = duration
        if language is not None:
            self.language = language
        if playlist is not None:
            self.playlist = playlist
        if syndication is not None:
            self.syndication = syndication
        if thumbnail is not None:
            self.thumbnail = thumbnail
        if video_duration is not None:
            self.video_duration = video_duration
        if visibility is not None:
            self.visibility = visibility
        if webcast is not None:
            self.webcast = webcast
        if youtube_monetization is not None:
            self.youtube_monetization = youtube_monetization

    @property
    def categories(self):
        """Gets the categories of this VideoMetadata.  # noqa: E501


        :return: The categories of this VideoMetadata.  # noqa: E501
        :rtype: list[str]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this VideoMetadata.


        :param categories: The categories of this VideoMetadata.  # noqa: E501
        :type: list[str]
        """

        self._categories = categories

    @property
    def daily_motion(self):
        """Gets the daily_motion of this VideoMetadata.  # noqa: E501


        :return: The daily_motion of this VideoMetadata.  # noqa: E501
        :rtype: bool
        """
        return self._daily_motion

    @daily_motion.setter
    def daily_motion(self, daily_motion):
        """Sets the daily_motion of this VideoMetadata.


        :param daily_motion: The daily_motion of this VideoMetadata.  # noqa: E501
        :type: bool
        """

        self._daily_motion = daily_motion

    @property
    def duration(self):
        """Gets the duration of this VideoMetadata.  # noqa: E501


        :return: The duration of this VideoMetadata.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this VideoMetadata.


        :param duration: The duration of this VideoMetadata.  # noqa: E501
        :type: int
        """

        self._duration = duration

    @property
    def language(self):
        """Gets the language of this VideoMetadata.  # noqa: E501


        :return: The language of this VideoMetadata.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this VideoMetadata.


        :param language: The language of this VideoMetadata.  # noqa: E501
        :type: str
        """

        self._language = language

    @property
    def playlist(self):
        """Gets the playlist of this VideoMetadata.  # noqa: E501


        :return: The playlist of this VideoMetadata.  # noqa: E501
        :rtype: list[str]
        """
        return self._playlist

    @playlist.setter
    def playlist(self, playlist):
        """Sets the playlist of this VideoMetadata.


        :param playlist: The playlist of this VideoMetadata.  # noqa: E501
        :type: list[str]
        """

        self._playlist = playlist

    @property
    def syndication(self):
        """Gets the syndication of this VideoMetadata.  # noqa: E501


        :return: The syndication of this VideoMetadata.  # noqa: E501
        :rtype: bool
        """
        return self._syndication

    @syndication.setter
    def syndication(self, syndication):
        """Sets the syndication of this VideoMetadata.


        :param syndication: The syndication of this VideoMetadata.  # noqa: E501
        :type: bool
        """

        self._syndication = syndication

    @property
    def thumbnail(self):
        """Gets the thumbnail of this VideoMetadata.  # noqa: E501


        :return: The thumbnail of this VideoMetadata.  # noqa: E501
        :rtype: str
        """
        return self._thumbnail

    @thumbnail.setter
    def thumbnail(self, thumbnail):
        """Sets the thumbnail of this VideoMetadata.


        :param thumbnail: The thumbnail of this VideoMetadata.  # noqa: E501
        :type: str
        """

        self._thumbnail = thumbnail

    @property
    def video_duration(self):
        """Gets the video_duration of this VideoMetadata.  # noqa: E501


        :return: The video_duration of this VideoMetadata.  # noqa: E501
        :rtype: str
        """
        return self._video_duration

    @video_duration.setter
    def video_duration(self, video_duration):
        """Sets the video_duration of this VideoMetadata.


        :param video_duration: The video_duration of this VideoMetadata.  # noqa: E501
        :type: str
        """

        self._video_duration = video_duration

    @property
    def visibility(self):
        """Gets the visibility of this VideoMetadata.  # noqa: E501


        :return: The visibility of this VideoMetadata.  # noqa: E501
        :rtype: str
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """Sets the visibility of this VideoMetadata.


        :param visibility: The visibility of this VideoMetadata.  # noqa: E501
        :type: str
        """

        self._visibility = visibility

    @property
    def webcast(self):
        """Gets the webcast of this VideoMetadata.  # noqa: E501


        :return: The webcast of this VideoMetadata.  # noqa: E501
        :rtype: bool
        """
        return self._webcast

    @webcast.setter
    def webcast(self, webcast):
        """Sets the webcast of this VideoMetadata.


        :param webcast: The webcast of this VideoMetadata.  # noqa: E501
        :type: bool
        """

        self._webcast = webcast

    @property
    def youtube_monetization(self):
        """Gets the youtube_monetization of this VideoMetadata.  # noqa: E501


        :return: The youtube_monetization of this VideoMetadata.  # noqa: E501
        :rtype: bool
        """
        return self._youtube_monetization

    @youtube_monetization.setter
    def youtube_monetization(self, youtube_monetization):
        """Sets the youtube_monetization of this VideoMetadata.


        :param youtube_monetization: The youtube_monetization of this VideoMetadata.  # noqa: E501
        :type: bool
        """

        self._youtube_monetization = youtube_monetization

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VideoMetadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VideoMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

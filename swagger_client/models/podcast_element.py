# coding: utf-8

"""
    CMS-Backend API

    This is API documentation of CMS-Backend  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: htdevteam@hindustantimes.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PodcastElement(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'podcast_content': 'str',
        'podcast_id': 'str',
        'podcast_image': 'str',
        'podcast_mp3_url': 'str',
        'podcast_publisher': 'PodcastPublisher',
        'podcast_title': 'str',
        'podcast_url': 'str'
    }

    attribute_map = {
        'podcast_content': 'podcastContent',
        'podcast_id': 'podcastId',
        'podcast_image': 'podcastImage',
        'podcast_mp3_url': 'podcastMp3Url',
        'podcast_publisher': 'podcastPublisher',
        'podcast_title': 'podcastTitle',
        'podcast_url': 'podcastUrl'
    }

    def __init__(self, podcast_content=None, podcast_id=None, podcast_image=None, podcast_mp3_url=None, podcast_publisher=None, podcast_title=None, podcast_url=None):  # noqa: E501
        """PodcastElement - a model defined in Swagger"""  # noqa: E501
        self._podcast_content = None
        self._podcast_id = None
        self._podcast_image = None
        self._podcast_mp3_url = None
        self._podcast_publisher = None
        self._podcast_title = None
        self._podcast_url = None
        self.discriminator = None
        if podcast_content is not None:
            self.podcast_content = podcast_content
        if podcast_id is not None:
            self.podcast_id = podcast_id
        if podcast_image is not None:
            self.podcast_image = podcast_image
        if podcast_mp3_url is not None:
            self.podcast_mp3_url = podcast_mp3_url
        if podcast_publisher is not None:
            self.podcast_publisher = podcast_publisher
        if podcast_title is not None:
            self.podcast_title = podcast_title
        if podcast_url is not None:
            self.podcast_url = podcast_url

    @property
    def podcast_content(self):
        """Gets the podcast_content of this PodcastElement.  # noqa: E501


        :return: The podcast_content of this PodcastElement.  # noqa: E501
        :rtype: str
        """
        return self._podcast_content

    @podcast_content.setter
    def podcast_content(self, podcast_content):
        """Sets the podcast_content of this PodcastElement.


        :param podcast_content: The podcast_content of this PodcastElement.  # noqa: E501
        :type: str
        """

        self._podcast_content = podcast_content

    @property
    def podcast_id(self):
        """Gets the podcast_id of this PodcastElement.  # noqa: E501


        :return: The podcast_id of this PodcastElement.  # noqa: E501
        :rtype: str
        """
        return self._podcast_id

    @podcast_id.setter
    def podcast_id(self, podcast_id):
        """Sets the podcast_id of this PodcastElement.


        :param podcast_id: The podcast_id of this PodcastElement.  # noqa: E501
        :type: str
        """

        self._podcast_id = podcast_id

    @property
    def podcast_image(self):
        """Gets the podcast_image of this PodcastElement.  # noqa: E501


        :return: The podcast_image of this PodcastElement.  # noqa: E501
        :rtype: str
        """
        return self._podcast_image

    @podcast_image.setter
    def podcast_image(self, podcast_image):
        """Sets the podcast_image of this PodcastElement.


        :param podcast_image: The podcast_image of this PodcastElement.  # noqa: E501
        :type: str
        """

        self._podcast_image = podcast_image

    @property
    def podcast_mp3_url(self):
        """Gets the podcast_mp3_url of this PodcastElement.  # noqa: E501


        :return: The podcast_mp3_url of this PodcastElement.  # noqa: E501
        :rtype: str
        """
        return self._podcast_mp3_url

    @podcast_mp3_url.setter
    def podcast_mp3_url(self, podcast_mp3_url):
        """Sets the podcast_mp3_url of this PodcastElement.


        :param podcast_mp3_url: The podcast_mp3_url of this PodcastElement.  # noqa: E501
        :type: str
        """

        self._podcast_mp3_url = podcast_mp3_url

    @property
    def podcast_publisher(self):
        """Gets the podcast_publisher of this PodcastElement.  # noqa: E501


        :return: The podcast_publisher of this PodcastElement.  # noqa: E501
        :rtype: PodcastPublisher
        """
        return self._podcast_publisher

    @podcast_publisher.setter
    def podcast_publisher(self, podcast_publisher):
        """Sets the podcast_publisher of this PodcastElement.


        :param podcast_publisher: The podcast_publisher of this PodcastElement.  # noqa: E501
        :type: PodcastPublisher
        """

        self._podcast_publisher = podcast_publisher

    @property
    def podcast_title(self):
        """Gets the podcast_title of this PodcastElement.  # noqa: E501


        :return: The podcast_title of this PodcastElement.  # noqa: E501
        :rtype: str
        """
        return self._podcast_title

    @podcast_title.setter
    def podcast_title(self, podcast_title):
        """Sets the podcast_title of this PodcastElement.


        :param podcast_title: The podcast_title of this PodcastElement.  # noqa: E501
        :type: str
        """

        self._podcast_title = podcast_title

    @property
    def podcast_url(self):
        """Gets the podcast_url of this PodcastElement.  # noqa: E501


        :return: The podcast_url of this PodcastElement.  # noqa: E501
        :rtype: str
        """
        return self._podcast_url

    @podcast_url.setter
    def podcast_url(self, podcast_url):
        """Sets the podcast_url of this PodcastElement.


        :param podcast_url: The podcast_url of this PodcastElement.  # noqa: E501
        :type: str
        """

        self._podcast_url = podcast_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PodcastElement, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PodcastElement):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

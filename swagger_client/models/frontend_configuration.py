# coding: utf-8

"""
    CMS-Backend API

    This is API documentation of CMS-Backend  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: htdevteam@hindustantimes.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FrontendConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'collection_dynamic_meta': 'list[Mapstringstring]',
        'config': 'dict(str, dict(str, str))',
        'disabled_story_type': 'list[str]',
        'domain_id': 'str',
        'dynamic_meta': 'list[Mapstringstring]',
        'elements_disabled': 'list[str]',
        'image_ratios': 'list[str]',
        'notification_platforms_enabled': 'list[str]',
        'page_dynamic_meta': 'list[Mapstringstring]',
        'pages_disabled': 'list[str]',
        'paragraph_tools_disabled': 'list[str]'
    }

    attribute_map = {
        'collection_dynamic_meta': 'collectionDynamicMeta',
        'config': 'config',
        'disabled_story_type': 'disabledStoryType',
        'domain_id': 'domainId',
        'dynamic_meta': 'dynamicMeta',
        'elements_disabled': 'elementsDisabled',
        'image_ratios': 'imageRatios',
        'notification_platforms_enabled': 'notificationPlatformsEnabled',
        'page_dynamic_meta': 'pageDynamicMeta',
        'pages_disabled': 'pagesDisabled',
        'paragraph_tools_disabled': 'paragraphToolsDisabled'
    }

    def __init__(self, collection_dynamic_meta=None, config=None, disabled_story_type=None, domain_id=None, dynamic_meta=None, elements_disabled=None, image_ratios=None, notification_platforms_enabled=None, page_dynamic_meta=None, pages_disabled=None, paragraph_tools_disabled=None):  # noqa: E501
        """FrontendConfiguration - a model defined in Swagger"""  # noqa: E501
        self._collection_dynamic_meta = None
        self._config = None
        self._disabled_story_type = None
        self._domain_id = None
        self._dynamic_meta = None
        self._elements_disabled = None
        self._image_ratios = None
        self._notification_platforms_enabled = None
        self._page_dynamic_meta = None
        self._pages_disabled = None
        self._paragraph_tools_disabled = None
        self.discriminator = None
        if collection_dynamic_meta is not None:
            self.collection_dynamic_meta = collection_dynamic_meta
        if config is not None:
            self.config = config
        if disabled_story_type is not None:
            self.disabled_story_type = disabled_story_type
        if domain_id is not None:
            self.domain_id = domain_id
        if dynamic_meta is not None:
            self.dynamic_meta = dynamic_meta
        if elements_disabled is not None:
            self.elements_disabled = elements_disabled
        if image_ratios is not None:
            self.image_ratios = image_ratios
        if notification_platforms_enabled is not None:
            self.notification_platforms_enabled = notification_platforms_enabled
        if page_dynamic_meta is not None:
            self.page_dynamic_meta = page_dynamic_meta
        if pages_disabled is not None:
            self.pages_disabled = pages_disabled
        if paragraph_tools_disabled is not None:
            self.paragraph_tools_disabled = paragraph_tools_disabled

    @property
    def collection_dynamic_meta(self):
        """Gets the collection_dynamic_meta of this FrontendConfiguration.  # noqa: E501


        :return: The collection_dynamic_meta of this FrontendConfiguration.  # noqa: E501
        :rtype: list[Mapstringstring]
        """
        return self._collection_dynamic_meta

    @collection_dynamic_meta.setter
    def collection_dynamic_meta(self, collection_dynamic_meta):
        """Sets the collection_dynamic_meta of this FrontendConfiguration.


        :param collection_dynamic_meta: The collection_dynamic_meta of this FrontendConfiguration.  # noqa: E501
        :type: list[Mapstringstring]
        """

        self._collection_dynamic_meta = collection_dynamic_meta

    @property
    def config(self):
        """Gets the config of this FrontendConfiguration.  # noqa: E501


        :return: The config of this FrontendConfiguration.  # noqa: E501
        :rtype: dict(str, dict(str, str))
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this FrontendConfiguration.


        :param config: The config of this FrontendConfiguration.  # noqa: E501
        :type: dict(str, dict(str, str))
        """

        self._config = config

    @property
    def disabled_story_type(self):
        """Gets the disabled_story_type of this FrontendConfiguration.  # noqa: E501


        :return: The disabled_story_type of this FrontendConfiguration.  # noqa: E501
        :rtype: list[str]
        """
        return self._disabled_story_type

    @disabled_story_type.setter
    def disabled_story_type(self, disabled_story_type):
        """Sets the disabled_story_type of this FrontendConfiguration.


        :param disabled_story_type: The disabled_story_type of this FrontendConfiguration.  # noqa: E501
        :type: list[str]
        """

        self._disabled_story_type = disabled_story_type

    @property
    def domain_id(self):
        """Gets the domain_id of this FrontendConfiguration.  # noqa: E501


        :return: The domain_id of this FrontendConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._domain_id

    @domain_id.setter
    def domain_id(self, domain_id):
        """Sets the domain_id of this FrontendConfiguration.


        :param domain_id: The domain_id of this FrontendConfiguration.  # noqa: E501
        :type: str
        """

        self._domain_id = domain_id

    @property
    def dynamic_meta(self):
        """Gets the dynamic_meta of this FrontendConfiguration.  # noqa: E501


        :return: The dynamic_meta of this FrontendConfiguration.  # noqa: E501
        :rtype: list[Mapstringstring]
        """
        return self._dynamic_meta

    @dynamic_meta.setter
    def dynamic_meta(self, dynamic_meta):
        """Sets the dynamic_meta of this FrontendConfiguration.


        :param dynamic_meta: The dynamic_meta of this FrontendConfiguration.  # noqa: E501
        :type: list[Mapstringstring]
        """

        self._dynamic_meta = dynamic_meta

    @property
    def elements_disabled(self):
        """Gets the elements_disabled of this FrontendConfiguration.  # noqa: E501


        :return: The elements_disabled of this FrontendConfiguration.  # noqa: E501
        :rtype: list[str]
        """
        return self._elements_disabled

    @elements_disabled.setter
    def elements_disabled(self, elements_disabled):
        """Sets the elements_disabled of this FrontendConfiguration.


        :param elements_disabled: The elements_disabled of this FrontendConfiguration.  # noqa: E501
        :type: list[str]
        """

        self._elements_disabled = elements_disabled

    @property
    def image_ratios(self):
        """Gets the image_ratios of this FrontendConfiguration.  # noqa: E501


        :return: The image_ratios of this FrontendConfiguration.  # noqa: E501
        :rtype: list[str]
        """
        return self._image_ratios

    @image_ratios.setter
    def image_ratios(self, image_ratios):
        """Sets the image_ratios of this FrontendConfiguration.


        :param image_ratios: The image_ratios of this FrontendConfiguration.  # noqa: E501
        :type: list[str]
        """

        self._image_ratios = image_ratios

    @property
    def notification_platforms_enabled(self):
        """Gets the notification_platforms_enabled of this FrontendConfiguration.  # noqa: E501


        :return: The notification_platforms_enabled of this FrontendConfiguration.  # noqa: E501
        :rtype: list[str]
        """
        return self._notification_platforms_enabled

    @notification_platforms_enabled.setter
    def notification_platforms_enabled(self, notification_platforms_enabled):
        """Sets the notification_platforms_enabled of this FrontendConfiguration.


        :param notification_platforms_enabled: The notification_platforms_enabled of this FrontendConfiguration.  # noqa: E501
        :type: list[str]
        """

        self._notification_platforms_enabled = notification_platforms_enabled

    @property
    def page_dynamic_meta(self):
        """Gets the page_dynamic_meta of this FrontendConfiguration.  # noqa: E501


        :return: The page_dynamic_meta of this FrontendConfiguration.  # noqa: E501
        :rtype: list[Mapstringstring]
        """
        return self._page_dynamic_meta

    @page_dynamic_meta.setter
    def page_dynamic_meta(self, page_dynamic_meta):
        """Sets the page_dynamic_meta of this FrontendConfiguration.


        :param page_dynamic_meta: The page_dynamic_meta of this FrontendConfiguration.  # noqa: E501
        :type: list[Mapstringstring]
        """

        self._page_dynamic_meta = page_dynamic_meta

    @property
    def pages_disabled(self):
        """Gets the pages_disabled of this FrontendConfiguration.  # noqa: E501


        :return: The pages_disabled of this FrontendConfiguration.  # noqa: E501
        :rtype: list[str]
        """
        return self._pages_disabled

    @pages_disabled.setter
    def pages_disabled(self, pages_disabled):
        """Sets the pages_disabled of this FrontendConfiguration.


        :param pages_disabled: The pages_disabled of this FrontendConfiguration.  # noqa: E501
        :type: list[str]
        """

        self._pages_disabled = pages_disabled

    @property
    def paragraph_tools_disabled(self):
        """Gets the paragraph_tools_disabled of this FrontendConfiguration.  # noqa: E501


        :return: The paragraph_tools_disabled of this FrontendConfiguration.  # noqa: E501
        :rtype: list[str]
        """
        return self._paragraph_tools_disabled

    @paragraph_tools_disabled.setter
    def paragraph_tools_disabled(self, paragraph_tools_disabled):
        """Sets the paragraph_tools_disabled of this FrontendConfiguration.


        :param paragraph_tools_disabled: The paragraph_tools_disabled of this FrontendConfiguration.  # noqa: E501
        :type: list[str]
        """

        self._paragraph_tools_disabled = paragraph_tools_disabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FrontendConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FrontendConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

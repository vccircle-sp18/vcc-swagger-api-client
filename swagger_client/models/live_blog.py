# coding: utf-8

"""
    CMS-Backend API

    This is API documentation of CMS-Backend  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: htdevteam@hindustantimes.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LiveBlog(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'body': 'str',
        'embed': 'Embed',
        'inline_element_id': 'int',
        'inline_element_id_list': 'list[int]'
    }

    attribute_map = {
        'body': 'body',
        'embed': 'embed',
        'inline_element_id': 'inlineElementId',
        'inline_element_id_list': 'inlineElementIdList'
    }

    def __init__(self, body=None, embed=None, inline_element_id=None, inline_element_id_list=None):  # noqa: E501
        """LiveBlog - a model defined in Swagger"""  # noqa: E501
        self._body = None
        self._embed = None
        self._inline_element_id = None
        self._inline_element_id_list = None
        self.discriminator = None
        if body is not None:
            self.body = body
        if embed is not None:
            self.embed = embed
        if inline_element_id is not None:
            self.inline_element_id = inline_element_id
        if inline_element_id_list is not None:
            self.inline_element_id_list = inline_element_id_list

    @property
    def body(self):
        """Gets the body of this LiveBlog.  # noqa: E501


        :return: The body of this LiveBlog.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this LiveBlog.


        :param body: The body of this LiveBlog.  # noqa: E501
        :type: str
        """

        self._body = body

    @property
    def embed(self):
        """Gets the embed of this LiveBlog.  # noqa: E501


        :return: The embed of this LiveBlog.  # noqa: E501
        :rtype: Embed
        """
        return self._embed

    @embed.setter
    def embed(self, embed):
        """Sets the embed of this LiveBlog.


        :param embed: The embed of this LiveBlog.  # noqa: E501
        :type: Embed
        """

        self._embed = embed

    @property
    def inline_element_id(self):
        """Gets the inline_element_id of this LiveBlog.  # noqa: E501


        :return: The inline_element_id of this LiveBlog.  # noqa: E501
        :rtype: int
        """
        return self._inline_element_id

    @inline_element_id.setter
    def inline_element_id(self, inline_element_id):
        """Sets the inline_element_id of this LiveBlog.


        :param inline_element_id: The inline_element_id of this LiveBlog.  # noqa: E501
        :type: int
        """

        self._inline_element_id = inline_element_id

    @property
    def inline_element_id_list(self):
        """Gets the inline_element_id_list of this LiveBlog.  # noqa: E501


        :return: The inline_element_id_list of this LiveBlog.  # noqa: E501
        :rtype: list[int]
        """
        return self._inline_element_id_list

    @inline_element_id_list.setter
    def inline_element_id_list(self, inline_element_id_list):
        """Sets the inline_element_id_list of this LiveBlog.


        :param inline_element_id_list: The inline_element_id_list of this LiveBlog.  # noqa: E501
        :type: list[int]
        """

        self._inline_element_id_list = inline_element_id_list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LiveBlog, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LiveBlog):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

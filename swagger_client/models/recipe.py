# coding: utf-8

"""
    CMS-Backend API

    This is API documentation of CMS-Backend  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: htdevteam@hindustantimes.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Recipe(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cooking_time_hr': 'int',
        'cooking_time_minute': 'int',
        'description': 'str',
        'ingredients': 'list[str]',
        'keywords': 'list[str]',
        'preparation_time_hr': 'int',
        'preparation_time_minute': 'int',
        'recipe_category': 'str',
        'recipe_cuisine': 'str',
        'recipe_name': 'str',
        'recipe_yield': 'str',
        'steps': 'list[HowToStep]',
        'total_time_hr': 'int',
        'total_time_minute': 'int'
    }

    attribute_map = {
        'cooking_time_hr': 'cookingTimeHr',
        'cooking_time_minute': 'cookingTimeMinute',
        'description': 'description',
        'ingredients': 'ingredients',
        'keywords': 'keywords',
        'preparation_time_hr': 'preparationTimeHr',
        'preparation_time_minute': 'preparationTimeMinute',
        'recipe_category': 'recipeCategory',
        'recipe_cuisine': 'recipeCuisine',
        'recipe_name': 'recipeName',
        'recipe_yield': 'recipeYield',
        'steps': 'steps',
        'total_time_hr': 'totalTimeHr',
        'total_time_minute': 'totalTimeMinute'
    }

    def __init__(self, cooking_time_hr=None, cooking_time_minute=None, description=None, ingredients=None, keywords=None, preparation_time_hr=None, preparation_time_minute=None, recipe_category=None, recipe_cuisine=None, recipe_name=None, recipe_yield=None, steps=None, total_time_hr=None, total_time_minute=None):  # noqa: E501
        """Recipe - a model defined in Swagger"""  # noqa: E501
        self._cooking_time_hr = None
        self._cooking_time_minute = None
        self._description = None
        self._ingredients = None
        self._keywords = None
        self._preparation_time_hr = None
        self._preparation_time_minute = None
        self._recipe_category = None
        self._recipe_cuisine = None
        self._recipe_name = None
        self._recipe_yield = None
        self._steps = None
        self._total_time_hr = None
        self._total_time_minute = None
        self.discriminator = None
        if cooking_time_hr is not None:
            self.cooking_time_hr = cooking_time_hr
        if cooking_time_minute is not None:
            self.cooking_time_minute = cooking_time_minute
        if description is not None:
            self.description = description
        if ingredients is not None:
            self.ingredients = ingredients
        if keywords is not None:
            self.keywords = keywords
        if preparation_time_hr is not None:
            self.preparation_time_hr = preparation_time_hr
        if preparation_time_minute is not None:
            self.preparation_time_minute = preparation_time_minute
        if recipe_category is not None:
            self.recipe_category = recipe_category
        if recipe_cuisine is not None:
            self.recipe_cuisine = recipe_cuisine
        if recipe_name is not None:
            self.recipe_name = recipe_name
        if recipe_yield is not None:
            self.recipe_yield = recipe_yield
        if steps is not None:
            self.steps = steps
        if total_time_hr is not None:
            self.total_time_hr = total_time_hr
        if total_time_minute is not None:
            self.total_time_minute = total_time_minute

    @property
    def cooking_time_hr(self):
        """Gets the cooking_time_hr of this Recipe.  # noqa: E501


        :return: The cooking_time_hr of this Recipe.  # noqa: E501
        :rtype: int
        """
        return self._cooking_time_hr

    @cooking_time_hr.setter
    def cooking_time_hr(self, cooking_time_hr):
        """Sets the cooking_time_hr of this Recipe.


        :param cooking_time_hr: The cooking_time_hr of this Recipe.  # noqa: E501
        :type: int
        """

        self._cooking_time_hr = cooking_time_hr

    @property
    def cooking_time_minute(self):
        """Gets the cooking_time_minute of this Recipe.  # noqa: E501


        :return: The cooking_time_minute of this Recipe.  # noqa: E501
        :rtype: int
        """
        return self._cooking_time_minute

    @cooking_time_minute.setter
    def cooking_time_minute(self, cooking_time_minute):
        """Sets the cooking_time_minute of this Recipe.


        :param cooking_time_minute: The cooking_time_minute of this Recipe.  # noqa: E501
        :type: int
        """

        self._cooking_time_minute = cooking_time_minute

    @property
    def description(self):
        """Gets the description of this Recipe.  # noqa: E501


        :return: The description of this Recipe.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Recipe.


        :param description: The description of this Recipe.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def ingredients(self):
        """Gets the ingredients of this Recipe.  # noqa: E501


        :return: The ingredients of this Recipe.  # noqa: E501
        :rtype: list[str]
        """
        return self._ingredients

    @ingredients.setter
    def ingredients(self, ingredients):
        """Sets the ingredients of this Recipe.


        :param ingredients: The ingredients of this Recipe.  # noqa: E501
        :type: list[str]
        """

        self._ingredients = ingredients

    @property
    def keywords(self):
        """Gets the keywords of this Recipe.  # noqa: E501


        :return: The keywords of this Recipe.  # noqa: E501
        :rtype: list[str]
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this Recipe.


        :param keywords: The keywords of this Recipe.  # noqa: E501
        :type: list[str]
        """

        self._keywords = keywords

    @property
    def preparation_time_hr(self):
        """Gets the preparation_time_hr of this Recipe.  # noqa: E501


        :return: The preparation_time_hr of this Recipe.  # noqa: E501
        :rtype: int
        """
        return self._preparation_time_hr

    @preparation_time_hr.setter
    def preparation_time_hr(self, preparation_time_hr):
        """Sets the preparation_time_hr of this Recipe.


        :param preparation_time_hr: The preparation_time_hr of this Recipe.  # noqa: E501
        :type: int
        """

        self._preparation_time_hr = preparation_time_hr

    @property
    def preparation_time_minute(self):
        """Gets the preparation_time_minute of this Recipe.  # noqa: E501


        :return: The preparation_time_minute of this Recipe.  # noqa: E501
        :rtype: int
        """
        return self._preparation_time_minute

    @preparation_time_minute.setter
    def preparation_time_minute(self, preparation_time_minute):
        """Sets the preparation_time_minute of this Recipe.


        :param preparation_time_minute: The preparation_time_minute of this Recipe.  # noqa: E501
        :type: int
        """

        self._preparation_time_minute = preparation_time_minute

    @property
    def recipe_category(self):
        """Gets the recipe_category of this Recipe.  # noqa: E501


        :return: The recipe_category of this Recipe.  # noqa: E501
        :rtype: str
        """
        return self._recipe_category

    @recipe_category.setter
    def recipe_category(self, recipe_category):
        """Sets the recipe_category of this Recipe.


        :param recipe_category: The recipe_category of this Recipe.  # noqa: E501
        :type: str
        """

        self._recipe_category = recipe_category

    @property
    def recipe_cuisine(self):
        """Gets the recipe_cuisine of this Recipe.  # noqa: E501


        :return: The recipe_cuisine of this Recipe.  # noqa: E501
        :rtype: str
        """
        return self._recipe_cuisine

    @recipe_cuisine.setter
    def recipe_cuisine(self, recipe_cuisine):
        """Sets the recipe_cuisine of this Recipe.


        :param recipe_cuisine: The recipe_cuisine of this Recipe.  # noqa: E501
        :type: str
        """

        self._recipe_cuisine = recipe_cuisine

    @property
    def recipe_name(self):
        """Gets the recipe_name of this Recipe.  # noqa: E501


        :return: The recipe_name of this Recipe.  # noqa: E501
        :rtype: str
        """
        return self._recipe_name

    @recipe_name.setter
    def recipe_name(self, recipe_name):
        """Sets the recipe_name of this Recipe.


        :param recipe_name: The recipe_name of this Recipe.  # noqa: E501
        :type: str
        """

        self._recipe_name = recipe_name

    @property
    def recipe_yield(self):
        """Gets the recipe_yield of this Recipe.  # noqa: E501


        :return: The recipe_yield of this Recipe.  # noqa: E501
        :rtype: str
        """
        return self._recipe_yield

    @recipe_yield.setter
    def recipe_yield(self, recipe_yield):
        """Sets the recipe_yield of this Recipe.


        :param recipe_yield: The recipe_yield of this Recipe.  # noqa: E501
        :type: str
        """

        self._recipe_yield = recipe_yield

    @property
    def steps(self):
        """Gets the steps of this Recipe.  # noqa: E501


        :return: The steps of this Recipe.  # noqa: E501
        :rtype: list[HowToStep]
        """
        return self._steps

    @steps.setter
    def steps(self, steps):
        """Sets the steps of this Recipe.


        :param steps: The steps of this Recipe.  # noqa: E501
        :type: list[HowToStep]
        """

        self._steps = steps

    @property
    def total_time_hr(self):
        """Gets the total_time_hr of this Recipe.  # noqa: E501


        :return: The total_time_hr of this Recipe.  # noqa: E501
        :rtype: int
        """
        return self._total_time_hr

    @total_time_hr.setter
    def total_time_hr(self, total_time_hr):
        """Sets the total_time_hr of this Recipe.


        :param total_time_hr: The total_time_hr of this Recipe.  # noqa: E501
        :type: int
        """

        self._total_time_hr = total_time_hr

    @property
    def total_time_minute(self):
        """Gets the total_time_minute of this Recipe.  # noqa: E501


        :return: The total_time_minute of this Recipe.  # noqa: E501
        :rtype: int
        """
        return self._total_time_minute

    @total_time_minute.setter
    def total_time_minute(self, total_time_minute):
        """Sets the total_time_minute of this Recipe.


        :param total_time_minute: The total_time_minute of this Recipe.  # noqa: E501
        :type: int
        """

        self._total_time_minute = total_time_minute

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Recipe, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Recipe):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

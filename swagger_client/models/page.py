# coding: utf-8

"""
    CMS-Backend API

    This is API documentation of CMS-Backend  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: htdevteam@hindustantimes.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Page(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'about': 'str',
        'active': 'bool',
        'additional_info': 'str',
        'alias': 'str',
        'body_elements': 'list[int]',
        'breaking_news_id': 'str',
        'category': 'str',
        'cover_image': 'str',
        'creation_date': 'str',
        'css_html_class': 'str',
        'deleted': 'bool',
        'description': 'str',
        'design': 'str',
        'domain_id': 'str',
        'external_url': 'str',
        'id': 'int',
        'image_caption': 'str',
        'images': 'dict(str, str)',
        'keywords': 'list[str]',
        'last_modified_by': 'str',
        'last_modified_by_user_name': 'str',
        'last_modified_date': 'str',
        'last_published_by': 'str',
        'last_published_by_user_name': 'str',
        'last_published_date': 'str',
        'last_request_id': 'str',
        'last_updated': 'str',
        'locked_by_user_id': 'str',
        'locked_by_user_name': 'str',
        'locked_date': 'str',
        'metadata': 'PageMeta',
        'modification_history': 'dict(str, str)',
        'name': 'str',
        'navigation': 'list[PageCompact]',
        'page_articles': 'list[int]',
        'page_type': 'str',
        'parent_section': 'Page',
        'pinned_articles': 'list[PinnedArticle]',
        'section_display_name': 'str',
        'sponsor_image': 'str',
        'status': 'str',
        'sub_navigation': 'list[PageCompact]',
        'sub_section': 'Page',
        'template': 'PageTemplate',
        'title': 'str',
        'to_be_autobacklink': 'bool',
        'url': 'str',
        'wire_feed_id': 'str'
    }

    attribute_map = {
        'about': 'about',
        'active': 'active',
        'additional_info': 'additionalInfo',
        'alias': 'alias',
        'body_elements': 'bodyElements',
        'breaking_news_id': 'breakingNewsId',
        'category': 'category',
        'cover_image': 'coverImage',
        'creation_date': 'creationDate',
        'css_html_class': 'cssHTMLClass',
        'deleted': 'deleted',
        'description': 'description',
        'design': 'design',
        'domain_id': 'domainId',
        'external_url': 'externalUrl',
        'id': 'id',
        'image_caption': 'imageCaption',
        'images': 'images',
        'keywords': 'keywords',
        'last_modified_by': 'lastModifiedBy',
        'last_modified_by_user_name': 'lastModifiedByUserName',
        'last_modified_date': 'lastModifiedDate',
        'last_published_by': 'lastPublishedBy',
        'last_published_by_user_name': 'lastPublishedByUserName',
        'last_published_date': 'lastPublishedDate',
        'last_request_id': 'lastRequestId',
        'last_updated': 'lastUpdated',
        'locked_by_user_id': 'lockedByUserId',
        'locked_by_user_name': 'lockedByUserName',
        'locked_date': 'lockedDate',
        'metadata': 'metadata',
        'modification_history': 'modificationHistory',
        'name': 'name',
        'navigation': 'navigation',
        'page_articles': 'pageArticles',
        'page_type': 'pageType',
        'parent_section': 'parentSection',
        'pinned_articles': 'pinnedArticles',
        'section_display_name': 'sectionDisplayName',
        'sponsor_image': 'sponsorImage',
        'status': 'status',
        'sub_navigation': 'subNavigation',
        'sub_section': 'subSection',
        'template': 'template',
        'title': 'title',
        'to_be_autobacklink': 'toBeAutobacklink',
        'url': 'url',
        'wire_feed_id': 'wireFeedId'
    }

    def __init__(self, about=None, active=None, additional_info=None, alias=None, body_elements=None, breaking_news_id=None, category=None, cover_image=None, creation_date=None, css_html_class=None, deleted=None, description=None, design=None, domain_id=None, external_url=None, id=None, image_caption=None, images=None, keywords=None, last_modified_by=None, last_modified_by_user_name=None, last_modified_date=None, last_published_by=None, last_published_by_user_name=None, last_published_date=None, last_request_id=None, last_updated=None, locked_by_user_id=None, locked_by_user_name=None, locked_date=None, metadata=None, modification_history=None, name=None, navigation=None, page_articles=None, page_type=None, parent_section=None, pinned_articles=None, section_display_name=None, sponsor_image=None, status=None, sub_navigation=None, sub_section=None, template=None, title=None, to_be_autobacklink=None, url=None, wire_feed_id=None):  # noqa: E501
        """Page - a model defined in Swagger"""  # noqa: E501
        self._about = None
        self._active = None
        self._additional_info = None
        self._alias = None
        self._body_elements = None
        self._breaking_news_id = None
        self._category = None
        self._cover_image = None
        self._creation_date = None
        self._css_html_class = None
        self._deleted = None
        self._description = None
        self._design = None
        self._domain_id = None
        self._external_url = None
        self._id = None
        self._image_caption = None
        self._images = None
        self._keywords = None
        self._last_modified_by = None
        self._last_modified_by_user_name = None
        self._last_modified_date = None
        self._last_published_by = None
        self._last_published_by_user_name = None
        self._last_published_date = None
        self._last_request_id = None
        self._last_updated = None
        self._locked_by_user_id = None
        self._locked_by_user_name = None
        self._locked_date = None
        self._metadata = None
        self._modification_history = None
        self._name = None
        self._navigation = None
        self._page_articles = None
        self._page_type = None
        self._parent_section = None
        self._pinned_articles = None
        self._section_display_name = None
        self._sponsor_image = None
        self._status = None
        self._sub_navigation = None
        self._sub_section = None
        self._template = None
        self._title = None
        self._to_be_autobacklink = None
        self._url = None
        self._wire_feed_id = None
        self.discriminator = None
        if about is not None:
            self.about = about
        if active is not None:
            self.active = active
        if additional_info is not None:
            self.additional_info = additional_info
        if alias is not None:
            self.alias = alias
        if body_elements is not None:
            self.body_elements = body_elements
        if breaking_news_id is not None:
            self.breaking_news_id = breaking_news_id
        if category is not None:
            self.category = category
        if cover_image is not None:
            self.cover_image = cover_image
        if creation_date is not None:
            self.creation_date = creation_date
        if css_html_class is not None:
            self.css_html_class = css_html_class
        if deleted is not None:
            self.deleted = deleted
        if description is not None:
            self.description = description
        if design is not None:
            self.design = design
        if domain_id is not None:
            self.domain_id = domain_id
        if external_url is not None:
            self.external_url = external_url
        if id is not None:
            self.id = id
        if image_caption is not None:
            self.image_caption = image_caption
        if images is not None:
            self.images = images
        if keywords is not None:
            self.keywords = keywords
        if last_modified_by is not None:
            self.last_modified_by = last_modified_by
        if last_modified_by_user_name is not None:
            self.last_modified_by_user_name = last_modified_by_user_name
        if last_modified_date is not None:
            self.last_modified_date = last_modified_date
        if last_published_by is not None:
            self.last_published_by = last_published_by
        if last_published_by_user_name is not None:
            self.last_published_by_user_name = last_published_by_user_name
        if last_published_date is not None:
            self.last_published_date = last_published_date
        if last_request_id is not None:
            self.last_request_id = last_request_id
        if last_updated is not None:
            self.last_updated = last_updated
        if locked_by_user_id is not None:
            self.locked_by_user_id = locked_by_user_id
        if locked_by_user_name is not None:
            self.locked_by_user_name = locked_by_user_name
        if locked_date is not None:
            self.locked_date = locked_date
        if metadata is not None:
            self.metadata = metadata
        if modification_history is not None:
            self.modification_history = modification_history
        if name is not None:
            self.name = name
        if navigation is not None:
            self.navigation = navigation
        if page_articles is not None:
            self.page_articles = page_articles
        if page_type is not None:
            self.page_type = page_type
        if parent_section is not None:
            self.parent_section = parent_section
        if pinned_articles is not None:
            self.pinned_articles = pinned_articles
        if section_display_name is not None:
            self.section_display_name = section_display_name
        if sponsor_image is not None:
            self.sponsor_image = sponsor_image
        if status is not None:
            self.status = status
        if sub_navigation is not None:
            self.sub_navigation = sub_navigation
        if sub_section is not None:
            self.sub_section = sub_section
        if template is not None:
            self.template = template
        if title is not None:
            self.title = title
        if to_be_autobacklink is not None:
            self.to_be_autobacklink = to_be_autobacklink
        if url is not None:
            self.url = url
        if wire_feed_id is not None:
            self.wire_feed_id = wire_feed_id

    @property
    def about(self):
        """Gets the about of this Page.  # noqa: E501


        :return: The about of this Page.  # noqa: E501
        :rtype: str
        """
        return self._about

    @about.setter
    def about(self, about):
        """Sets the about of this Page.


        :param about: The about of this Page.  # noqa: E501
        :type: str
        """

        self._about = about

    @property
    def active(self):
        """Gets the active of this Page.  # noqa: E501


        :return: The active of this Page.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Page.


        :param active: The active of this Page.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def additional_info(self):
        """Gets the additional_info of this Page.  # noqa: E501


        :return: The additional_info of this Page.  # noqa: E501
        :rtype: str
        """
        return self._additional_info

    @additional_info.setter
    def additional_info(self, additional_info):
        """Sets the additional_info of this Page.


        :param additional_info: The additional_info of this Page.  # noqa: E501
        :type: str
        """

        self._additional_info = additional_info

    @property
    def alias(self):
        """Gets the alias of this Page.  # noqa: E501


        :return: The alias of this Page.  # noqa: E501
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this Page.


        :param alias: The alias of this Page.  # noqa: E501
        :type: str
        """

        self._alias = alias

    @property
    def body_elements(self):
        """Gets the body_elements of this Page.  # noqa: E501


        :return: The body_elements of this Page.  # noqa: E501
        :rtype: list[int]
        """
        return self._body_elements

    @body_elements.setter
    def body_elements(self, body_elements):
        """Sets the body_elements of this Page.


        :param body_elements: The body_elements of this Page.  # noqa: E501
        :type: list[int]
        """

        self._body_elements = body_elements

    @property
    def breaking_news_id(self):
        """Gets the breaking_news_id of this Page.  # noqa: E501


        :return: The breaking_news_id of this Page.  # noqa: E501
        :rtype: str
        """
        return self._breaking_news_id

    @breaking_news_id.setter
    def breaking_news_id(self, breaking_news_id):
        """Sets the breaking_news_id of this Page.


        :param breaking_news_id: The breaking_news_id of this Page.  # noqa: E501
        :type: str
        """

        self._breaking_news_id = breaking_news_id

    @property
    def category(self):
        """Gets the category of this Page.  # noqa: E501


        :return: The category of this Page.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Page.


        :param category: The category of this Page.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def cover_image(self):
        """Gets the cover_image of this Page.  # noqa: E501


        :return: The cover_image of this Page.  # noqa: E501
        :rtype: str
        """
        return self._cover_image

    @cover_image.setter
    def cover_image(self, cover_image):
        """Sets the cover_image of this Page.


        :param cover_image: The cover_image of this Page.  # noqa: E501
        :type: str
        """

        self._cover_image = cover_image

    @property
    def creation_date(self):
        """Gets the creation_date of this Page.  # noqa: E501


        :return: The creation_date of this Page.  # noqa: E501
        :rtype: str
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this Page.


        :param creation_date: The creation_date of this Page.  # noqa: E501
        :type: str
        """

        self._creation_date = creation_date

    @property
    def css_html_class(self):
        """Gets the css_html_class of this Page.  # noqa: E501


        :return: The css_html_class of this Page.  # noqa: E501
        :rtype: str
        """
        return self._css_html_class

    @css_html_class.setter
    def css_html_class(self, css_html_class):
        """Sets the css_html_class of this Page.


        :param css_html_class: The css_html_class of this Page.  # noqa: E501
        :type: str
        """

        self._css_html_class = css_html_class

    @property
    def deleted(self):
        """Gets the deleted of this Page.  # noqa: E501


        :return: The deleted of this Page.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this Page.


        :param deleted: The deleted of this Page.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def description(self):
        """Gets the description of this Page.  # noqa: E501


        :return: The description of this Page.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Page.


        :param description: The description of this Page.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def design(self):
        """Gets the design of this Page.  # noqa: E501


        :return: The design of this Page.  # noqa: E501
        :rtype: str
        """
        return self._design

    @design.setter
    def design(self, design):
        """Sets the design of this Page.


        :param design: The design of this Page.  # noqa: E501
        :type: str
        """

        self._design = design

    @property
    def domain_id(self):
        """Gets the domain_id of this Page.  # noqa: E501


        :return: The domain_id of this Page.  # noqa: E501
        :rtype: str
        """
        return self._domain_id

    @domain_id.setter
    def domain_id(self, domain_id):
        """Sets the domain_id of this Page.


        :param domain_id: The domain_id of this Page.  # noqa: E501
        :type: str
        """

        self._domain_id = domain_id

    @property
    def external_url(self):
        """Gets the external_url of this Page.  # noqa: E501


        :return: The external_url of this Page.  # noqa: E501
        :rtype: str
        """
        return self._external_url

    @external_url.setter
    def external_url(self, external_url):
        """Sets the external_url of this Page.


        :param external_url: The external_url of this Page.  # noqa: E501
        :type: str
        """

        self._external_url = external_url

    @property
    def id(self):
        """Gets the id of this Page.  # noqa: E501


        :return: The id of this Page.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Page.


        :param id: The id of this Page.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def image_caption(self):
        """Gets the image_caption of this Page.  # noqa: E501


        :return: The image_caption of this Page.  # noqa: E501
        :rtype: str
        """
        return self._image_caption

    @image_caption.setter
    def image_caption(self, image_caption):
        """Sets the image_caption of this Page.


        :param image_caption: The image_caption of this Page.  # noqa: E501
        :type: str
        """

        self._image_caption = image_caption

    @property
    def images(self):
        """Gets the images of this Page.  # noqa: E501


        :return: The images of this Page.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this Page.


        :param images: The images of this Page.  # noqa: E501
        :type: dict(str, str)
        """

        self._images = images

    @property
    def keywords(self):
        """Gets the keywords of this Page.  # noqa: E501


        :return: The keywords of this Page.  # noqa: E501
        :rtype: list[str]
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this Page.


        :param keywords: The keywords of this Page.  # noqa: E501
        :type: list[str]
        """

        self._keywords = keywords

    @property
    def last_modified_by(self):
        """Gets the last_modified_by of this Page.  # noqa: E501


        :return: The last_modified_by of this Page.  # noqa: E501
        :rtype: str
        """
        return self._last_modified_by

    @last_modified_by.setter
    def last_modified_by(self, last_modified_by):
        """Sets the last_modified_by of this Page.


        :param last_modified_by: The last_modified_by of this Page.  # noqa: E501
        :type: str
        """

        self._last_modified_by = last_modified_by

    @property
    def last_modified_by_user_name(self):
        """Gets the last_modified_by_user_name of this Page.  # noqa: E501


        :return: The last_modified_by_user_name of this Page.  # noqa: E501
        :rtype: str
        """
        return self._last_modified_by_user_name

    @last_modified_by_user_name.setter
    def last_modified_by_user_name(self, last_modified_by_user_name):
        """Sets the last_modified_by_user_name of this Page.


        :param last_modified_by_user_name: The last_modified_by_user_name of this Page.  # noqa: E501
        :type: str
        """

        self._last_modified_by_user_name = last_modified_by_user_name

    @property
    def last_modified_date(self):
        """Gets the last_modified_date of this Page.  # noqa: E501


        :return: The last_modified_date of this Page.  # noqa: E501
        :rtype: str
        """
        return self._last_modified_date

    @last_modified_date.setter
    def last_modified_date(self, last_modified_date):
        """Sets the last_modified_date of this Page.


        :param last_modified_date: The last_modified_date of this Page.  # noqa: E501
        :type: str
        """

        self._last_modified_date = last_modified_date

    @property
    def last_published_by(self):
        """Gets the last_published_by of this Page.  # noqa: E501


        :return: The last_published_by of this Page.  # noqa: E501
        :rtype: str
        """
        return self._last_published_by

    @last_published_by.setter
    def last_published_by(self, last_published_by):
        """Sets the last_published_by of this Page.


        :param last_published_by: The last_published_by of this Page.  # noqa: E501
        :type: str
        """

        self._last_published_by = last_published_by

    @property
    def last_published_by_user_name(self):
        """Gets the last_published_by_user_name of this Page.  # noqa: E501


        :return: The last_published_by_user_name of this Page.  # noqa: E501
        :rtype: str
        """
        return self._last_published_by_user_name

    @last_published_by_user_name.setter
    def last_published_by_user_name(self, last_published_by_user_name):
        """Sets the last_published_by_user_name of this Page.


        :param last_published_by_user_name: The last_published_by_user_name of this Page.  # noqa: E501
        :type: str
        """

        self._last_published_by_user_name = last_published_by_user_name

    @property
    def last_published_date(self):
        """Gets the last_published_date of this Page.  # noqa: E501


        :return: The last_published_date of this Page.  # noqa: E501
        :rtype: str
        """
        return self._last_published_date

    @last_published_date.setter
    def last_published_date(self, last_published_date):
        """Sets the last_published_date of this Page.


        :param last_published_date: The last_published_date of this Page.  # noqa: E501
        :type: str
        """

        self._last_published_date = last_published_date

    @property
    def last_request_id(self):
        """Gets the last_request_id of this Page.  # noqa: E501


        :return: The last_request_id of this Page.  # noqa: E501
        :rtype: str
        """
        return self._last_request_id

    @last_request_id.setter
    def last_request_id(self, last_request_id):
        """Sets the last_request_id of this Page.


        :param last_request_id: The last_request_id of this Page.  # noqa: E501
        :type: str
        """

        self._last_request_id = last_request_id

    @property
    def last_updated(self):
        """Gets the last_updated of this Page.  # noqa: E501


        :return: The last_updated of this Page.  # noqa: E501
        :rtype: str
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this Page.


        :param last_updated: The last_updated of this Page.  # noqa: E501
        :type: str
        """

        self._last_updated = last_updated

    @property
    def locked_by_user_id(self):
        """Gets the locked_by_user_id of this Page.  # noqa: E501


        :return: The locked_by_user_id of this Page.  # noqa: E501
        :rtype: str
        """
        return self._locked_by_user_id

    @locked_by_user_id.setter
    def locked_by_user_id(self, locked_by_user_id):
        """Sets the locked_by_user_id of this Page.


        :param locked_by_user_id: The locked_by_user_id of this Page.  # noqa: E501
        :type: str
        """

        self._locked_by_user_id = locked_by_user_id

    @property
    def locked_by_user_name(self):
        """Gets the locked_by_user_name of this Page.  # noqa: E501


        :return: The locked_by_user_name of this Page.  # noqa: E501
        :rtype: str
        """
        return self._locked_by_user_name

    @locked_by_user_name.setter
    def locked_by_user_name(self, locked_by_user_name):
        """Sets the locked_by_user_name of this Page.


        :param locked_by_user_name: The locked_by_user_name of this Page.  # noqa: E501
        :type: str
        """

        self._locked_by_user_name = locked_by_user_name

    @property
    def locked_date(self):
        """Gets the locked_date of this Page.  # noqa: E501


        :return: The locked_date of this Page.  # noqa: E501
        :rtype: str
        """
        return self._locked_date

    @locked_date.setter
    def locked_date(self, locked_date):
        """Sets the locked_date of this Page.


        :param locked_date: The locked_date of this Page.  # noqa: E501
        :type: str
        """

        self._locked_date = locked_date

    @property
    def metadata(self):
        """Gets the metadata of this Page.  # noqa: E501


        :return: The metadata of this Page.  # noqa: E501
        :rtype: PageMeta
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Page.


        :param metadata: The metadata of this Page.  # noqa: E501
        :type: PageMeta
        """

        self._metadata = metadata

    @property
    def modification_history(self):
        """Gets the modification_history of this Page.  # noqa: E501


        :return: The modification_history of this Page.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._modification_history

    @modification_history.setter
    def modification_history(self, modification_history):
        """Sets the modification_history of this Page.


        :param modification_history: The modification_history of this Page.  # noqa: E501
        :type: dict(str, str)
        """

        self._modification_history = modification_history

    @property
    def name(self):
        """Gets the name of this Page.  # noqa: E501


        :return: The name of this Page.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Page.


        :param name: The name of this Page.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def navigation(self):
        """Gets the navigation of this Page.  # noqa: E501


        :return: The navigation of this Page.  # noqa: E501
        :rtype: list[PageCompact]
        """
        return self._navigation

    @navigation.setter
    def navigation(self, navigation):
        """Sets the navigation of this Page.


        :param navigation: The navigation of this Page.  # noqa: E501
        :type: list[PageCompact]
        """

        self._navigation = navigation

    @property
    def page_articles(self):
        """Gets the page_articles of this Page.  # noqa: E501


        :return: The page_articles of this Page.  # noqa: E501
        :rtype: list[int]
        """
        return self._page_articles

    @page_articles.setter
    def page_articles(self, page_articles):
        """Sets the page_articles of this Page.


        :param page_articles: The page_articles of this Page.  # noqa: E501
        :type: list[int]
        """

        self._page_articles = page_articles

    @property
    def page_type(self):
        """Gets the page_type of this Page.  # noqa: E501


        :return: The page_type of this Page.  # noqa: E501
        :rtype: str
        """
        return self._page_type

    @page_type.setter
    def page_type(self, page_type):
        """Sets the page_type of this Page.


        :param page_type: The page_type of this Page.  # noqa: E501
        :type: str
        """
        allowed_values = ["PRIMARY", "TOPIC", "SECTION", "SUBSECTION", "SUBSECTION_L2", "AGENCY", "EXTERNAL"]  # noqa: E501
        if page_type not in allowed_values:
            raise ValueError(
                "Invalid value for `page_type` ({0}), must be one of {1}"  # noqa: E501
                .format(page_type, allowed_values)
            )

        self._page_type = page_type

    @property
    def parent_section(self):
        """Gets the parent_section of this Page.  # noqa: E501


        :return: The parent_section of this Page.  # noqa: E501
        :rtype: Page
        """
        return self._parent_section

    @parent_section.setter
    def parent_section(self, parent_section):
        """Sets the parent_section of this Page.


        :param parent_section: The parent_section of this Page.  # noqa: E501
        :type: Page
        """

        self._parent_section = parent_section

    @property
    def pinned_articles(self):
        """Gets the pinned_articles of this Page.  # noqa: E501


        :return: The pinned_articles of this Page.  # noqa: E501
        :rtype: list[PinnedArticle]
        """
        return self._pinned_articles

    @pinned_articles.setter
    def pinned_articles(self, pinned_articles):
        """Sets the pinned_articles of this Page.


        :param pinned_articles: The pinned_articles of this Page.  # noqa: E501
        :type: list[PinnedArticle]
        """

        self._pinned_articles = pinned_articles

    @property
    def section_display_name(self):
        """Gets the section_display_name of this Page.  # noqa: E501


        :return: The section_display_name of this Page.  # noqa: E501
        :rtype: str
        """
        return self._section_display_name

    @section_display_name.setter
    def section_display_name(self, section_display_name):
        """Sets the section_display_name of this Page.


        :param section_display_name: The section_display_name of this Page.  # noqa: E501
        :type: str
        """

        self._section_display_name = section_display_name

    @property
    def sponsor_image(self):
        """Gets the sponsor_image of this Page.  # noqa: E501


        :return: The sponsor_image of this Page.  # noqa: E501
        :rtype: str
        """
        return self._sponsor_image

    @sponsor_image.setter
    def sponsor_image(self, sponsor_image):
        """Sets the sponsor_image of this Page.


        :param sponsor_image: The sponsor_image of this Page.  # noqa: E501
        :type: str
        """

        self._sponsor_image = sponsor_image

    @property
    def status(self):
        """Gets the status of this Page.  # noqa: E501


        :return: The status of this Page.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Page.


        :param status: The status of this Page.  # noqa: E501
        :type: str
        """
        allowed_values = ["CREATED", "PUBLISHED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def sub_navigation(self):
        """Gets the sub_navigation of this Page.  # noqa: E501


        :return: The sub_navigation of this Page.  # noqa: E501
        :rtype: list[PageCompact]
        """
        return self._sub_navigation

    @sub_navigation.setter
    def sub_navigation(self, sub_navigation):
        """Sets the sub_navigation of this Page.


        :param sub_navigation: The sub_navigation of this Page.  # noqa: E501
        :type: list[PageCompact]
        """

        self._sub_navigation = sub_navigation

    @property
    def sub_section(self):
        """Gets the sub_section of this Page.  # noqa: E501


        :return: The sub_section of this Page.  # noqa: E501
        :rtype: Page
        """
        return self._sub_section

    @sub_section.setter
    def sub_section(self, sub_section):
        """Sets the sub_section of this Page.


        :param sub_section: The sub_section of this Page.  # noqa: E501
        :type: Page
        """

        self._sub_section = sub_section

    @property
    def template(self):
        """Gets the template of this Page.  # noqa: E501


        :return: The template of this Page.  # noqa: E501
        :rtype: PageTemplate
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this Page.


        :param template: The template of this Page.  # noqa: E501
        :type: PageTemplate
        """

        self._template = template

    @property
    def title(self):
        """Gets the title of this Page.  # noqa: E501


        :return: The title of this Page.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Page.


        :param title: The title of this Page.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def to_be_autobacklink(self):
        """Gets the to_be_autobacklink of this Page.  # noqa: E501


        :return: The to_be_autobacklink of this Page.  # noqa: E501
        :rtype: bool
        """
        return self._to_be_autobacklink

    @to_be_autobacklink.setter
    def to_be_autobacklink(self, to_be_autobacklink):
        """Sets the to_be_autobacklink of this Page.


        :param to_be_autobacklink: The to_be_autobacklink of this Page.  # noqa: E501
        :type: bool
        """

        self._to_be_autobacklink = to_be_autobacklink

    @property
    def url(self):
        """Gets the url of this Page.  # noqa: E501


        :return: The url of this Page.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Page.


        :param url: The url of this Page.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def wire_feed_id(self):
        """Gets the wire_feed_id of this Page.  # noqa: E501


        :return: The wire_feed_id of this Page.  # noqa: E501
        :rtype: str
        """
        return self._wire_feed_id

    @wire_feed_id.setter
    def wire_feed_id(self, wire_feed_id):
        """Sets the wire_feed_id of this Page.


        :param wire_feed_id: The wire_feed_id of this Page.  # noqa: E501
        :type: str
        """

        self._wire_feed_id = wire_feed_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Page, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Page):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

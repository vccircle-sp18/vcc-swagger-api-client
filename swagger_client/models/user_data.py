# coding: utf-8

"""
    CMS-Backend API

    This is API documentation of CMS-Backend  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: htdevteam@hindustantimes.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UserData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'slug_name': 'str',
        'twitter': 'str',
        'user_types': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'slug_name': 'slugName',
        'twitter': 'twitter',
        'user_types': 'userTypes'
    }

    def __init__(self, id=None, name=None, slug_name=None, twitter=None, user_types=None):  # noqa: E501
        """UserData - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._slug_name = None
        self._twitter = None
        self._user_types = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if slug_name is not None:
            self.slug_name = slug_name
        if twitter is not None:
            self.twitter = twitter
        if user_types is not None:
            self.user_types = user_types

    @property
    def id(self):
        """Gets the id of this UserData.  # noqa: E501


        :return: The id of this UserData.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserData.


        :param id: The id of this UserData.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this UserData.  # noqa: E501


        :return: The name of this UserData.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserData.


        :param name: The name of this UserData.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def slug_name(self):
        """Gets the slug_name of this UserData.  # noqa: E501


        :return: The slug_name of this UserData.  # noqa: E501
        :rtype: str
        """
        return self._slug_name

    @slug_name.setter
    def slug_name(self, slug_name):
        """Sets the slug_name of this UserData.


        :param slug_name: The slug_name of this UserData.  # noqa: E501
        :type: str
        """

        self._slug_name = slug_name

    @property
    def twitter(self):
        """Gets the twitter of this UserData.  # noqa: E501


        :return: The twitter of this UserData.  # noqa: E501
        :rtype: str
        """
        return self._twitter

    @twitter.setter
    def twitter(self, twitter):
        """Sets the twitter of this UserData.


        :param twitter: The twitter of this UserData.  # noqa: E501
        :type: str
        """

        self._twitter = twitter

    @property
    def user_types(self):
        """Gets the user_types of this UserData.  # noqa: E501


        :return: The user_types of this UserData.  # noqa: E501
        :rtype: list[str]
        """
        return self._user_types

    @user_types.setter
    def user_types(self, user_types):
        """Sets the user_types of this UserData.


        :param user_types: The user_types of this UserData.  # noqa: E501
        :type: list[str]
        """

        self._user_types = user_types

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
